'use strict';

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
require('../aria-announcer/AriaAnnouncerContext.js');
var useAriaAnnouncer = require('../aria-announcer/useAriaAnnouncer.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var PaginationContext = require('./PaginationContext.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var Pagination$1 = require('./Pagination.css.js');

const withBaseName = makePrefixer.makePrefixer("saltPagination");
const { Provider } = PaginationContext.paginationContext;
const Pagination = React.forwardRef(
  function Pagination2({
    className,
    count,
    children,
    defaultPage = 1,
    page: pageProp,
    onPageChange: onPageChangeProp,
    ...restProps
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-pagination",
      css: Pagination$1,
      window: targetWindow
    });
    const [pageState, setPageState] = useControlled.useControlled({
      controlled: pageProp,
      default: defaultPage,
      name: "Pagination",
      state: "page"
    });
    const onPageChange = React.useCallback(
      (event, page) => {
        setPageState(page);
        onPageChangeProp == null ? void 0 : onPageChangeProp(event, page);
      },
      [onPageChangeProp]
    );
    const contextValue = React.useMemo(
      () => ({
        page: pageState,
        count,
        onPageChange
      }),
      [pageState, count, onPageChange]
    );
    const { announce } = useAriaAnnouncer.useAriaAnnouncer();
    const mounted = React.useRef(false);
    React.useEffect(() => {
      if (mounted.current) {
        announce(`Page ${pageState}`);
      } else {
        mounted.current = true;
      }
    }, [announce, pageState]);
    if (count < 2) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntime.jsx(Provider, { value: contextValue, children: /* @__PURE__ */ jsxRuntime.jsx(
      "nav",
      {
        className: clsx.clsx(withBaseName(), className),
        ref,
        ...restProps,
        children
      }
    ) });
  }
);

exports.Pagination = Pagination;
//# sourceMappingURL=Pagination.js.map
