'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var mergeProps = require('../utils/mergeProps.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var getRefFromChildren = require('../utils/getRefFromChildren.js');
var MenuContext = require('./MenuContext.js');
var MenuPanelContext = require('./MenuPanelContext.js');
var MenuTriggerContext = require('./MenuTriggerContext.js');

function MenuTrigger(props) {
  const { children } = props;
  const { getReferenceProps, refs, setFocusInside, focusInside, openState } = MenuContext.useMenuContext();
  const { setFocusInside: setFocusInsideParent } = MenuPanelContext.useMenuPanelContext();
  const handleRef = useForkRef.useForkRef(
    getRefFromChildren.getRefFromChildren(children),
    refs == null ? void 0 : refs.setReference
  );
  if (!children || !React.isValidElement(children)) {
    return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children });
  }
  return /* @__PURE__ */ jsxRuntime.jsx(
    MenuTriggerContext.MenuTriggerContext.Provider,
    {
      value: { triggersSubmenu: true, blurActive: focusInside && openState },
      children: React.cloneElement(children, {
        ...mergeProps.mergeProps(
          getReferenceProps({
            onFocus() {
              setFocusInsideParent(true);
              setFocusInside(false);
            }
          }),
          children.props
        ),
        ref: handleRef
      })
    }
  );
}

exports.MenuTrigger = MenuTrigger;
//# sourceMappingURL=MenuTrigger.js.map
