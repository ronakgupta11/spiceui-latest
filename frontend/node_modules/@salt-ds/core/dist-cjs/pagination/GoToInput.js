'use strict';

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var FormField = require('../form-field/FormField.js');
require('../form-field-context/FormFieldContext.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var FormFieldLabel = require('../form-field/FormFieldLabel.js');
var Input = require('../input/Input.js');
var usePaginationContext = require('./usePaginationContext.js');
var GoToInput$1 = require('./GoToInput.css.js');

const withBaseName = makePrefixer.makePrefixer("saltGoToInput");
const GoToInput = React.forwardRef(
  function GoToInput2({
    className,
    inputRef,
    inputVariant = "primary",
    label = "Go to",
    ...restProps
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-go-to-input",
      css: GoToInput$1,
      window: targetWindow
    });
    const { count, onPageChange } = usePaginationContext.usePaginationContext();
    const [inputValue, setInputValue] = React.useState("");
    const onChange = (event) => {
      setInputValue(event.target.value);
    };
    const onKeyDown = (event) => {
      if (event.key === "Enter") {
        const pageValue = Number(inputValue);
        if (!inputValue.startsWith("0") && !Number.isNaN(pageValue) && pageValue > 0 && pageValue <= count) {
          onPageChange(event, pageValue);
        }
        setInputValue("");
      }
    };
    const onBlur = () => {
      setInputValue("");
    };
    const widthCh = `${`${count}`.length}ch`;
    return /* @__PURE__ */ jsxRuntime.jsxs(
      FormField.FormField,
      {
        labelPlacement: "left",
        className: clsx.clsx(withBaseName(), className),
        ref,
        ...restProps,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(FormFieldLabel.FormFieldLabel, { children: label }),
          /* @__PURE__ */ jsxRuntime.jsx(
            Input.Input,
            {
              className: clsx.clsx(withBaseName("input"), {
                [withBaseName("inputDefaultSize")]: count < 100
              }),
              ref: inputRef,
              inputProps: {
                style: { width: widthCh }
              },
              onBlur,
              onChange,
              onKeyDown,
              value: inputValue,
              textAlign: "center",
              variant: inputVariant
            }
          )
        ]
      }
    );
  }
);

exports.GoToInput = GoToInput;
//# sourceMappingURL=GoToInput.js.map
