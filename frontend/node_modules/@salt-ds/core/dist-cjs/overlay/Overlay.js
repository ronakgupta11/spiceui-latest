'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('@floating-ui/react');
var React = require('react');
require('clsx');
var useControlled = require('../utils/useControlled.js');
var useFloatingUI = require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var OverlayContext = require('./OverlayContext.js');

const Overlay = ({
  children,
  open,
  onOpenChange,
  placement: placementProp = "top"
}) => {
  const arrowRef = React.useRef(null);
  const [openState, setOpenState] = useControlled.useControlled({
    controlled: open,
    default: false,
    name: "Overlay",
    state: "open"
  });
  const handleOpenChange = (newOpen) => {
    setOpenState(newOpen);
    onOpenChange == null ? void 0 : onOpenChange(newOpen);
  };
  const { x, y, strategy, context, elements, floating, reference } = useFloatingUI.useFloatingUI({
    open: openState,
    onOpenChange: handleOpenChange,
    placement: placementProp,
    middleware: [
      react.offset(11),
      react.flip(),
      react.shift({ limiter: react.limitShift() }),
      react.arrow({ element: arrowRef })
    ]
  });
  const { getReferenceProps, getFloatingProps } = react.useInteractions([
    react.useRole(context, { role: "dialog" }),
    react.useClick(context),
    react.useDismiss(context)
  ]);
  const floatingStyles = React.useMemo(() => {
    var _a, _b;
    return {
      top: y ?? 0,
      left: x ?? 0,
      position: strategy,
      width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
      height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight
    };
  }, [elements.floating, strategy, x, y]);
  const arrowProps = {
    ref: arrowRef,
    context
  };
  return /* @__PURE__ */ jsxRuntime.jsx(
    OverlayContext.OverlayContext.Provider,
    {
      value: {
        openState,
        floatingStyles,
        context,
        arrowProps,
        floating,
        reference,
        getFloatingProps,
        getReferenceProps
      },
      children
    }
  );
};

exports.Overlay = Overlay;
//# sourceMappingURL=Overlay.js.map
