'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var SemanticIconProvider = require('../../semantic-icon-provider/SemanticIconProvider.js');
var makePrefixer = require('../../utils/makePrefixer.js');
require('../../utils/useFloatingUI/useFloatingUI.js');
require('../../utils/useId.js');
require('../../salt-provider/SaltProvider.js');
require('../../viewport/ViewportProvider.js');
var StepIcon$1 = require('./StepIcon.css.js');

const withBaseName = makePrefixer.makePrefixer("saltStepIcon");
function StepIcon({
  status,
  stage,
  size,
  sizeMultiplier = size || 1.5,
  className,
  ...props
}) {
  const targetWindow = window.useWindow();
  const IconComponent = useStepIcon({ stage, status });
  styles.useComponentCssInjection({
    testId: "salt-step-icon",
    css: StepIcon$1,
    window: targetWindow
  });
  return /* @__PURE__ */ jsxRuntime.jsx(
    IconComponent,
    {
      size: sizeMultiplier,
      className: clsx(withBaseName(), className),
      ...props
    }
  );
}
function useStepIcon({
  stage,
  status
}) {
  const icons = SemanticIconProvider.useIcon();
  const stateToIcon = React.useMemo(
    () => ({
      error: icons.ErrorIcon,
      warning: icons.WarningIcon,
      active: icons.ActiveIcon,
      completed: icons.CompletedIcon,
      pending: icons.PendingIcon,
      inprogress: icons.InProgressIcon,
      locked: icons.LockedIcon
    }),
    [icons]
  );
  return stateToIcon[status || stage];
}

exports.StepIcon = StepIcon;
//# sourceMappingURL=StepIcon.js.map
