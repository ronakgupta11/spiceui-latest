{
  "component_name": "Dialog",
  "metadata": {
    "component_name": "Dialog",
    "description": "`Dialog` is a window that opens over the application content, focusing the user’s attention on a particular task or piece of information. It can communicate new information, errors, warnings, or successful completion of a process or task.",
    "props": {
      "open": {
        "type": "boolean",
        "required": false,
        "description": "Display or hide the component."
      },
      "onOpenChange": {
        "type": "(open: boolean) => void",
        "required": false,
        "description": "Callback function triggered when open state changes."
      },
      "status": {
        "type": "enum",
        "required": false,
        "description": "The status of the Dialog"
      },
      "initialFocus": {
        "type": "number | MutableRefObject<HTMLElement>",
        "required": false,
        "description": "Which element to initially focus. Can be either a number (tabbable index as specified by the order) or a ref.\nDefault value is 0 (first tabbable element)."
      },
      "size": {
        "type": "enum",
        "required": false,
        "description": "Size of the Dialog"
      },
      "disableDismiss": {
        "type": "boolean",
        "required": false,
        "description": "Prevent the dialog closing on click away"
      },
      "disableScrim": {
        "type": "boolean",
        "required": false,
        "description": "Prevent Scrim from rendering"
      },
      "idProp": {
        "type": "string",
        "required": false,
        "description": "Optional id prop\nUsed for accessibility purposes to announce the title and subtitle when using a screen reader"
      }
    },
    "examples": [
      {
        "name": "CloseButton",
        "description": "",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogCloseButton,\n  DialogContent,\n  DialogHeader,\n  H3,\n  StackLayout,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const CloseButton = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open dialog with close button</Button>\n      <Dialog open={open} onOpenChange={onOpenChange} id={id}>\n        <DialogHeader header=\"Terms and conditions\" />\n        <DialogContent style={{ maxHeight: 250 }}>\n          <StackLayout>\n            <div>\n              When you add a Chase Card to a Wallet, you agree to these Terms:\n            </div>\n            <H3>Adding Your Chase Card</H3>\n            <div>\n              You can add an eligible Chase Card to a Wallet by either following\n              our instructions as they appear on a Chase proprietary platform\n              (e.g., Chase Mobile® app or chase.com) or by following the\n              instructions of the Wallet provider. Only Chase Cards that we\n              determine are eligible can be added to the Wallet.\n            </div>\n            <div>\n              If your Chase Card or underlying account is not in good standing,\n              that Chase Card will not be eligible to be added to or enrolled in\n              the Wallet. We may determine other eligibility criteria in our\n              sole discretion.\n            </div>\n            When you add a Chase Card to a Wallet, the Wallet may allow you to\n            (a) use the Chase Card to (i) enable transfers of money between you\n            and others who are enrolled with the Wallet provider or a partner of\n            such Wallet provider, and/or (ii) enter into transactions where the\n            Wallet is accepted, including the ability to use the Chase Card to\n            complete transactions at participating merchants' physical\n            locations, e-commerce locations, and at ATMs; and (b) use other\n            services that are described in the Wallet provider's agreement or\n            that they may offer from time to time. The Wallet may not be\n            accepted at all places where your Chase Card is accepted.\n            <div>\n              We reserve the right to terminate our participation in a Wallet or\n              with a Wallet provider at any time and the right to designate a\n              maximum number of Chase Cards that may be added to a Wallet.\n            </div>\n          </StackLayout>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            appearance=\"bordered\"\n            onClick={handleClose}\n            style={{ marginRight: \"auto\" }}\n          >\n            My privacy settings\n          </Button>\n          <Button\n            sentiment=\"accented\"\n            appearance=\"bordered\"\n            onClick={handleClose}\n          >\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Accept\n          </Button>\n        </DialogActions>\n        <DialogCloseButton onClick={handleClose} />\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "Default",
        "description": "The dialog displays with a header, content area, and action bar. The component is modal, meaning it prevents interaction with the rest of the UI while open and must be addressed by clicking one of the action buttons or dismissing with the close button in `DialogHeader`. If the content of the dialog extends beyond the end of the screen, the `DialogContent` area will become scrollable.",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  H3,\n  StackLayout,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const Default = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button data-testid=\"dialog-button\" onClick={handleRequestOpen}>\n        Open default dialog\n      </Button>\n      <Dialog open={open} onOpenChange={onOpenChange} id={id}>\n        <DialogHeader header=\"Terms and conditions\" />\n        <DialogContent style={{ maxHeight: 250 }}>\n          <StackLayout>\n            <div>\n              When you add a Chase Card to a Wallet, you agree to these Terms:\n            </div>\n            <H3>Adding Your Chase Card</H3>\n            <div>\n              You can add an eligible Chase Card to a Wallet by either following\n              our instructions as they appear on a Chase proprietary platform\n              (e.g., Chase Mobile® app or chase.com) or by following the\n              instructions of the Wallet provider. Only Chase Cards that we\n              determine are eligible can be added to the Wallet.\n            </div>\n            <div>\n              If your Chase Card or underlying account is not in good standing,\n              that Chase Card will not be eligible to be added to or enrolled in\n              the Wallet. We may determine other eligibility criteria in our\n              sole discretion.\n            </div>\n            When you add a Chase Card to a Wallet, the Wallet may allow you to\n            (a) use the Chase Card to (i) enable transfers of money between you\n            and others who are enrolled with the Wallet provider or a partner of\n            such Wallet provider, and/or (ii) enter into transactions where the\n            Wallet is accepted, including the ability to use the Chase Card to\n            complete transactions at participating merchants' physical\n            locations, e-commerce locations, and at ATMs; and (b) use other\n            services that are described in the Wallet provider's agreement or\n            that they may offer from time to time. The Wallet may not be\n            accepted at all places where your Chase Card is accepted.\n            <div>\n              We reserve the right to terminate our participation in a Wallet or\n              with a Wallet provider at any time and the right to designate a\n              maximum number of Chase Cards that may be added to a Wallet.\n            </div>\n          </StackLayout>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            appearance=\"bordered\"\n            onClick={handleClose}\n            style={{ marginRight: \"auto\" }}\n          >\n            My privacy settings\n          </Button>\n          <Button\n            sentiment=\"accented\"\n            appearance=\"bordered\"\n            onClick={handleClose}\n          >\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Accept\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "DisableScrim",
        "description": "",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  H3,\n  StackLayout,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const DisableScrim = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open dialog without Scrim</Button>\n      <Dialog open={open} onOpenChange={onOpenChange} disableScrim id={id}>\n        <DialogHeader header=\"Terms and conditions\" disableAccent />\n        <DialogContent style={{ maxHeight: 250 }}>\n          <StackLayout>\n            <div>\n              When you add a Chase Card to a Wallet, you agree to these Terms:\n            </div>\n            <H3>Adding Your Chase Card</H3>\n            <div>\n              You can add an eligible Chase Card to a Wallet by either following\n              our instructions as they appear on a Chase proprietary platform\n              (e.g., Chase Mobile® app or chase.com) or by following the\n              instructions of the Wallet provider. Only Chase Cards that we\n              determine are eligible can be added to the Wallet.\n            </div>\n            <div>\n              If your Chase Card or underlying account is not in good standing,\n              that Chase Card will not be eligible to be added to or enrolled in\n              the Wallet. We may determine other eligibility criteria in our\n              sole discretion.\n            </div>\n            When you add a Chase Card to a Wallet, the Wallet may allow you to\n            (a) use the Chase Card to (i) enable transfers of money between you\n            and others who are enrolled with the Wallet provider or a partner of\n            such Wallet provider, and/or (ii) enter into transactions where the\n            Wallet is accepted, including the ability to use the Chase Card to\n            complete transactions at participating merchants' physical\n            locations, e-commerce locations, and at ATMs; and (b) use other\n            services that are described in the Wallet provider's agreement or\n            that they may offer from time to time. The Wallet may not be\n            accepted at all places where your Chase Card is accepted.\n            <div>\n              We reserve the right to terminate our participation in a Wallet or\n              with a Wallet provider at any time and the right to designate a\n              maximum number of Chase Cards that may be added to a Wallet.\n            </div>\n          </StackLayout>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            appearance=\"bordered\"\n            onClick={handleClose}\n            style={{ marginRight: \"auto\" }}\n          >\n            My privacy settings\n          </Button>\n          <Button\n            sentiment=\"accented\"\n            appearance=\"bordered\"\n            onClick={handleClose}\n          >\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Accept\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "Error",
        "description": "Use the error status to communicate a critical issue that prevents the user from continuing or completing it.\n\nAn error icon displays alongside a header and supporting message.\n\nDon’t use the error dialog when the issue does not prevent the user from completing their task. Instead, use the warning dialog.",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const Error = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open error dialog</Button>\n      <Dialog\n        open={open}\n        onOpenChange={onOpenChange}\n        role=\"alertdialog\"\n        status=\"error\"\n        size=\"small\"\n        id={id}\n      >\n        <DialogHeader header=\"Can`t move file\" />\n        <DialogContent>\n          You don’t have permission to move or delete this file.\n        </DialogContent>\n        <DialogActions>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "Info",
        "description": "Use the info status when you need to display general information.\n\nAn info icon displays alongside a header and supporting message.\n\nDon’t use the info dialog when the information concerns an issue. Instead, use the error or warning dialog.\n\nDon’t use the info dialog when the information concerns a successful action. Instead, use the success dialog.",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const Info = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open info dialog</Button>\n      <Dialog\n        open={open}\n        onOpenChange={onOpenChange}\n        status=\"info\"\n        size=\"small\"\n        id={id}\n      >\n        <DialogHeader header=\"File update\" />\n        <DialogContent>\n          A new version of this file is available with 26 updates.\n        </DialogContent>\n        <DialogActions>\n          <Button appearance=\"bordered\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            See updates\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "MandatoryAction",
        "description": "",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const MandatoryAction = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open Mandatory Action Dialog</Button>\n      <Dialog\n        open={open}\n        onOpenChange={onOpenChange}\n        disableDismiss\n        size=\"small\"\n        status=\"error\"\n        id={id}\n      >\n        <DialogHeader header=\"Delete Transaction\" />\n        <DialogContent>\n          Are you sure you want to permenantly delete transaction?\n        </DialogContent>\n        <DialogActions>\n          <Button appearance=\"bordered\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "Preheader",
        "description": "You can use the optional `preheader` prop to render a preheader above the main header of your dialog",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  FormField,\n  FormFieldLabel,\n  Input,\n  useId,\n} from \"@salt-ds/core\";\nimport { CloseIcon } from \"@salt-ds/icons\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const Preheader = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const closeButton = (\n    <Button\n      aria-label=\"Close dialog\"\n      appearance=\"transparent\"\n      onClick={handleClose}\n    >\n      <CloseIcon aria-hidden />\n    </Button>\n  );\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open dialog with preheader</Button>\n      <Dialog open={open} onOpenChange={onOpenChange} size=\"small\" id={id}>\n        <DialogHeader\n          header=\"Subscribe\"\n          preheader=\"Recieve emails about the latest updates\"\n          actions={closeButton}\n        />\n        <DialogContent>\n          <FormField necessity=\"asterisk\">\n            <FormFieldLabel> Email </FormFieldLabel>\n            <Input defaultValue=\"Email Address\" />\n          </FormField>\n        </DialogContent>\n        <DialogActions>\n          <Button appearance=\"bordered\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Subscribe\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "Sizes",
        "description": "`Dialog` has 3 sizes: `small`, `medium` and `large`. The size you should choose depends on the amount of content you have. The widths of all three dialog sizes are responsive to the Salt breakpoints. This ensures the dialog remains entirely visible in the viewport and its size is optimized for the viewport size (e.g., dialogs appear larger within smaller viewports for ease of visibility).\n\nChoose the appropriate dialog size for the scenario.\n\n#",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  H2,\n  NavigationItem,\n  ParentChildLayout,\n  SplitLayout,\n  StackLayout,\n  Step,\n  Stepper,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nconst SmallDialog = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open Small Dialog</Button>\n      <Dialog\n        open={open}\n        onOpenChange={onOpenChange}\n        size=\"small\"\n        status=\"warning\"\n        id={id}\n      >\n        <DialogHeader disableAccent header=\"Reset grid settings?\" />\n        <DialogContent>\n          Are you sure you want to reset all grid data? Any previous settings\n          will not be saved\n        </DialogContent>\n        <DialogActions>\n          <Button appearance=\"bordered\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Accept\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nconst AccountView = () => {\n  return <>Account View</>;\n};\n\nconst GenralView = () => {\n  return <>General View</>;\n};\n\nconst GridView = () => {\n  return <>Grid View</>;\n};\n\nconst ExportView = () => {\n  return <>Export View</>;\n};\n\nconst items = [\n  { label: \"Account\", view: AccountView },\n  { label: \"General\", view: GenralView },\n  { label: \"Grid\", view: GridView },\n  { label: \"Export\", view: ExportView },\n];\n\nconst MediumDialog = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const [active, setActive] = useState(items[0]);\n\n  const parent = (\n    <nav\n      style={{\n        borderRight:\n          \"var(--salt-container-borderStyle) var(--salt-separable-tertiary-borderColor) var(--salt-size-border)\",\n      }}\n    >\n      <StackLayout\n        as=\"ul\"\n        gap={1}\n        style={{\n          listStyle: \"none\",\n        }}\n      >\n        {items.map((item) => (\n          <li key={item.label}>\n            <NavigationItem\n              active={active === item}\n              href=\"#\"\n              orientation=\"vertical\"\n              onClick={(event) => {\n                event.preventDefault();\n                setActive(item);\n              }}\n            >\n              {item.label}\n            </NavigationItem>\n          </li>\n        ))}\n      </StackLayout>\n    </nav>\n  );\n\n  const child = (\n    <StackLayout\n      direction=\"column\"\n      style={{ paddingLeft: \"var(--salt-spacing-200)\" }}\n    >\n      <H2>{active.label}</H2>\n      {active.view?.()}\n    </StackLayout>\n  );\n\n  return (\n    <>\n      <Button data-testid=\"dialog-button\" onClick={handleRequestOpen}>\n        Open Medium Dialog\n      </Button>\n      <Dialog\n        open={open}\n        onOpenChange={onOpenChange}\n        size=\"medium\"\n        aria-labelledby=\"preferences-dialog\"\n      >\n        <DialogHeader header=\"Preferences\" disableAccent />\n        <DialogContent>\n          <StackLayout direction=\"row\">\n            <ParentChildLayout parent={parent} child={child} />\n          </StackLayout>\n        </DialogContent>\n        <DialogActions>\n          <Button appearance=\"bordered\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nconst LargeDialog = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button data-testid=\"dialog-button\" onClick={handleRequestOpen}>\n        Open Large Dialog\n      </Button>\n      <Dialog\n        open={open}\n        onOpenChange={onOpenChange}\n        size=\"large\"\n        aria-labelledby=\"wizard-dialog\"\n      >\n        <SplitLayout\n          align=\"center\"\n          startItem={\n            <DialogHeader\n              header=\"Add a Beneficiary\"\n              preheader=\"Customize your Experience\"\n            />\n          }\n          endItem={\n            <Stepper style={{ width: \"400px\" }}>\n              <Step label=\"Beneficiary\" stage=\"active\" />\n              <Step label=\"Amount\" />\n              <Step label=\"Account\" />\n              <Step label=\"Delivery\" />\n            </Stepper>\n          }\n        />\n\n        <DialogContent\n          style={{\n            height: \"548px\",\n            border:\n              \"var(--salt-container-borderStyle) var(--salt-separable-tertiary-borderColor) var(--salt-size-border)\",\n            padding: \"var(--salt-spacing-100)\",\n          }}\n        >\n          Wizard Content Area\n        </DialogContent>\n        <DialogActions>\n          <Button\n            appearance=\"bordered\"\n            onClick={handleClose}\n            style={{ marginRight: \"auto\" }}\n          >\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Next\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport const Sizes = (): ReactElement => {\n  return (\n    <>\n      <SmallDialog />\n      <MediumDialog />\n      <LargeDialog />\n    </>\n  );\n};\n"
      },
      {
        "name": "Success",
        "description": "Use the success status to confirm that a user's action has been completed successfully.\n\nA success icon displays alongside a header and supporting message.",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const Success = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open success dialog</Button>\n      <Dialog\n        open={open}\n        onOpenChange={onOpenChange}\n        status=\"success\"\n        size=\"small\"\n        id={id}\n      >\n        <DialogHeader header=\"File uploaded\" />\n        <DialogContent>\n          File has been successfully uploaded to the shared drive.\n        </DialogContent>\n        <DialogActions>\n          <Button appearance=\"bordered\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Go to file\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "Warning",
        "description": "Use the warning status to inform users of an issue or potential issue related to their current task. Use this for issues that does not prevent the user from continuing or completing their task.\n\nA warning icon displays alongside a header and supporting message.\n\nDon’t use the warning dialog when the issue prevents the user from completing their task. Instead, use the error dialog.",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const Warning = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open warning dialog</Button>\n      <Dialog\n        open={open}\n        onOpenChange={onOpenChange}\n        status=\"warning\"\n        size=\"small\"\n        id={id}\n      >\n        <DialogHeader header=\"File access\" />\n\n        <DialogContent>\n          Users will be able to make edits and modify Trades 2023 file. Give\n          access anyway?\n        </DialogContent>\n        <DialogActions>\n          <Button appearance=\"bordered\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Give access\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "WithHeader",
        "description": "",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  H3,\n  StackLayout,\n  useId,\n} from \"@salt-ds/core\";\nimport { CloseIcon } from \"@salt-ds/icons\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const WithHeader = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const closeButton = (\n    <Button\n      aria-label=\"Close dialog\"\n      appearance=\"transparent\"\n      onClick={handleClose}\n    >\n      <CloseIcon aria-hidden />\n    </Button>\n  );\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open dialog with header</Button>\n      <Dialog open={open} onOpenChange={onOpenChange} id={id}>\n        <DialogHeader header=\"Terms and conditions\" actions={closeButton} />\n        <DialogContent style={{ maxHeight: 250 }}>\n          <StackLayout>\n            <div>\n              When you add a Chase Card to a Wallet, you agree to these Terms:\n            </div>\n            <H3>Adding Your Chase Card</H3>\n            <div>\n              You can add an eligible Chase Card to a Wallet by either following\n              our instructions as they appear on a Chase proprietary platform\n              (e.g., Chase Mobile® app or chase.com) or by following the\n              instructions of the Wallet provider. Only Chase Cards that we\n              determine are eligible can be added to the Wallet.\n            </div>\n            <div>\n              If your Chase Card or underlying account is not in good standing,\n              that Chase Card will not be eligible to be added to or enrolled in\n              the Wallet. We may determine other eligibility criteria in our\n              sole discretion.\n            </div>\n            When you add a Chase Card to a Wallet, the Wallet may allow you to\n            (a) use the Chase Card to (i) enable transfers of money between you\n            and others who are enrolled with the Wallet provider or a partner of\n            such Wallet provider, and/or (ii) enter into transactions where the\n            Wallet is accepted, including the ability to use the Chase Card to\n            complete transactions at participating merchants' physical\n            locations, e-commerce locations, and at ATMs; and (b) use other\n            services that are described in the Wallet provider's agreement or\n            that they may offer from time to time. The Wallet may not be\n            accepted at all places where your Chase Card is accepted.\n            <div>\n              We reserve the right to terminate our participation in a Wallet or\n              with a Wallet provider at any time and the right to designate a\n              maximum number of Chase Cards that may be added to a Wallet.\n            </div>\n          </StackLayout>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            appearance=\"bordered\"\n            onClick={handleClose}\n            style={{ marginRight: \"auto\" }}\n          >\n            My privacy settings\n          </Button>\n          <Button\n            sentiment=\"accented\"\n            appearance=\"bordered\"\n            onClick={handleClose}\n          >\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Accept\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      },
      {
        "name": "WithoutAccent",
        "description": "",
        "code": "import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogHeader,\n  H3,\n  StackLayout,\n  useId,\n} from \"@salt-ds/core\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const WithoutAccent = (): ReactElement => {\n  const [open, setOpen] = useState(false);\n  const id = useId();\n\n  const handleRequestOpen = () => {\n    setOpen(true);\n  };\n\n  const onOpenChange = (value: boolean) => {\n    setOpen(value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button onClick={handleRequestOpen}>Open dialog without accent</Button>\n      <Dialog open={open} onOpenChange={onOpenChange} id={id}>\n        <DialogHeader header=\"Terms and conditions\" disableAccent />\n        <DialogContent style={{ maxHeight: 250 }}>\n          <StackLayout>\n            <div>\n              When you add a Chase Card to a Wallet, you agree to these Terms:\n            </div>\n            <H3>Adding Your Chase Card</H3>\n            <div>\n              You can add an eligible Chase Card to a Wallet by either following\n              our instructions as they appear on a Chase proprietary platform\n              (e.g., Chase Mobile® app or chase.com) or by following the\n              instructions of the Wallet provider. Only Chase Cards that we\n              determine are eligible can be added to the Wallet.\n            </div>\n            <div>\n              If your Chase Card or underlying account is not in good standing,\n              that Chase Card will not be eligible to be added to or enrolled in\n              the Wallet. We may determine other eligibility criteria in our\n              sole discretion.\n            </div>\n            When you add a Chase Card to a Wallet, the Wallet may allow you to\n            (a) use the Chase Card to (i) enable transfers of money between you\n            and others who are enrolled with the Wallet provider or a partner of\n            such Wallet provider, and/or (ii) enter into transactions where the\n            Wallet is accepted, including the ability to use the Chase Card to\n            complete transactions at participating merchants' physical\n            locations, e-commerce locations, and at ATMs; and (b) use other\n            services that are described in the Wallet provider's agreement or\n            that they may offer from time to time. The Wallet may not be\n            accepted at all places where your Chase Card is accepted.\n            <div>\n              We reserve the right to terminate our participation in a Wallet or\n              with a Wallet provider at any time and the right to designate a\n              maximum number of Chase Cards that may be added to a Wallet.\n            </div>\n          </StackLayout>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            appearance=\"bordered\"\n            onClick={handleClose}\n            style={{ marginRight: \"auto\" }}\n          >\n            My privacy settings\n          </Button>\n          <Button\n            sentiment=\"accented\"\n            appearance=\"bordered\"\n            onClick={handleClose}\n          >\n            Cancel\n          </Button>\n          <Button sentiment=\"accented\" onClick={handleClose}>\n            Accept\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n"
      }
    ],
    "category": "@salt-ds/core",
    "tags": [
      "Modal",
      "Modal dialog",
      "Overlay",
      "Popup"
    ],
    "when_to_use": [
      "To notify the user of critical information related to their current workflow that requires immediate action.",
      "To interrupt the user's flow."
    ],
    "when_not_to_use": [
      "When you don't need to interrupt the user's flow. If the information is part of an event that’s occurred in a peripheral application or workflow, use [`Toast`](../toast) instead. If the information is related to the current workflow, use [`Banner`](../banner) instead.",
      "To launch a dialog from another dialog. Users may struggle to dismiss the two dialogs and may not understand which dialog is higher priority. Consider an alternative solution, such as progressively disclosing information in the first dialog."
    ],
    "import_statement": "",
    "source_code_url": "https://github.com/jpmorganchase/salt-ds/tree/main/packages/core/src/dialog",
    "related_components": [
      {
        "name": "Banner",
        "relationship": "similarTo"
      },
      {
        "name": "Drawer",
        "relationship": "similarTo"
      },
      {
        "name": "Toast",
        "relationship": "similarTo"
      }
    ]
  }
}