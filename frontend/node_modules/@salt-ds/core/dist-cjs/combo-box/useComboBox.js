'use strict';

var ListControlState = require('../list-control/ListControlState.js');
require('react');
require('react/jsx-runtime');
require('clsx');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');

function useComboBox(props) {
  const {
    open,
    defaultOpen,
    onOpenChange,
    multiselect,
    defaultSelected,
    selected,
    onSelectionChange,
    disabled,
    readOnly,
    valueToString,
    value,
    defaultValue
  } = props;
  const listControl = ListControlState.useListControl({
    open,
    defaultOpen,
    onOpenChange,
    multiselect,
    defaultSelected,
    selected,
    onSelectionChange,
    disabled,
    readOnly,
    valueToString
  });
  const { selectedState, getOptionsMatching, setSelectedState, setOpen } = listControl;
  const [valueState, setValueState] = useControlled.useControlled({
    controlled: value,
    default: defaultValue ?? (selectedState.length === 1 && !multiselect ? listControl.valueToString(selectedState[0]) : defaultValue),
    name: "ComboBox",
    state: "value"
  });
  const select = (event, option) => {
    if (option.disabled || disabled || readOnly) {
      return;
    }
    let newSelected = [option.value];
    if (multiselect) {
      if (selectedState.includes(option.value)) {
        newSelected = selectedState.filter((item) => item !== option.value);
      } else {
        newSelected = selectedState.concat([option.value]);
      }
    }
    setSelectedState(newSelected);
    const newValue = getOptionsMatching(
      (option2) => newSelected.includes(option2.value)
    ).map((option2) => listControl.valueToString(option2.data.value));
    setValueState(multiselect ? "" : newValue[0]);
    onSelectionChange == null ? void 0 : onSelectionChange(event, newSelected);
    if (!multiselect) {
      setOpen(false);
    }
  };
  const removePill = (event, itemToRemove) => {
    if (!multiselect || disabled || readOnly) {
      return;
    }
    let newSelected;
    if (selectedState.includes(itemToRemove)) {
      newSelected = selectedState.filter((item) => item !== itemToRemove);
    } else {
      newSelected = selectedState.concat([itemToRemove]);
    }
    setSelectedState(newSelected);
    setValueState("");
    onSelectionChange == null ? void 0 : onSelectionChange(event, newSelected);
  };
  return { ...listControl, select, valueState, setValueState, removePill };
}

exports.useComboBox = useComboBox;
//# sourceMappingURL=useComboBox.js.map
