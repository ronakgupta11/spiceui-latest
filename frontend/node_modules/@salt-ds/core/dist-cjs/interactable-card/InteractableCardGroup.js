'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var InteractableCardGroup$1 = require('./InteractableCardGroup.css.js');
var InteractableCardGroupContext = require('./InteractableCardGroupContext.js');

const withBaseName = makePrefixer.makePrefixer("saltInteractableCardGroup");
const InteractableCardGroup = React.forwardRef(function InteractableCardGroup2(props, ref) {
  const {
    children,
    className,
    value: valueProp,
    defaultValue,
    disabled,
    onChange,
    onKeyDown,
    multiSelect,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-interactable-card-group",
    css: InteractableCardGroup$1,
    window: targetWindow
  });
  const groupRef = React.useRef(null);
  const handleRef = useForkRef.useForkRef(ref, groupRef);
  const [value, setValue] = useControlled.useControlled({
    default: defaultValue,
    controlled: valueProp,
    name: "InteractableCardGroup",
    state: "value"
  });
  const [elements, setElements] = React.useState([]);
  React.useEffect(() => {
    var _a;
    const childElements = Array.from(
      ((_a = groupRef.current) == null ? void 0 : _a.querySelectorAll(
        ".saltInteractableCard:not([disabled])"
      )) ?? []
    );
    setElements(childElements);
  }, [children]);
  const select = React.useCallback(
    (event, newValue) => {
      if (multiSelect) {
        const currentValues = Array.isArray(value) ? value : [];
        const isSelected2 = currentValues.includes(newValue);
        const nextValues = isSelected2 ? currentValues.filter((val) => val !== newValue) : [...currentValues, newValue];
        setValue(nextValues);
        onChange == null ? void 0 : onChange(event, nextValues);
      } else {
        setValue(newValue);
        if (value !== newValue) {
          onChange == null ? void 0 : onChange(event, newValue);
        }
      }
    },
    [onChange, value, multiSelect]
  );
  const isSelected = React.useCallback(
    (cardValue) => multiSelect ? Array.isArray(value) && value.includes(cardValue) : cardValue !== void 0 && value === cardValue,
    [value, multiSelect]
  );
  const isFirstChild = React.useCallback(
    (cardValue) => {
      return elements.findIndex(
        (element) => element.getAttribute("data-value") === cardValue
      ) === 0;
    },
    [elements]
  );
  const contextValue = React.useMemo(
    () => ({
      select,
      isSelected,
      isFirstChild,
      disabled,
      multiSelect,
      value
    }),
    [select, isSelected, disabled, multiSelect, isFirstChild, value]
  );
  const handleKeyDown = (event) => {
    var _a, _b;
    const currentIndex = elements.findIndex(
      (element) => element === document.activeElement
    );
    const nextIndex = (currentIndex + 1) % elements.length;
    const prevIndex = (currentIndex - 1 + elements.length) % elements.length;
    if (event.key === " ") {
      event.preventDefault();
      select(
        event,
        elements[currentIndex].getAttribute(
          "data-value"
        )
      );
    }
    if (!multiSelect) {
      switch (event.key) {
        case "ArrowDown":
        case "ArrowRight":
          select(
            event,
            elements[nextIndex].getAttribute(
              "data-value"
            )
          );
          (_a = elements[nextIndex]) == null ? void 0 : _a.focus();
          break;
        case "ArrowUp":
        case "ArrowLeft":
          select(
            event,
            elements[prevIndex].getAttribute(
              "data-value"
            )
          );
          (_b = elements[prevIndex]) == null ? void 0 : _b.focus();
          break;
      }
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(InteractableCardGroupContext.InteractableCardGroupContext.Provider, { value: contextValue, children: /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      className: clsx.clsx(withBaseName(), className),
      role: multiSelect ? "group" : "radiogroup",
      onKeyDown: handleKeyDown,
      ref: handleRef,
      ...rest,
      children
    }
  ) });
});

exports.InteractableCardGroup = InteractableCardGroup;
//# sourceMappingURL=InteractableCardGroup.js.map
