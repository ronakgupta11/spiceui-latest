{"version":3,"file":"SliderTrack.js","sources":["../src/slider/internal/SliderTrack.tsx"],"sourcesContent":["import { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { clsx } from \"clsx\";\nimport { type HTMLAttributes, type RefObject, forwardRef } from \"react\";\nimport { Text } from \"../../text\";\nimport { makePrefixer } from \"../../utils\";\nimport sliderTrackCss from \"./SliderTrack.css\";\nimport { calculateMarkPosition, calculatePercentage } from \"./utils\";\n\nconst withBaseName = makePrefixer(\"saltSliderTrack\");\n\ninterface SliderTrackProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, \"onChange\" | \"defaultValue\"> {\n  children: React.ReactNode;\n  constrainLabelPosition?: boolean;\n  disabled: boolean;\n  showTicks?: boolean;\n  format?: (value: number) => string | number;\n  handlePointerDown: (event: React.PointerEvent<HTMLDivElement>) => void;\n  isDragging: boolean;\n  isRange?: boolean;\n  marks?: { label: string; value: number }[];\n  max: number;\n  maxLabel?: number | string;\n  min: number;\n  minLabel?: number | string;\n  progressPercentage?: number;\n  progressPercentageRange?: [number, number];\n  sliderRef: RefObject<HTMLDivElement>;\n}\n\nexport const SliderTrack = forwardRef<HTMLDivElement, SliderTrackProps>(\n  function SliderTrack(\n    {\n      children,\n      className,\n      constrainLabelPosition = false,\n      disabled,\n      showTicks,\n      format,\n      handlePointerDown,\n      isDragging,\n      isRange = false,\n      marks,\n      max,\n      maxLabel,\n      min,\n      minLabel,\n      progressPercentage = 0,\n      progressPercentageRange = [0, 0],\n      sliderRef,\n      ...rest\n    },\n    ref,\n  ) {\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-slider-track\",\n      css: sliderTrackCss,\n      window: targetWindow,\n    });\n\n    const checkIsMarkSelected = (value: number) => {\n      const markPercentage = calculatePercentage(value, max, min);\n      if (isRange) {\n        return (\n          markPercentage > progressPercentageRange[0] &&\n          markPercentage < progressPercentageRange[1]\n        );\n      }\n      return markPercentage < progressPercentage;\n    };\n\n    const checkIsMarkOverlapped = (value: number) => {\n      const markPercentage = calculatePercentage(value, max, min);\n      if (isRange) {\n        return (\n          markPercentage === progressPercentageRange[0] ||\n          markPercentage === progressPercentageRange[1]\n        );\n      }\n      return markPercentage === progressPercentage;\n    };\n\n    const hasMinTick = () => {\n      return marks?.some((mark) => mark.value === min) || false;\n    };\n\n    const hasMaxTick = () => {\n      return marks?.some((mark) => mark.value === max) || false;\n    };\n\n    return (\n      <div\n        className={clsx(withBaseName(), className, {\n          [withBaseName(\"disabled\")]: disabled,\n          [withBaseName(\"dragging\")]: isDragging,\n          [withBaseName(\"range\")]: isRange,\n          [withBaseName(\"withMarks\")]: marks,\n          [withBaseName(\"constrainLabelPosition\")]: constrainLabelPosition,\n          [withBaseName(\"withTicks\")]: showTicks,\n        })}\n        data-testid=\"sliderTrack\"\n        ref={ref}\n        {...rest}\n      >\n        <div className={clsx(withBaseName(\"container\"))}>\n          {minLabel && (\n            <Text\n              aria-hidden\n              className={withBaseName(\"minLabel\")}\n              color=\"secondary\"\n              disabled={disabled}\n              styleAs=\"label\"\n            >\n              {minLabel || format?.(min)}\n            </Text>\n          )}\n          {/* Slider Track */}\n          <div\n            onPointerDown={handlePointerDown}\n            className={withBaseName(\"wrapper\")}\n          >\n            <div\n              className={clsx(withBaseName(\"rail\"), {\n                [withBaseName(\"hasMinTick\")]: hasMinTick() && showTicks,\n                [withBaseName(\"hasMaxTick\")]: hasMaxTick() && showTicks,\n              })}\n              ref={sliderRef}\n              style={\n                {\n                  ...(progressPercentage !== undefined && {\n                    \"--slider-progressPercentage\": `${progressPercentage}%`,\n                  }),\n                  ...(progressPercentageRange?.[0] !== undefined && {\n                    \"--slider-progressPercentageStart\": `${progressPercentageRange[0]}%`,\n                  }),\n                  ...(progressPercentageRange?.[1] !== undefined && {\n                    \"--slider-progressPercentageEnd\": `${progressPercentageRange[1]}%`,\n                  }),\n                } as React.CSSProperties\n              }\n            >\n              {isRange && <div className={clsx(withBaseName(\"fill\"))} />}\n              {children}\n            </div>\n            {/* Ticks */}\n            {marks && showTicks && (\n              <div className={withBaseName(\"ticks\")}>\n                {marks.map(({ value }) => (\n                  <span\n                    key={`${value}-tick`}\n                    style={{\n                      left: `${calculateMarkPosition(value, max, min)}%`,\n                    }}\n                    className={clsx(\n                      withBaseName(\"tick\"),\n                      {\n                        [withBaseName(\"tickSelected\")]:\n                          checkIsMarkSelected(value),\n                      },\n                      {\n                        [withBaseName(\"tickHidden\")]:\n                          checkIsMarkOverlapped(value),\n                      },\n                    )}\n                  />\n                ))}\n              </div>\n            )}\n            {/* Marks */}\n            {marks && (\n              <div className={withBaseName(\"marks\")}>\n                {marks.map(({ label, value }) => (\n                  <span\n                    data-testid=\"mark\"\n                    key={`${value}-mark`}\n                    className={withBaseName(\"markLabel\")}\n                    style={{\n                      left: `${calculateMarkPosition(value, max, min)}%`,\n                    }}\n                  >\n                    {label}\n                  </span>\n                ))}\n              </div>\n            )}\n          </div>\n          {maxLabel && (\n            <Text\n              aria-hidden\n              className={withBaseName(\"maxLabel\")}\n              color=\"secondary\"\n              disabled={disabled}\n              styleAs=\"label\"\n            >\n              {maxLabel || format?.(max)}\n            </Text>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n"],"names":["SliderTrack","sliderTrackCss"],"mappings":"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"}