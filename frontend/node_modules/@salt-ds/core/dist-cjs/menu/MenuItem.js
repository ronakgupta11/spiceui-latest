'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('@floating-ui/react');
var styles = require('@salt-ds/styles');
var window$1 = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var SemanticIconProvider = require('../semantic-icon-provider/SemanticIconProvider.js');
var MenuItem$1 = require('./MenuItem.css.js');
var MenuPanelContext = require('./MenuPanelContext.js');
var MenuTriggerContext = require('./MenuTriggerContext.js');

const withBaseName = makePrefixer.makePrefixer("saltMenuItem");
const MenuItem = React.forwardRef(
  function MenuItem2(props, ref) {
    const {
      children,
      className,
      disabled,
      onClick,
      onFocus,
      onKeyDown,
      ...rest
    } = props;
    const { triggersSubmenu, blurActive } = MenuTriggerContext.useIsMenuTrigger();
    const { ExpandGroupIcon } = SemanticIconProvider.useIcon();
    const { activeIndex, getItemProps, setFocusInside } = MenuPanelContext.useMenuPanelContext();
    const item = react.useListItem();
    const tree = react.useFloatingTree();
    const active = item.index === activeIndex;
    const targetWindow = window$1.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-menu-item",
      css: MenuItem$1,
      window: targetWindow
    });
    const handleRef = useForkRef.useForkRef(ref, item.ref);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("blurActive")]: blurActive
          },
          className
        ),
        role: "menuitem",
        "aria-disabled": disabled || void 0,
        ...getItemProps({
          tabIndex: disabled ? void 0 : active ? 0 : -1,
          onKeyDown(event) {
            const element = event.currentTarget;
            onKeyDown == null ? void 0 : onKeyDown(event);
            if ((event.key === " " || event.key === "Enter") && !triggersSubmenu && !disabled) {
              event.preventDefault();
              const { view, ...eventInit } = event;
              queueMicrotask(() => {
                element.dispatchEvent(
                  new window.MouseEvent("click", eventInit)
                );
              });
              tree == null ? void 0 : tree.events.emit("click");
            }
          },
          onClick(event) {
            if (!disabled) {
              onClick == null ? void 0 : onClick(event);
              if (!triggersSubmenu) {
                tree == null ? void 0 : tree.events.emit("click");
              }
            }
          },
          onFocus(event) {
            onFocus == null ? void 0 : onFocus(event);
            setFocusInside(true);
          },
          ...rest
        }),
        ref: handleRef,
        children: [
          children,
          triggersSubmenu && /* @__PURE__ */ jsxRuntime.jsx(ExpandGroupIcon, { className: withBaseName("expandIcon"), "aria-hidden": true })
        ]
      }
    );
  }
);

exports.MenuItem = MenuItem;
//# sourceMappingURL=MenuItem.js.map
