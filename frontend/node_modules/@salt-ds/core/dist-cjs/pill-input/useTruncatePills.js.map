{"version":3,"file":"useTruncatePills.js","sources":["../src/pill-input/useTruncatePills.ts"],"sourcesContent":["import { useWindow } from \"@salt-ds/window\";\nimport { useCallback, useRef } from \"react\";\nimport {\n  useIsomorphicLayoutEffect,\n  useResizeObserver,\n  useValueEffect,\n} from \"../utils\";\n\nexport function useTruncatePills({\n  pills,\n  enable,\n}: {\n  pills: string[];\n  enable?: boolean;\n}) {\n  const pillListRef = useRef<HTMLDivElement>(null);\n  const [visibleCount, setVisibleItems] = useValueEffect(pills.length);\n  const targetWindow = useWindow();\n\n  const updateOverflow = useCallback(() => {\n    if (!enable) {\n      return;\n    }\n\n    const computeVisible = (visibleCount: number) => {\n      const pillList = pillListRef.current;\n\n      if (pillList && targetWindow) {\n        const pillElements = Array.from(\n          pillList.querySelectorAll('[role=\"listitem\"]'),\n        );\n        const maxWidth = pillList.getBoundingClientRect().width;\n        const listGap = Number.parseInt(\n          targetWindow.getComputedStyle(pillList).gap,\n        );\n        const isShowingOverflow = pillList.querySelector(\n          \"[data-overflowindicator]\",\n        );\n\n        let currentSize = 0;\n        let newVisibleCount = 0;\n\n        if (isShowingOverflow) {\n          const pill = pillElements.pop();\n          if (pill) {\n            const pillWidth = pill.getBoundingClientRect().width;\n            currentSize += pillWidth + listGap;\n          }\n        }\n\n        for (const pill of pillElements) {\n          const pillWidth = pill.getBoundingClientRect().width;\n          currentSize += pillWidth + listGap;\n\n          if (Math.round(currentSize) <= Math.round(maxWidth)) {\n            newVisibleCount++;\n          } else {\n            break;\n          }\n        }\n        return newVisibleCount;\n      }\n      return visibleCount;\n    };\n\n    setVisibleItems(function* () {\n      // Show all\n      yield pills.length;\n\n      // Measure the visible count\n      const newVisibleCount = computeVisible(pills.length);\n      const isMeasuring = newVisibleCount < pills.length && newVisibleCount > 0;\n      yield newVisibleCount;\n\n      // ensure the visible count is correct\n      if (isMeasuring) {\n        yield computeVisible(newVisibleCount);\n      }\n    });\n  }, [pills, setVisibleItems, enable, targetWindow]);\n\n  useIsomorphicLayoutEffect(() => {\n    updateOverflow();\n  }, [updateOverflow]);\n\n  useResizeObserver({\n    ref: pillListRef,\n    onResize: updateOverflow,\n  });\n\n  return {\n    pillListRef,\n    visibleCount,\n    visiblePills: enable ? pills.slice(0, visibleCount) : pills,\n  };\n}\n"],"names":["useRef","useValueEffect","useWindow","useCallback","visibleCount","useIsomorphicLayoutEffect","useResizeObserver"],"mappings":";;;;;;;;;;;;;;AAQO,SAAS,gBAAiB,CAAA;AAAA,EAC/B,KAAA;AAAA,EACA;AACF,CAGG,EAAA;AACD,EAAM,MAAA,WAAA,GAAcA,aAAuB,IAAI,CAAA;AAC/C,EAAA,MAAM,CAAC,YAAc,EAAA,eAAe,CAAI,GAAAC,6BAAA,CAAe,MAAM,MAAM,CAAA;AACnE,EAAA,MAAM,eAAeC,gBAAU,EAAA;AAE/B,EAAM,MAAA,cAAA,GAAiBC,kBAAY,MAAM;AACvC,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAA;AAAA;AAGF,IAAM,MAAA,cAAA,GAAiB,CAACC,aAAyB,KAAA;AAC/C,MAAA,MAAM,WAAW,WAAY,CAAA,OAAA;AAE7B,MAAA,IAAI,YAAY,YAAc,EAAA;AAC5B,QAAA,MAAM,eAAe,KAAM,CAAA,IAAA;AAAA,UACzB,QAAA,CAAS,iBAAiB,mBAAmB;AAAA,SAC/C;AACA,QAAM,MAAA,QAAA,GAAW,QAAS,CAAA,qBAAA,EAAwB,CAAA,KAAA;AAClD,QAAA,MAAM,UAAU,MAAO,CAAA,QAAA;AAAA,UACrB,YAAA,CAAa,gBAAiB,CAAA,QAAQ,CAAE,CAAA;AAAA,SAC1C;AACA,QAAA,MAAM,oBAAoB,QAAS,CAAA,aAAA;AAAA,UACjC;AAAA,SACF;AAEA,QAAA,IAAI,WAAc,GAAA,CAAA;AAClB,QAAA,IAAI,eAAkB,GAAA,CAAA;AAEtB,QAAA,IAAI,iBAAmB,EAAA;AACrB,UAAM,MAAA,IAAA,GAAO,aAAa,GAAI,EAAA;AAC9B,UAAA,IAAI,IAAM,EAAA;AACR,YAAM,MAAA,SAAA,GAAY,IAAK,CAAA,qBAAA,EAAwB,CAAA,KAAA;AAC/C,YAAA,WAAA,IAAe,SAAY,GAAA,OAAA;AAAA;AAC7B;AAGF,QAAA,KAAA,MAAW,QAAQ,YAAc,EAAA;AAC/B,UAAM,MAAA,SAAA,GAAY,IAAK,CAAA,qBAAA,EAAwB,CAAA,KAAA;AAC/C,UAAA,WAAA,IAAe,SAAY,GAAA,OAAA;AAE3B,UAAA,IAAI,KAAK,KAAM,CAAA,WAAW,KAAK,IAAK,CAAA,KAAA,CAAM,QAAQ,CAAG,EAAA;AACnD,YAAA,eAAA,EAAA;AAAA,WACK,MAAA;AACL,YAAA;AAAA;AACF;AAEF,QAAO,OAAA,eAAA;AAAA;AAET,MAAOA,OAAAA,aAAAA;AAAA,KACT;AAEA,IAAA,eAAA,CAAgB,aAAa;AAE3B,MAAA,MAAM,KAAM,CAAA,MAAA;AAGZ,MAAM,MAAA,eAAA,GAAkB,cAAe,CAAA,KAAA,CAAM,MAAM,CAAA;AACnD,MAAA,MAAM,WAAc,GAAA,eAAA,GAAkB,KAAM,CAAA,MAAA,IAAU,eAAkB,GAAA,CAAA;AACxE,MAAM,MAAA,eAAA;AAGN,MAAA,IAAI,WAAa,EAAA;AACf,QAAA,MAAM,eAAe,eAAe,CAAA;AAAA;AACtC,KACD,CAAA;AAAA,KACA,CAAC,KAAA,EAAO,eAAiB,EAAA,MAAA,EAAQ,YAAY,CAAC,CAAA;AAEjD,EAAAC,mDAAA,CAA0B,MAAM;AAC9B,IAAe,cAAA,EAAA;AAAA,GACjB,EAAG,CAAC,cAAc,CAAC,CAAA;AAEnB,EAAkBC,mCAAA,CAAA;AAAA,IAChB,GAAK,EAAA,WAAA;AAAA,IACL,QAAU,EAAA;AAAA,GACX,CAAA;AAED,EAAO,OAAA;AAAA,IACL,WAAA;AAAA,IACA,YAAA;AAAA,IACA,cAAc,MAAS,GAAA,KAAA,CAAM,KAAM,CAAA,CAAA,EAAG,YAAY,CAAI,GAAA;AAAA,GACxD;AACF;;;;"}