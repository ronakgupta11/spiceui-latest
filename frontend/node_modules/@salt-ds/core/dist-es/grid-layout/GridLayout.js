import { jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { resolveResponsiveValue } from '../utils/useResponsiveProp.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { useBreakpoint } from '../breakpoints/BreakpointProvider.js';
import { parseSpacing } from '../flex-layout/parseSpacing.js';
import css_248z from './GridLayout.css.js';

const withBaseName = makePrefixer("saltGridLayout");
function parseGridValue(value) {
  if (value === void 0 || typeof value === "string") {
    return value;
  }
  return `repeat(${value}, 1fr)`;
}
const GridLayout = forwardRef(
  ({
    as,
    children,
    className,
    columns = 12,
    rows = 1,
    gap = 3,
    margin = 0,
    padding = 0,
    columnGap,
    rowGap,
    style,
    ...rest
  }, ref) => {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-grid-layout",
      css: css_248z,
      window: targetWindow
    });
    const Component = as || "div";
    const { matchedBreakpoints } = useBreakpoint();
    const gridColumns = resolveResponsiveValue(columns, matchedBreakpoints);
    const gridRows = resolveResponsiveValue(rows, matchedBreakpoints);
    const gridGap = resolveResponsiveValue(gap, matchedBreakpoints);
    const gridColumnGap = resolveResponsiveValue(columnGap, matchedBreakpoints);
    const gridRowGap = resolveResponsiveValue(rowGap, matchedBreakpoints);
    const gridMargin = resolveResponsiveValue(margin, matchedBreakpoints);
    const gridPadding = resolveResponsiveValue(padding, matchedBreakpoints);
    const gridLayoutStyles = {
      "--gridLayout-margin": parseSpacing(gridMargin),
      "--gridLayout-padding": parseSpacing(gridPadding),
      ...style,
      "--gridLayout-columns": parseGridValue(gridColumns),
      "--gridLayout-rows": parseGridValue(gridRows),
      "--gridLayout-columnGap": parseSpacing(gridColumnGap ?? gridGap),
      "--gridLayout-rowGap": parseSpacing(gridRowGap ?? gridGap)
    };
    return /* @__PURE__ */ jsx(
      Component,
      {
        className: clsx(withBaseName(), className),
        style: gridLayoutStyles,
        ref,
        ...rest,
        children
      }
    );
  }
);

export { GridLayout };
//# sourceMappingURL=GridLayout.js.map
