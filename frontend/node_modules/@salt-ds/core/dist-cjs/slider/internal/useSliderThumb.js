'use strict';

var window = require('@salt-ds/window');
var React = require('react');
var utils = require('./utils.js');

const useSliderThumb = ({
  decimalPlaces,
  handleInputChange,
  inputRef,
  marks,
  min = 0,
  max = 10,
  step = 1,
  onChange,
  onChangeEnd,
  restrictToMarks,
  setValue,
  stepMultiplier,
  value
}) => {
  const [isDragging, setIsDragging] = React.useState(false);
  const [isFocusVisible, setIsFocusVisible] = React.useState(false);
  const lastValueRef = React.useRef(value);
  const sliderRef = React.useRef(null);
  const targetWindow = window.useWindow();
  const handlePointerMove = React.useCallback(
    (event) => {
      if (!sliderRef.current) return;
      const newValue = utils.getClickedPosition(
        sliderRef,
        event.clientX,
        max,
        min,
        step,
        decimalPlaces,
        marks,
        restrictToMarks
      );
      if (newValue === void 0 || lastValueRef.current === newValue) {
        return;
      }
      lastValueRef.current = newValue;
      setValue(newValue);
      onChange == null ? void 0 : onChange(event, newValue);
    },
    [decimalPlaces, marks, max, min, onChange, setValue, restrictToMarks, step]
  );
  const handlePointerUp = React.useCallback(
    (event) => {
      setIsDragging(false);
      setIsFocusVisible(false);
      onChangeEnd == null ? void 0 : onChangeEnd(event, lastValueRef.current);
    },
    [onChangeEnd]
  );
  React.useEffect(() => {
    if (isDragging) {
      targetWindow == null ? void 0 : targetWindow.addEventListener("pointermove", handlePointerMove);
      targetWindow == null ? void 0 : targetWindow.addEventListener("pointerup", handlePointerUp);
    } else {
      targetWindow == null ? void 0 : targetWindow.removeEventListener("pointermove", handlePointerMove);
      targetWindow == null ? void 0 : targetWindow.removeEventListener("pointerup", handlePointerUp);
    }
    return () => {
      targetWindow == null ? void 0 : targetWindow.removeEventListener("pointermove", handlePointerMove);
      targetWindow == null ? void 0 : targetWindow.removeEventListener("pointerup", handlePointerUp);
    };
  }, [handlePointerMove, handlePointerUp, isDragging, targetWindow]);
  const handlePointerDownOnThumb = React.useCallback(
    (event) => {
      event.preventDefault();
      event.stopPropagation();
      if (inputRef.current) inputRef.current.focus();
      setIsDragging(true);
      setIsFocusVisible(false);
    },
    [inputRef]
  );
  const handlePointerDownOnTrack = React.useCallback(
    (event) => {
      event.preventDefault();
      if (inputRef.current) inputRef.current.focus();
      setIsDragging(true);
      setIsFocusVisible(false);
      const newValue = utils.getClickedPosition(
        sliderRef,
        event.clientX,
        max,
        min,
        step,
        decimalPlaces,
        marks,
        restrictToMarks
      );
      if (newValue === void 0 || lastValueRef.current === newValue) {
        return;
      }
      lastValueRef.current = newValue;
      setValue(newValue);
      onChange == null ? void 0 : onChange(event.nativeEvent, newValue);
    },
    [
      decimalPlaces,
      inputRef,
      marks,
      max,
      min,
      onChange,
      restrictToMarks,
      setValue,
      step
    ]
  );
  const handleKeydownOnThumb = React.useCallback(
    (event) => {
      const newValue = utils.getKeyboardValue(
        event,
        value,
        step,
        stepMultiplier,
        max,
        min,
        restrictToMarks,
        marks
      );
      if (newValue === void 0 || lastValueRef.current === newValue) {
        return;
      }
      setIsFocusVisible(true);
      lastValueRef.current = newValue;
      handleInputChange({
        target: { value: newValue.toString() }
      });
    },
    [
      value,
      step,
      stepMultiplier,
      max,
      min,
      restrictToMarks,
      marks,
      handleInputChange
    ]
  );
  const handleFocus = () => setIsFocusVisible(true);
  const handleBlur = () => setIsFocusVisible(false);
  return {
    handleBlur,
    handleFocus,
    handleKeydownOnThumb,
    handlePointerDownOnThumb,
    handlePointerDownOnTrack,
    isDragging,
    isFocusVisible,
    sliderRef
  };
};

exports.useSliderThumb = useSliderThumb;
//# sourceMappingURL=useSliderThumb.js.map
