import { jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useRef } from 'react';
import { ListControlContext } from '../list-control/ListControlContext.js';
import { useListControl, defaultValueToString } from '../list-control/ListControlState.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './ListBox.css.js';

const withBaseName = makePrefixer("saltListBox");
const ListBox = forwardRef(function ListBox2(props, ref) {
  const {
    bordered,
    className,
    children,
    defaultSelected,
    disabled,
    selected,
    onSelectionChange,
    multiselect,
    valueToString = defaultValueToString,
    onKeyDown,
    onFocus,
    onBlur,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-list-box",
    css: css_248z,
    window: targetWindow
  });
  const listControl = useListControl({
    multiselect,
    defaultSelected,
    selected,
    onSelectionChange,
    valueToString,
    disabled
  });
  const {
    activeState,
    setActive,
    getOptionAtIndex,
    getIndexOfOption,
    getOptionsMatching,
    getOptionFromSearch,
    getFirstOption,
    getLastOption,
    getOptionAfter,
    getOptionBefore,
    getOptionPageAbove,
    getOptionPageBelow,
    selectedState,
    select,
    setFocusVisibleState,
    setFocusedState,
    listRef
  } = listControl;
  const typeaheadString = useRef("");
  const typeaheadTimeout = useRef();
  const handleTypeahead = (event) => {
    if (typeaheadTimeout.current) {
      clearTimeout(typeaheadTimeout.current);
    }
    typeaheadString.current += event.key;
    typeaheadTimeout.current = window.setTimeout(() => {
      typeaheadString.current = "";
    }, 500);
    let newOption = getOptionFromSearch(typeaheadString.current, activeState);
    if (!newOption) {
      newOption = getOptionFromSearch(typeaheadString.current);
    }
    if (newOption) {
      setActive(newOption);
      setFocusVisibleState(true);
    }
  };
  const handleKeyDown = (event) => {
    var _a;
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (event.key.length === 1 && !event.ctrlKey && !event.metaKey && !event.altKey) {
      event.preventDefault();
      event.stopPropagation();
      handleTypeahead(event);
    }
    const activeOption = activeState ?? ((_a = getFirstOption()) == null ? void 0 : _a.data);
    if (activeOption === void 0) {
      return;
    }
    let newActive = void 0;
    switch (event.key) {
      case "ArrowDown":
        newActive = getOptionAfter(activeOption) ?? getLastOption();
        break;
      case "ArrowUp":
        newActive = getOptionBefore(activeOption) ?? getFirstOption();
        break;
      case "Home":
        newActive = getFirstOption();
        break;
      case "End":
        newActive = getLastOption();
        break;
      case "PageUp":
        newActive = getOptionPageAbove(activeOption);
        break;
      case "PageDown":
        newActive = getOptionPageBelow(activeOption);
        break;
      case "Enter":
      case " ":
        if (Boolean(activeState == null ? void 0 : activeState.disabled) || typeaheadString.current.trim().length > 0 && event.key === " ") {
          event.preventDefault();
          return;
        }
        if (!activeState) {
          return;
        }
        event.preventDefault();
        select(event, activeState);
        break;
    }
    if (newActive && newActive.data.id !== (activeState == null ? void 0 : activeState.id)) {
      event.preventDefault();
      setActive(newActive.data);
      setFocusVisibleState(true);
    }
  };
  const wasMouseDown = useRef(false);
  const handleMouseDown = () => {
    wasMouseDown.current = true;
  };
  const handleFocus = (event) => {
    if (wasMouseDown.current) {
      wasMouseDown.current = false;
      return;
    }
    setFocusVisibleState(true);
    wasMouseDown.current = false;
    const activeIndex = activeState ? getIndexOfOption(activeState) : -1;
    let newActive = void 0;
    if (activeIndex > 0) {
      return;
    }
    if (selectedState.length > 0) {
      newActive = getOptionsMatching(
        (option) => option.value === selectedState[0]
      ).pop();
    }
    if (!newActive) {
      newActive = getOptionAtIndex(0);
    }
    setActive(newActive == null ? void 0 : newActive.data);
    setFocusedState(true);
    onFocus == null ? void 0 : onFocus(event);
  };
  const handleBlur = (event) => {
    setFocusedState(false);
    setActive(void 0);
    onBlur == null ? void 0 : onBlur(event);
  };
  const handleListMouseOver = () => {
    setFocusVisibleState(false);
    setActive(void 0);
  };
  const handleRef = useForkRef(listRef, ref);
  return /* @__PURE__ */ jsx(ListControlContext.Provider, { value: listControl, children: /* @__PURE__ */ jsx(
    "div",
    {
      className: clsx(
        withBaseName(),
        { [withBaseName("bordered")]: bordered },
        className
      ),
      role: "listbox",
      "aria-activedescendant": activeState == null ? void 0 : activeState.id,
      "aria-disabled": disabled || void 0,
      "aria-multiselectable": multiselect,
      tabIndex: disabled ? -1 : 0,
      onKeyDown: handleKeyDown,
      onBlur: handleBlur,
      onFocus: handleFocus,
      onMouseOver: handleListMouseOver,
      onMouseDown: handleMouseDown,
      ref: handleRef,
      ...rest,
      children
    }
  ) });
});

export { ListBox };
//# sourceMappingURL=ListBox.js.map
