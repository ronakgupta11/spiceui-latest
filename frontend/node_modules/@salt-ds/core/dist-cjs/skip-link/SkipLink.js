'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var SkipLink$1 = require('./SkipLink.css.js');
var useManageFocusOnTarget = require('./internal/useManageFocusOnTarget.js');

const withBaseName = makePrefixer.makePrefixer("saltSkipLink");
const SkipLink = React.forwardRef(
  function SkipLink2({ className, targetId, children, onKeyUp, onBlur, onClick, ...rest }, ref) {
    const [isTargetAvailable, setIsTargetAvailable] = React.useState(false);
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-skip-link",
      css: SkipLink$1,
      window: targetWindow
    });
    const targetRef = React.useRef(null);
    React.useEffect(() => {
      if (targetWindow) {
        targetRef.current = targetWindow.document.getElementById(targetId);
      }
      setIsTargetAvailable(!!targetRef.current);
    }, [targetId, targetWindow]);
    const eventHandlers = useManageFocusOnTarget.useManageFocusOnTarget({
      onKeyUp,
      onBlur,
      onClick,
      targetRef,
      targetClass: withBaseName("target")
    });
    if (!isTargetAvailable) return null;
    return /* @__PURE__ */ jsxRuntime.jsx(
      "a",
      {
        className: clsx.clsx(withBaseName(), className),
        href: `#${targetId}`,
        ref,
        target: "_self",
        ...eventHandlers,
        ...rest,
        children
      }
    );
  }
);

exports.SkipLink = SkipLink;
//# sourceMappingURL=SkipLink.js.map
