{
  "component_name": "Checkbox",
  "metadata": {
    "component_name": "Checkbox",
    "description": "`Checkbox` and `CheckboxGroup` allow users to select or deselect a specific option. A checkbox can stand alone to control a single option, or form part of a checkbox group to control multiple options.",
    "props": {
      "checked": {
        "type": "boolean",
        "required": false,
        "description": "If `true`, the checkbox will be checked."
      },
      "defaultChecked": {
        "type": "boolean",
        "required": false,
        "description": "Whether the checkbox component is checked by default\nThis will be disregarded if checked is already set."
      },
      "disabled": {
        "type": "boolean",
        "required": false,
        "description": "If `true`, the checkbox will be disabled."
      },
      "error": {
        "type": "boolean",
        "required": false,
        "description": "**Deprecated**: Use validationStatus instead\nIf `true`, the checkbox will be in the error state."
      },
      "indeterminate": {
        "type": "boolean",
        "required": false,
        "description": "If true, the checkbox appears indeterminate. A data-indeterminate attribute is set on the input."
      },
      "inputProps": {
        "type": "Partial<InputHTMLAttributes<HTMLInputElement>> & DataAttributes",
        "required": false,
        "description": "Properties applied to the input element.",
        "defaultValue": "{}"
      },
      "inputRef": {
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Used to access the hidden `<input>` element."
      },
      "label": {
        "type": "ReactNode",
        "required": false,
        "description": "The label to be shown next to the checkbox."
      },
      "name": {
        "type": "string",
        "required": false,
        "description": "The name applied to the input."
      },
      "onBlur": {
        "type": "FocusEventHandler<HTMLInputElement>",
        "required": false,
        "description": "Callback when checkbox loses focus."
      },
      "onChange": {
        "type": "ChangeEventHandler<HTMLInputElement>",
        "required": false,
        "description": "Callback when checked state is changed."
      },
      "onFocus": {
        "type": "FocusEventHandler<HTMLInputElement>",
        "required": false,
        "description": "Callback when checkbox gains focus."
      },
      "value": {
        "type": "string",
        "required": false,
        "description": "The value of the checkbox."
      },
      "validationStatus": {
        "type": "enum",
        "required": false,
        "description": "Validation status, one of \"warning\" | \"error\" | \"success\"\n\nCheckbox has styling variants for \"error\" and \"warning\".\nNo visual styling will be applied on \"success\" variant."
      }
    },
    "examples": [
      {
        "name": "Default",
        "description": "",
        "code": "import { Checkbox } from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const Default = (): ReactElement => {\n  return <Checkbox label=\"Fixed income\" value=\"fixed income\" />;\n};\n"
      },
      {
        "name": "Disabled",
        "description": "",
        "code": "import { Checkbox, CheckboxGroup } from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const Disabled = (): ReactElement => {\n  return (\n    <CheckboxGroup>\n      <Checkbox disabled label=\"Alternatives\" value=\"alternatives\" />\n      <Checkbox disabled indeterminate label=\"Equities\" value=\"equities\" />\n      <Checkbox disabled checked label=\"Fixed income\" value=\"fixed income\" />\n    </CheckboxGroup>\n  );\n};\n"
      },
      {
        "name": "Error",
        "description": "",
        "code": "import { Button, Checkbox, CheckboxGroup, StackLayout } from \"@salt-ds/core\";\nimport { type ChangeEvent, type ReactElement, useState } from \"react\";\n\nexport const Error = (): ReactElement => {\n  const [errorState, setErrorState] = useState(true);\n\n  const [checkboxState, setCheckboxState] = useState({\n    checked: false,\n    indeterminate: true,\n  });\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const updatedChecked = event.target.checked;\n    setErrorState(false);\n    setCheckboxState({\n      indeterminate: !updatedChecked && checkboxState.checked,\n      checked:\n        checkboxState.indeterminate && updatedChecked ? false : updatedChecked,\n    });\n  };\n\n  return (\n    <StackLayout>\n      <CheckboxGroup validationStatus={errorState ? \"error\" : undefined}>\n        <Checkbox onChange={() => setErrorState(false)} label=\"Alternatives\" />\n        <Checkbox\n          onChange={() => setErrorState(false)}\n          defaultChecked\n          label=\"Equities\"\n        />\n        <Checkbox\n          checked={checkboxState.checked}\n          indeterminate={checkboxState.indeterminate}\n          onChange={handleChange}\n          label=\"Fixed income\"\n        />\n      </CheckboxGroup>\n      <Button onClick={() => setErrorState(true)}>Reset</Button>\n    </StackLayout>\n  );\n};\n"
      },
      {
        "name": "HorizontalGroup",
        "description": "",
        "code": "import { Checkbox, CheckboxGroup } from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const HorizontalGroup = (): ReactElement => {\n  return (\n    <CheckboxGroup\n      defaultCheckedValues={[\"alternatives\", \"equities\"]}\n      direction=\"horizontal\"\n      name=\"fx\"\n    >\n      <Checkbox label=\"Alternatives\" value=\"alternatives\" />\n      <Checkbox label=\"Equities\" value=\"equities\" />\n      <Checkbox label=\"Fixed income\" value=\"fixed income\" />\n    </CheckboxGroup>\n  );\n};\n"
      },
      {
        "name": "Indeterminate",
        "description": "",
        "code": "import { Checkbox } from \"@salt-ds/core\";\nimport { type ChangeEvent, type ReactElement, useState } from \"react\";\n\nexport const Indeterminate = (): ReactElement => {\n  const [checkboxState, setCheckboxState] = useState({\n    checked: false,\n    indeterminate: true,\n  });\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const updatedChecked = event.target.checked;\n    setCheckboxState({\n      indeterminate: !updatedChecked && checkboxState.checked,\n      checked:\n        checkboxState.indeterminate && updatedChecked ? false : updatedChecked,\n    });\n  };\n\n  return (\n    <Checkbox\n      checked={checkboxState.checked}\n      indeterminate={checkboxState.indeterminate}\n      label=\"Equities\"\n      value=\"equities\"\n      onChange={handleChange}\n    />\n  );\n};\n"
      },
      {
        "name": "LongTextGroup",
        "description": "",
        "code": "import { Checkbox, CheckboxGroup } from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const LongTextGroup = (): ReactElement => {\n  const checkboxesData = [\n    {\n      label:\n        \"Checkboxes allow the user to select multiple options from a set. If you have multiple options appearing in a list, you can preserve space by using checkboxes instead of on/off switches. If you have a single option, avoid using a checkbox and use an on/off switch instead.\",\n      value: \"checkboxes\",\n    },\n    {\n      label:\n        \"Radio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side. Radio buttons allow the user to select one option from a set. Use radio buttons for exclusive selection if you think that the user needs to see all available options side-by-side.\",\n      value: \"radio\",\n    },\n    {\n      disabled: true,\n      label:\n        \"On/off switches toggle the state of a single settings option. The option that the switch controls, as well as the state itâ€™s in, should be made clear from the corresponding inline label. Switch can also be used with a label description thanks to the FormControlLabel component.\",\n      value: \"switches\",\n    },\n  ];\n\n  return (\n    <div style={{ width: \"500px\" }}>\n      <CheckboxGroup defaultCheckedValues={[\"radio\"]}>\n        {checkboxesData.map((data) => (\n          <Checkbox key={data.value} {...data} />\n        ))}\n      </CheckboxGroup>\n    </div>\n  );\n};\n"
      },
      {
        "name": "NoWrapGroup",
        "description": "",
        "code": "import { Checkbox, CheckboxGroup } from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const NoWrapGroup = (): ReactElement => (\n  <div\n    style={{\n      width: 250,\n    }}\n  >\n    <CheckboxGroup name=\"fx\" direction=\"horizontal\" wrap={false}>\n      <Checkbox label=\"Alternatives\" value=\"alternatives\" />\n      <Checkbox label=\"Equities\" value=\"equities\" />\n      <Checkbox disabled label=\"Fixed income\" value=\"fixed income\" />\n    </CheckboxGroup>\n  </div>\n);\n"
      },
      {
        "name": "Readonly",
        "description": "",
        "code": "import { Checkbox, CheckboxGroup } from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const Readonly = (): ReactElement => {\n  return (\n    <CheckboxGroup name=\"fx\">\n      <Checkbox readOnly label=\"Alternatives\" value=\"alternatives\" />\n      <Checkbox readOnly indeterminate label=\"Equities\" value=\"equities\" />\n      <Checkbox readOnly checked label=\"Fixed income\" value=\"fixed income\" />\n    </CheckboxGroup>\n  );\n};\n"
      },
      {
        "name": "VerticalGroup",
        "description": "",
        "code": "import { Checkbox, CheckboxGroup } from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const VerticalGroup = (): ReactElement => {\n  return (\n    <CheckboxGroup defaultCheckedValues={[\"option-1\", \"option-2\"]}>\n      <Checkbox label=\"Alternatives\" value=\"alternatives\" />\n      <Checkbox label=\"Equities\" value=\"equities\" />\n      <Checkbox label=\"Fixed income\" value=\"fixed income\" />\n    </CheckboxGroup>\n  );\n};\n"
      },
      {
        "name": "Warning",
        "description": "",
        "code": "import { Button, Checkbox, CheckboxGroup, StackLayout } from \"@salt-ds/core\";\nimport { type ChangeEvent, type ReactElement, useState } from \"react\";\n\nexport const Warning = (): ReactElement => {\n  const [warningState, setWarningState] = useState(true);\n\n  const [checkboxState, setCheckboxState] = useState({\n    checked: false,\n    indeterminate: true,\n  });\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const updatedChecked = event.target.checked;\n    setWarningState(false);\n    setCheckboxState({\n      indeterminate: !updatedChecked && checkboxState.checked,\n      checked:\n        checkboxState.indeterminate && updatedChecked ? false : updatedChecked,\n    });\n  };\n\n  return (\n    <StackLayout>\n      <CheckboxGroup validationStatus={warningState ? \"warning\" : undefined}>\n        <Checkbox\n          onChange={() => setWarningState(false)}\n          label=\"Alternatives\"\n        />\n        <Checkbox\n          onChange={() => setWarningState(false)}\n          defaultChecked\n          label=\"Equities\"\n        />\n        <Checkbox\n          checked={checkboxState.checked}\n          indeterminate={checkboxState.indeterminate}\n          onChange={handleChange}\n          label=\"Fixed income\"\n        />\n      </CheckboxGroup>\n      <Button onClick={() => setWarningState(true)}>Reset</Button>\n    </StackLayout>\n  );\n};\n"
      },
      {
        "name": "WithDescription",
        "description": "",
        "code": "import { Checkbox, CheckboxGroup, StackLayout, Text } from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const WithDescription = (): ReactElement => {\n  return (\n    <CheckboxGroup defaultCheckedValues={[\"alternatives\", \"equities\"]}>\n      <Checkbox\n        value=\"alternatives\"\n        label={\n          <StackLayout gap={0.5} align=\"start\">\n            <Text>Alternatives</Text>\n            <Text color=\"secondary\" styleAs=\"label\">\n              Other investments\n            </Text>\n          </StackLayout>\n        }\n      />\n      <Checkbox\n        value=\"equities\"\n        label={\n          <StackLayout gap={0.5} align=\"start\">\n            <Text>Equities</Text>\n            <Text color=\"secondary\" styleAs=\"label\">\n              Company shares\n            </Text>\n          </StackLayout>\n        }\n      />\n      <Checkbox\n        value=\"fixed income\"\n        label={\n          <StackLayout gap={0.5} align=\"start\">\n            <Text>Fixed income</Text>\n            <Text color=\"secondary\" styleAs=\"label\">\n              Interest-paying\n            </Text>\n          </StackLayout>\n        }\n      />\n      <Checkbox\n        value=\"bonds\"\n        label={\n          <StackLayout gap={0.5} align=\"start\">\n            <Text>Bonds</Text>\n            <Text color=\"secondary\" styleAs=\"label\">\n              Debt securities\n            </Text>\n          </StackLayout>\n        }\n      />\n    </CheckboxGroup>\n  );\n};\n"
      },
      {
        "name": "WithFormField",
        "description": "",
        "code": "import {\n  Checkbox,\n  CheckboxGroup,\n  FlexLayout,\n  FormField,\n  FormFieldHelperText,\n  FormFieldLabel,\n} from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const WithFormField = (): ReactElement => {\n  return (\n    <FlexLayout>\n      <FormField necessity=\"required\">\n        <FormFieldLabel>Assignment</FormFieldLabel>\n        <CheckboxGroup defaultCheckedValues={[\"alternatives\", \"equities\"]}>\n          <Checkbox label=\"Alternatives\" value=\"alternatives\" />\n          <Checkbox label=\"Equities\" value=\"equities\" />\n          <Checkbox label=\"Fixed income\" value=\"fixed income\" />\n        </CheckboxGroup>\n        <FormFieldHelperText>Select all appropriate</FormFieldHelperText>\n      </FormField>\n    </FlexLayout>\n  );\n};\n"
      },
      {
        "name": "WrapGroup",
        "description": "",
        "code": "import { Checkbox, CheckboxGroup } from \"@salt-ds/core\";\nimport type { ReactElement } from \"react\";\n\nexport const WrapGroup = (): ReactElement => (\n  <div\n    style={{\n      width: 250,\n    }}\n  >\n    <CheckboxGroup name=\"fx\" direction=\"horizontal\" wrap>\n      <Checkbox label=\"Alternatives\" value=\"alternatives\" />\n      <Checkbox label=\"Equities\" value=\"equities\" />\n      <Checkbox disabled label=\"Fixed income\" value=\"fixed income\" />\n    </CheckboxGroup>\n  </div>\n);\n"
      }
    ],
    "category": "@salt-ds/core",
    "tags": [
      "Check box",
      "Tick box",
      "Tickbox"
    ],
    "when_to_use": [
      "To present an independent choice that the user can select or deselect.",
      "To present a list of independent options where the user can select any number of choices."
    ],
    "when_not_to_use": [
      "When the checkbox displays a mutually exclusive choice between two or more options. Instead, use [`RadioButton`](../radio-button).",
      "To display a single option but trigger a state change directly and immediately. Instead, use [`Switch`](../switch)."
    ],
    "import_statement": "import { Checkbox, CheckboxGroup } from \"@salt-ds/core\";",
    "source_code_url": "https://github.com/jpmorganchase/salt-ds/blob/main/packages/core/src/checkbox",
    "related_components": [
      {
        "name": "Dropdown",
        "relationship": "similarTo"
      },
      {
        "name": "Radio button",
        "relationship": "similarTo"
      },
      {
        "name": "Switch",
        "relationship": "similarTo"
      },
      {
        "name": "ToggleButton",
        "relationship": "similarTo"
      }
    ]
  }
}