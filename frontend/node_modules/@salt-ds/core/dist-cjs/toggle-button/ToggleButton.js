'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
require('../toggle-button-group/ToggleButtonGroup.js');
var ToggleButtonGroupContext = require('../toggle-button-group/ToggleButtonGroupContext.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var ToggleButton$1 = require('./ToggleButton.css.js');

const withBaseName = makePrefixer.makePrefixer("saltToggleButton");
const ToggleButton = React.forwardRef(
  function ToggleButton2(props, ref) {
    const {
      appearance: appearanceProp,
      children,
      className,
      disabled: disabledProp,
      value,
      onClick,
      onFocus,
      onChange,
      readOnly: readOnlyProp,
      selected: selectedProp,
      defaultSelected,
      sentiment: sentimenentProp,
      ...rest
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-toggle-button",
      css: ToggleButton$1,
      window: targetWindow
    });
    const buttonRef = React.useRef(null);
    const handleRef = useForkRef.useForkRef(ref, buttonRef);
    const toggleButtonGroup = ToggleButtonGroupContext.useToggleButtonGroup();
    const toggleButtonGroupSelected = toggleButtonGroup ? toggleButtonGroup.isSelected(value) : selectedProp;
    const focusable = toggleButtonGroup ? toggleButtonGroup == null ? void 0 : toggleButtonGroup.isFocused(value) : true;
    const sentiment = sentimenentProp || (toggleButtonGroup == null ? void 0 : toggleButtonGroup.sentiment) || "neutral";
    const appearance = appearanceProp || (toggleButtonGroup == null ? void 0 : toggleButtonGroup.appearance) || "solid";
    const disabled = (toggleButtonGroup == null ? void 0 : toggleButtonGroup.disabled) || disabledProp;
    const readOnly = (toggleButtonGroup == null ? void 0 : toggleButtonGroup.readOnly) || readOnlyProp;
    const [selected, setSelected] = useControlled.useControlled({
      controlled: toggleButtonGroupSelected,
      default: Boolean(defaultSelected),
      name: "ToggleButton",
      state: "selected"
    });
    const handleClick = (event) => {
      if (disabled || readOnly) {
        return;
      }
      toggleButtonGroup == null ? void 0 : toggleButtonGroup.select(event);
      setSelected(!selected);
      onChange == null ? void 0 : onChange(event);
      onClick == null ? void 0 : onClick(event);
    };
    const handleFocus = (event) => {
      toggleButtonGroup == null ? void 0 : toggleButtonGroup.focus(value);
      onFocus == null ? void 0 : onFocus(event);
    };
    const toggleButtonProps = {
      "aria-readonly": readOnlyProp,
      "aria-pressed": !toggleButtonGroup ? selected : void 0,
      "aria-checked": toggleButtonGroup ? selected : void 0,
      "aria-disabled": disabled,
      role: toggleButtonGroup ? "radio" : void 0,
      className: clsx.clsx(
        withBaseName(),
        withBaseName(sentiment),
        withBaseName(appearance),
        readOnly && withBaseName("readOnly"),
        className
      ),
      onClick: handleClick,
      onFocus: handleFocus,
      tabIndex: focusable ? 0 : -1,
      value,
      type: "button",
      disabled,
      readOnly: readOnlyProp,
      ...rest
    };
    return /* @__PURE__ */ jsxRuntime.jsx("button", { ref: handleRef, ...toggleButtonProps, children });
  }
);

exports.ToggleButton = ToggleButton;
//# sourceMappingURL=ToggleButton.js.map
