'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var CheckboxGroup$1 = require('./CheckboxGroup.css.js');
var CheckboxGroupContext = require('./internal/CheckboxGroupContext.js');

const withBaseName = makePrefixer.makePrefixer("saltCheckboxGroup");
const CheckboxGroup = React.forwardRef(function CheckboxGroup2({
  "aria-labelledby": ariaLabelledBy,
  "aria-describedby": ariaDescribedBy,
  checkedValues: checkedValuesProp,
  defaultCheckedValues = [],
  children,
  className,
  disabled: disabledProp,
  direction = "vertical",
  name,
  onChange,
  readOnly: readOnlyProp,
  wrap,
  validationStatus: validationStatusProp,
  ...other
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-checkbox-group",
    css: CheckboxGroup$1,
    window: targetWindow
  });
  const {
    a11yProps,
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps.useFormFieldProps();
  const disabled = formFieldDisabled || disabledProp;
  const readOnly = formFieldReadOnly || readOnlyProp;
  const validationStatus = formFieldValidationStatus ?? validationStatusProp;
  const [checkedValues, setCheckedValues] = useControlled.useControlled({
    controlled: checkedValuesProp,
    default: defaultCheckedValues,
    name: "CheckboxGroup",
    state: "checkedValues"
  });
  const handleChange = (event) => {
    const name2 = event.target.value;
    setCheckedValues((oldValues = []) => {
      const isSelected = oldValues.includes(name2);
      return isSelected ? oldValues.filter((value) => value !== name2) : oldValues.concat(name2);
    });
    onChange == null ? void 0 : onChange(event);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(
    "fieldset",
    {
      "aria-labelledby": clsx.clsx(a11yProps == null ? void 0 : a11yProps["aria-labelledby"], ariaLabelledBy) || void 0,
      "aria-describedby": clsx.clsx(a11yProps == null ? void 0 : a11yProps["aria-describedby"], ariaDescribedBy) || void 0,
      className: clsx.clsx(
        withBaseName(),
        withBaseName(direction),
        {
          [withBaseName("noWrap")]: !wrap
        },
        className
      ),
      ref,
      ...other,
      children: /* @__PURE__ */ jsxRuntime.jsx(
        CheckboxGroupContext.CheckboxGroupContext.Provider,
        {
          value: {
            disabled,
            name,
            onChange: handleChange,
            checkedValues,
            readOnly,
            validationStatus
          },
          children
        }
      )
    }
  );
});

exports.CheckboxGroup = CheckboxGroup;
//# sourceMappingURL=CheckboxGroup.js.map
