import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { StatusIndicator } from '../status-indicator/StatusIndicator.js';
import { Text } from '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import { H2 } from '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { useDialogContext } from './DialogContext.js';
import css_248z from './DialogHeader.css.js';

const withBaseName = makePrefixer("saltDialogHeader");
const DialogHeader = forwardRef(
  function DialogHeader2(props, ref) {
    const {
      className,
      description,
      disableAccent,
      actions,
      header,
      preheader,
      status: statusProp,
      ...rest
    } = props;
    const { status: statusContext, id } = useDialogContext();
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-dialog-header",
      css: css_248z,
      window: targetWindow
    });
    const status = statusProp ?? statusContext;
    return /* @__PURE__ */ jsxs(
      "div",
      {
        id,
        className: clsx(
          withBaseName(),
          {
            [withBaseName("withAccent")]: !disableAccent && !status,
            [withBaseName(status ?? "")]: !!status
          },
          className
        ),
        ref,
        ...rest,
        children: [
          status && /* @__PURE__ */ jsx(StatusIndicator, { status }),
          /* @__PURE__ */ jsxs("div", { className: withBaseName("container"), children: [
            /* @__PURE__ */ jsxs(H2, { className: withBaseName("header"), children: [
              preheader && /* @__PURE__ */ jsx(Text, { color: "primary", children: preheader }),
              header
            ] }),
            description && /* @__PURE__ */ jsx(Text, { color: "secondary", className: withBaseName("description"), children: description })
          ] }),
          actions && /* @__PURE__ */ jsx("div", { className: withBaseName("actionsContainer"), children: actions })
        ]
      }
    );
  }
);

export { DialogHeader };
//# sourceMappingURL=DialogHeader.js.map
