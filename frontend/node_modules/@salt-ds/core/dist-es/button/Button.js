import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { Spinner } from '../spinner/Spinner.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './Button.css.js';
import { useButton } from './useButton.js';

const withBaseName = makePrefixer("saltButton");
const ButtonVariantValues = ["primary", "secondary", "cta"];
const ButtonAppearanceValues = [
  "solid",
  "bordered",
  "transparent"
];
const ButtonSentimentValues = [
  "accented",
  "neutral",
  "positive",
  "negative",
  "caution"
];
function variantToAppearanceAndColor(variant) {
  switch (variant) {
    case "primary":
      return { appearance: "solid", sentiment: "neutral" };
    case "secondary":
      return { appearance: "transparent", sentiment: "neutral" };
    case "cta":
      return { appearance: "solid", sentiment: "accented" };
  }
}
const Button = forwardRef(
  function Button2({
    children,
    className,
    disabled,
    focusableWhenDisabled,
    onKeyUp,
    onKeyDown,
    onBlur,
    onClick,
    loading,
    loadingAnnouncement,
    appearance: appearanceProp,
    sentiment: sentimentProp,
    type = "button",
    variant = "primary",
    ...restProps
  }, ref) {
    const { active, buttonProps } = useButton({
      loading,
      disabled,
      focusableWhenDisabled,
      onKeyUp,
      onKeyDown,
      onBlur,
      onClick
    });
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-button",
      css: css_248z,
      window: targetWindow
    });
    const mapped = variantToAppearanceAndColor(variant);
    const appearance = appearanceProp ?? (mapped == null ? void 0 : mapped.appearance) ?? "solid";
    const sentiment = sentimentProp ?? (mapped == null ? void 0 : mapped.sentiment) ?? "neutral";
    const { tabIndex, ...restButtonProps } = buttonProps;
    return /* @__PURE__ */ jsxs(
      "button",
      {
        ...restButtonProps,
        className: clsx(
          withBaseName(),
          withBaseName(variant),
          {
            [withBaseName("loading")]: loading,
            [withBaseName("disabled")]: disabled,
            [withBaseName("active")]: active,
            [withBaseName(appearance)]: appearance,
            [withBaseName(sentiment)]: sentiment
          },
          className
        ),
        ...restProps,
        ref,
        type,
        children: [
          loading && /* @__PURE__ */ jsx("div", { className: withBaseName("spinner"), "aria-hidden": true, children: /* @__PURE__ */ jsx(Spinner, { size: "small", "aria-hidden": true, disableAnnouncer: true }) }),
          typeof loadingAnnouncement === "string" && /* @__PURE__ */ jsx("span", { role: "status", className: withBaseName("sr-only"), children: loadingAnnouncement }),
          children
        ]
      }
    );
  }
);

export { Button, ButtonAppearanceValues, ButtonSentimentValues, ButtonVariantValues };
//# sourceMappingURL=Button.js.map
