import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { RadioButtonIcon } from './RadioButtonIcon.js';
import { useRadioGroup } from './internal/useRadioGroup.js';
import css_248z from './RadioButton.css.js';

const withBaseName = makePrefixer("saltRadioButton");
const RadioButton = forwardRef(
  function RadioButton2(props, ref) {
    const {
      checked: checkedProp,
      className,
      disabled: disabledProp,
      error,
      inputProps = {},
      inputRef,
      label,
      name: nameProp,
      onFocus,
      onBlur,
      onChange,
      readOnly: readOnlyProp,
      value,
      validationStatus: validationStatusProp,
      ...rest
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-radio-button",
      css: css_248z,
      window: targetWindow
    });
    const {
      a11yProps: formFieldA11yProps,
      disabled: formFieldDisabled,
      readOnly: formFieldReadOnly,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps();
    const radioGroup = useRadioGroup();
    const {
      "aria-describedby": inputDescribedBy,
      "aria-labelledby": inputLabelledBy,
      className: inputClassName,
      onChange: inputOnChange,
      ...restInputProps
    } = inputProps;
    const disabled = (radioGroup == null ? void 0 : radioGroup.disabled) || formFieldDisabled || disabledProp;
    const readOnly = (radioGroup == null ? void 0 : radioGroup.readOnly) || formFieldReadOnly || readOnlyProp;
    const validationStatus = !disabled ? (radioGroup == null ? void 0 : radioGroup.validationStatus) ?? formFieldValidationStatus ?? validationStatusProp : void 0;
    const radioGroupChecked = checkedProp ?? (radioGroup && value ? radioGroup.value === value : checkedProp);
    const name = nameProp ?? (radioGroup == null ? void 0 : radioGroup.name);
    const [checked, setCheckedState] = useControlled({
      controlled: radioGroupChecked,
      default: Boolean(checkedProp),
      name: "RadioBase",
      state: "checked"
    });
    const handleChange = (event) => {
      var _a;
      if (readOnly) return;
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      onChange == null ? void 0 : onChange(event);
      inputOnChange == null ? void 0 : inputOnChange(event);
      (_a = radioGroup == null ? void 0 : radioGroup.onChange) == null ? void 0 : _a.call(radioGroup, event);
    };
    return /* @__PURE__ */ jsxs(
      "label",
      {
        className: clsx(
          withBaseName(),
          {
            [withBaseName("disabled")]: disabled,
            [withBaseName("readOnly")]: readOnly,
            [withBaseName("error")]: error,
            [withBaseName(validationStatus || "")]: validationStatus
          },
          className
        ),
        ref,
        ...rest,
        children: [
          /* @__PURE__ */ jsx(
            "input",
            {
              "aria-describedby": clsx(
                radioGroup === void 0 ? formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-describedby"] : void 0,
                inputDescribedBy
              ) || void 0,
              "aria-labelledby": clsx(
                radioGroup === void 0 ? formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-labelledby"] : void 0,
                inputLabelledBy
              ) || void 0,
              className: clsx(withBaseName("input"), inputClassName),
              checked,
              disabled,
              readOnly,
              name,
              value,
              onBlur,
              onChange: handleChange,
              onFocus,
              type: "radio",
              ref: inputRef,
              ...restInputProps
            }
          ),
          /* @__PURE__ */ jsx(
            RadioButtonIcon,
            {
              checked,
              disabled,
              readOnly,
              validationStatus,
              error
            }
          ),
          label
        ]
      }
    );
  }
);

export { RadioButton };
//# sourceMappingURL=RadioButton.js.map
