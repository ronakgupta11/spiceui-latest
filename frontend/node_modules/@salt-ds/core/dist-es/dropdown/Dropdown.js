import { jsxs, jsx } from 'react/jsx-runtime';
import { offset, size, flip, useInteractions, useDismiss, useFocus, useClick } from '@floating-ui/react';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, Children, useRef, useEffect } from 'react';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { ListControlContext } from '../list-control/ListControlContext.js';
import { useListControl, defaultValueToString } from '../list-control/ListControlState.js';
import { OptionList } from '../option/OptionList.js';
import { useIcon } from '../semantic-icon-provider/SemanticIconProvider.js';
import { StatusAdornment } from '../status-adornment/StatusAdornment.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useFloatingUI } from '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import { useId } from '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './Dropdown.css.js';

const withBaseName = makePrefixer("saltDropdown");
function ExpandIcon({ open }) {
  const { CollapseIcon, ExpandIcon: ExpandIcon2 } = useIcon();
  return open ? /* @__PURE__ */ jsx(CollapseIcon, { className: withBaseName("toggle"), "aria-hidden": true }) : /* @__PURE__ */ jsx(ExpandIcon2, { className: withBaseName("toggle"), "aria-hidden": true });
}
const Dropdown = forwardRef(function Dropdown2(props, ref) {
  var _a, _b;
  const {
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    children,
    className,
    disabled: disabledProp,
    emptyReadOnlyMarker = "\u2014",
    readOnly: readOnlyProp,
    multiselect,
    onSelectionChange,
    selected,
    defaultSelected,
    defaultOpen,
    value,
    onOpenChange,
    open,
    placeholder,
    startAdornment,
    required: requiredProp,
    variant = "primary",
    validationStatus: validationStatusProp,
    onKeyDown,
    onFocus,
    onBlur,
    valueToString = defaultValueToString,
    bordered = false,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-dropdown",
    css: css_248z,
    window: targetWindow
  });
  const {
    a11yProps: {
      "aria-describedby": formFieldDescribedBy,
      "aria-labelledby": formFieldLabelledBy
    } = {},
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    necessity: formFieldRequired,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps();
  const disabled = Boolean(disabledProp) || formFieldDisabled;
  const readOnly = Boolean(readOnlyProp) || formFieldReadOnly;
  const validationStatus = validationStatusProp ?? formFieldValidationStatus;
  const required = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : requiredProp;
  const listControl = useListControl({
    open,
    defaultOpen,
    onOpenChange,
    multiselect,
    defaultSelected,
    selected,
    onSelectionChange,
    valueToString
  });
  const {
    activeState,
    setActive,
    openState,
    setOpen,
    openKey,
    getIndexOfOption,
    getOptionsMatching,
    getOptionFromSearch,
    getFirstOption,
    getLastOption,
    getOptionAfter,
    getOptionBefore,
    getOptionPageAbove,
    getOptionPageBelow,
    selectedState,
    select,
    setFocusVisibleState,
    focusedState,
    setFocusedState,
    listRef
  } = listControl;
  const selectedValue = selectedState.map((item) => valueToString(item)).join(", ");
  const isEmptyReadOnly = readOnly && selectedValue === "";
  const valueText = isEmptyReadOnly ? emptyReadOnlyMarker : value ?? selectedValue;
  const handleOpenChange = (newOpen, _event, reason) => {
    const focusNotBlur = reason === "focus" && newOpen;
    if (readOnly || focusNotBlur) return;
    setOpen(newOpen);
  };
  const { x, y, strategy, elements, floating, reference, context } = useFloatingUI({
    open: openState && !readOnly && Children.count(children) > 0,
    onOpenChange: handleOpenChange,
    placement: "bottom-start",
    middleware: [
      offset(1),
      size({
        apply({ rects, elements: elements2, availableHeight }) {
          Object.assign(elements2.floating.style, {
            minWidth: `${rects.reference.width}px`,
            maxHeight: `max(calc((var(--salt-size-base) + var(--salt-spacing-100)) * 5), calc(${availableHeight}px - var(--salt-spacing-100)))`
          });
        }
      }),
      flip({ fallbackStrategy: "initialPlacement" })
    ]
  });
  const { getReferenceProps, getFloatingProps } = useInteractions([
    useDismiss(context),
    useFocus(context),
    useClick(context)
  ]);
  const buttonRef = useRef(null);
  const handleTriggerRef = useForkRef(reference, buttonRef);
  const handleButtonRef = useForkRef(handleTriggerRef, ref);
  const typeaheadString = useRef("");
  const typeaheadTimeout = useRef();
  const handleTypeahead = (event) => {
    if (typeaheadTimeout.current) {
      clearTimeout(typeaheadTimeout.current);
    }
    typeaheadString.current += event.key;
    typeaheadTimeout.current = window.setTimeout(() => {
      typeaheadString.current = "";
    }, 500);
    if (!openState) {
      setOpen(true, "input");
    }
    let newOption = getOptionFromSearch(typeaheadString.current, activeState);
    if (!newOption) {
      newOption = getOptionFromSearch(typeaheadString.current);
    }
    if (newOption) {
      setActive(newOption);
      setFocusVisibleState(true);
    }
  };
  const handleKeyDown = (event) => {
    var _a2;
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (readOnly) {
      return;
    }
    if (!openState) {
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        setOpen(true, void 0, event.key);
        return;
      }
    }
    if (event.key.length === 1 && !event.ctrlKey && !event.metaKey && !event.altKey) {
      event.preventDefault();
      event.stopPropagation();
      handleTypeahead(event);
    }
    const activeOption = activeState ?? ((_a2 = getFirstOption()) == null ? void 0 : _a2.data);
    if (activeOption === void 0) {
      return;
    }
    let newActive = void 0;
    switch (event.key) {
      case "ArrowDown":
        newActive = getOptionAfter(activeOption) ?? getLastOption();
        break;
      case "ArrowUp":
        newActive = getOptionBefore(activeOption) ?? getFirstOption();
        break;
      case "Home":
        newActive = getFirstOption();
        break;
      case "End":
        newActive = getLastOption();
        break;
      case "PageUp":
        newActive = getOptionPageAbove(activeOption);
        break;
      case "PageDown":
        newActive = getOptionPageBelow(activeOption);
        break;
      case "Enter":
      case " ":
        if (openState && Boolean(activeState == null ? void 0 : activeState.disabled) || typeaheadString.current.trim().length > 0 && event.key === " ") {
          event.preventDefault();
          return;
        }
        if (!openState || !activeState) {
          return;
        }
        event.preventDefault();
        select(event, activeState);
        break;
      case "Tab":
        if (!multiselect && activeState) {
          select(event, activeState);
        }
        break;
    }
    if (newActive && newActive.data.id !== (activeState == null ? void 0 : activeState.id)) {
      event.preventDefault();
      setActive(newActive.data);
      setFocusVisibleState(true);
    }
  };
  const handleFocus = (event) => {
    setFocusedState(true);
    onFocus == null ? void 0 : onFocus(event);
  };
  const handleBlur = (event) => {
    setFocusedState(false);
    if (!listRef.current || !listRef.current.contains(event.relatedTarget)) {
      onBlur == null ? void 0 : onBlur(event);
    }
  };
  const handleListMouseOver = () => {
    setFocusVisibleState(false);
  };
  const handleFocusButton = () => {
    var _a2;
    (_a2 = buttonRef.current) == null ? void 0 : _a2.focus();
  };
  useEffect(() => {
    if (!openState) {
      setActive(void 0);
      return;
    }
    const activeIndex = activeState ? getIndexOfOption(activeState) : -1;
    let newActive = void 0;
    if (activeIndex > 0) {
      return;
    }
    if (selectedState.length > 0) {
      newActive = getOptionsMatching(
        (option) => option.value === selectedState[0]
      ).pop();
    }
    if (!newActive) {
      if (openKey.current === "ArrowDown") {
        newActive = getFirstOption();
      } else if (openKey.current === "ArrowUp") {
        newActive = getLastOption();
      }
    }
    if (!newActive) {
      newActive = getFirstOption();
    }
    setActive(newActive == null ? void 0 : newActive.data);
  }, [openState, children]);
  const listId = useId();
  const handleListRef = useForkRef(listRef, floating);
  return /* @__PURE__ */ jsxs(ListControlContext.Provider, { value: listControl, children: [
    /* @__PURE__ */ jsxs(
      "button",
      {
        className: clsx(
          withBaseName(),
          withBaseName(variant),
          {
            [withBaseName("disabled")]: disabled,
            [withBaseName(validationStatus ?? "")]: validationStatus,
            [withBaseName("bordered")]: bordered
          },
          className
        ),
        ref: handleButtonRef,
        role: "combobox",
        type: "button",
        disabled,
        "aria-readonly": readOnly ? "true" : void 0,
        "aria-required": required ? "true" : void 0,
        "aria-expanded": openState,
        "aria-activedescendant": activeState == null ? void 0 : activeState.id,
        "aria-labelledby": clsx(formFieldLabelledBy, ariaLabelledBy) || void 0,
        "aria-describedby": clsx(formFieldDescribedBy, ariaDescribedBy) || void 0,
        "aria-controls": openState ? listId : void 0,
        ...getReferenceProps({
          onKeyDown: handleKeyDown,
          onFocus: handleFocus,
          onBlur: handleBlur,
          ...rest
        }),
        children: [
          startAdornment && /* @__PURE__ */ jsx("div", { className: withBaseName("startAdornmentContainer"), children: startAdornment }),
          /* @__PURE__ */ jsx(
            "span",
            {
              className: clsx(withBaseName("content"), {
                [withBaseName("placeholder")]: !valueText
              }),
              children: !valueText ? placeholder : valueText
            }
          ),
          !disabled && validationStatus && /* @__PURE__ */ jsx(StatusAdornment, { status: validationStatus }),
          !readOnly && /* @__PURE__ */ jsx(ExpandIcon, { open: openState }),
          /* @__PURE__ */ jsx("div", { className: withBaseName("activationIndicator") })
        ]
      }
    ),
    /* @__PURE__ */ jsx(
      OptionList,
      {
        "aria-multiselectable": multiselect,
        open: (openState || focusedState) && !readOnly && Children.count(children) > 0,
        ...getFloatingProps({
          onMouseOver: handleListMouseOver,
          onFocus: handleFocusButton,
          onClick: handleFocusButton
        }),
        left: x ?? 0,
        top: y ?? 0,
        position: strategy,
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight,
        ref: handleListRef,
        id: listId,
        collapsed: !openState,
        children
      }
    )
  ] });
});

export { Dropdown };
//# sourceMappingURL=Dropdown.js.map
