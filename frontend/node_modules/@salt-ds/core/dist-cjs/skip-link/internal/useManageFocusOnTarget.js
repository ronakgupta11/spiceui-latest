'use strict';

var React = require('react');

const FOCUS_TIMEOUT = 50;
const useManageFocusOnTarget = ({
  onKeyUp,
  onBlur,
  onClick,
  targetRef,
  targetClass
}) => {
  const [target, setTarget] = React.useState();
  const hasTabIndex = React.useRef();
  const shouldRemoveTabIndex = React.useRef();
  React.useEffect(() => {
    if (targetRef == null ? void 0 : targetRef.current) {
      setTarget(targetRef.current);
    }
  }, [targetRef]);
  if (!target) {
    return {};
  }
  const addTabIndex = () => {
    const tabIndex = target.getAttribute("tabIndex");
    hasTabIndex.current = tabIndex || tabIndex === "0";
    if (!hasTabIndex.current) {
      shouldRemoveTabIndex.current = true;
      target.setAttribute("tabIndex", "-1");
    }
  };
  const removeTabIndex = () => {
    if (!hasTabIndex.current && shouldRemoveTabIndex.current) {
      target.removeAttribute("tabIndex");
    }
  };
  const handleFocusOnTarget = () => {
    shouldRemoveTabIndex.current = false;
    target.classList.add(targetClass);
  };
  const handleBlurFromTarget = () => {
    shouldRemoveTabIndex.current = true;
    removeTabIndex();
    target.classList.remove(targetClass);
  };
  function moveToTarget() {
    addTabIndex();
    setTimeout(() => {
      target == null ? void 0 : target.focus();
    }, FOCUS_TIMEOUT);
    target == null ? void 0 : target.addEventListener("focus", handleFocusOnTarget, { once: true });
    target == null ? void 0 : target.addEventListener("blur", handleBlurFromTarget, { once: true });
  }
  const handleKeyUp = (event) => {
    if (event.key === "Enter" || event.key === " ") {
      moveToTarget();
    }
    onKeyUp == null ? void 0 : onKeyUp(event);
  };
  const handleClick = (event) => {
    moveToTarget();
    onClick == null ? void 0 : onClick(event);
  };
  const handleBlur = (event) => {
    setTimeout(removeTabIndex, FOCUS_TIMEOUT);
    onBlur == null ? void 0 : onBlur(event);
  };
  return {
    onBlur: handleBlur,
    onClick: handleClick,
    onKeyUp: handleKeyUp
  };
};

exports.useManageFocusOnTarget = useManageFocusOnTarget;
//# sourceMappingURL=useManageFocusOnTarget.js.map
