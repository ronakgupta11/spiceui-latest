'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var SemanticIconProvider = require('../semantic-icon-provider/SemanticIconProvider.js');
var StatusIndicator = require('../status-indicator/StatusIndicator.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
var useIsomorphicLayoutEffect = require('../utils/useIsomorphicLayoutEffect.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var AccordionContext = require('./AccordionContext.js');
var AccordionHeader$1 = require('./AccordionHeader.css.js');

const withBaseName = makePrefixer.makePrefixer("saltAccordionHeader");
function ExpansionIcon({ expanded }) {
  const { CollapseIcon, ExpandIcon } = SemanticIconProvider.useIcon();
  if (expanded) {
    return /* @__PURE__ */ jsxRuntime.jsx(CollapseIcon, { "aria-hidden": true, className: withBaseName("icon") });
  }
  return /* @__PURE__ */ jsxRuntime.jsx(ExpandIcon, { "aria-hidden": true, className: withBaseName("icon") });
}
const AccordionHeader = React.forwardRef(function AccordionHeader2(props, ref) {
  const { children, className, onClick, id, ...rest } = props;
  const {
    value,
    expanded,
    toggle,
    indicatorSide,
    disabled,
    headerId,
    panelId,
    setHeaderId,
    status
  } = AccordionContext.useAccordion();
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-accordion-header",
    css: AccordionHeader$1,
    window: targetWindow
  });
  const handleClick = (event) => {
    toggle(event);
    onClick == null ? void 0 : onClick(event);
  };
  useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
    if (id) {
      setHeaderId(id);
    }
  }, [id, setHeaderId]);
  return /* @__PURE__ */ jsxRuntime.jsxs(
    "button",
    {
      ref,
      className: clsx.clsx(
        withBaseName(),
        { [withBaseName(status ?? "")]: status },
        className
      ),
      disabled,
      onClick: handleClick,
      "aria-expanded": expanded,
      id: headerId,
      "aria-controls": panelId,
      value,
      type: "button",
      ...rest,
      children: [
        indicatorSide === "left" && /* @__PURE__ */ jsxRuntime.jsx(ExpansionIcon, { expanded }),
        /* @__PURE__ */ jsxRuntime.jsx("span", { className: withBaseName("content"), children }),
        status && !disabled && /* @__PURE__ */ jsxRuntime.jsx(
          StatusIndicator.StatusIndicator,
          {
            className: withBaseName("statusIndicator"),
            status
          }
        ),
        indicatorSide === "right" && /* @__PURE__ */ jsxRuntime.jsx(ExpansionIcon, { expanded })
      ]
    }
  );
});

exports.AccordionHeader = AccordionHeader;
//# sourceMappingURL=AccordionHeader.js.map
