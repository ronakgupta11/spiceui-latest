'use strict';

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useId = require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var RadioGroupContext = require('./internal/RadioGroupContext.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
var RadioButtonGroup$1 = require('./RadioButtonGroup.css.js');

const withBaseName = makePrefixer.makePrefixer("saltRadioButtonGroup");
const RadioButtonGroup = React.forwardRef(function RadioButtonGroup2(props, ref) {
  const {
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    children,
    className,
    defaultValue,
    direction = "vertical",
    disabled: disabledProp,
    wrap = true,
    name: nameProp,
    onChange,
    readOnly: readOnlyProp,
    value: valueProp,
    validationStatus: validationStatusProp,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-radio-button-group",
    css: RadioButtonGroup$1,
    window: targetWindow
  });
  const {
    a11yProps,
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps.useFormFieldProps();
  const disabled = formFieldDisabled || disabledProp;
  const readOnly = formFieldReadOnly || readOnlyProp;
  const validationStatus = formFieldValidationStatus ?? validationStatusProp;
  const [value, setStateValue] = useControlled.useControlled({
    controlled: valueProp,
    default: defaultValue,
    state: "value",
    name: "RadioButtonGroup"
  });
  const handleChange = (event) => {
    setStateValue(event.target.value);
    onChange == null ? void 0 : onChange(event);
  };
  const name = useId.useId(nameProp);
  return /* @__PURE__ */ jsxRuntime.jsx(
    "fieldset",
    {
      role: "radiogroup",
      "aria-readonly": readOnly,
      "aria-labelledby": clsx.clsx(a11yProps == null ? void 0 : a11yProps["aria-labelledby"], ariaLabelledBy) || void 0,
      "aria-describedby": clsx.clsx(a11yProps == null ? void 0 : a11yProps["aria-describedby"], ariaDescribedBy) || void 0,
      className: clsx.clsx(
        withBaseName(),
        withBaseName(direction),
        {
          [withBaseName("noWrap")]: !wrap
        },
        className
      ),
      "data-testid": "radio-button-group",
      ref,
      ...rest,
      children: /* @__PURE__ */ jsxRuntime.jsx(
        RadioGroupContext.RadioGroupContext.Provider,
        {
          value: {
            disabled,
            name,
            onChange: handleChange,
            readOnly,
            validationStatus,
            value
          },
          children
        }
      )
    }
  );
});

exports.RadioButtonGroup = RadioButtonGroup;
//# sourceMappingURL=RadioButtonGroup.js.map
