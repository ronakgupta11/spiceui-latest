'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
var CheckboxIcon = require('../checkbox/CheckboxIcon.js');
var ListControlContext = require('../list-control/ListControlContext.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
var useId = require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var Option$1 = require('./Option.css.js');

const withBaseName = makePrefixer.makePrefixer("saltOption");
const Option = React.forwardRef(
  function Option2(props, ref) {
    const {
      className,
      children,
      disabled: disabledProp,
      onClick,
      id: idProp,
      value,
      ...rest
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-option",
      css: Option$1,
      window: targetWindow
    });
    const optionRef = React.useRef(null);
    const id = useId.useId(idProp);
    const {
      setActive,
      activeState,
      multiselect,
      select,
      register,
      selectedState,
      focusVisibleState,
      valueToString,
      disabled: listDisabled
    } = ListControlContext.useListControlContext();
    const disabled = disabledProp || listDisabled;
    const selected = selectedState.includes(value);
    const active = (activeState == null ? void 0 : activeState.id) === id;
    const optionValue = React.useMemo(
      () => ({
        id: String(id),
        disabled: Boolean(disabled),
        value
      }),
      [id, disabled, value]
    );
    const handleClick = (event) => {
      if (disabled || id === void 0) {
        return;
      }
      setActive(optionValue);
      select(event, optionValue);
      onClick == null ? void 0 : onClick(event);
    };
    const handleMouseOver = () => {
      setActive(optionValue);
    };
    React.useEffect(() => {
      if (id && optionRef.current) {
        return register(optionValue, optionRef.current);
      }
    }, [optionValue, id, register]);
    const handleRef = useForkRef.useForkRef(optionRef, ref);
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        "aria-disabled": disabled ? "true" : void 0,
        "aria-selected": selected,
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("active")]: active,
            [withBaseName("focusVisible")]: focusVisibleState && active
          },
          className
        ),
        ref: handleRef,
        role: "option",
        id,
        onClick: handleClick,
        onMouseOver: handleMouseOver,
        ...rest,
        children: [
          multiselect && /* @__PURE__ */ jsxRuntime.jsx(CheckboxIcon.CheckboxIcon, { checked: selected, disabled }),
          children ?? valueToString(value)
        ]
      }
    );
  }
);

exports.Option = Option;
//# sourceMappingURL=Option.js.map
