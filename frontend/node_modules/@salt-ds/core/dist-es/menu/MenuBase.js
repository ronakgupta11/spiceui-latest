import { jsx } from 'react/jsx-runtime';
import { useFloatingParentNodeId, useFloatingNodeId, useFloatingTree, offset, flip, shift, size, limitShift, useInteractions, useHover, useClick, useRole, useDismiss, useListNavigation, safePolygon, FloatingNode } from '@floating-ui/react';
import { useRef, useCallback, useState, useEffect } from 'react';
import 'clsx';
import { useControlled } from '../utils/useControlled.js';
import { useFloatingUI } from '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { MenuContext } from './MenuContext.js';

function MenuBase(props) {
  const {
    children,
    defaultOpen,
    open,
    onOpenChange,
    placement,
    getVirtualElement
  } = props;
  const parentId = useFloatingParentNodeId();
  const nodeId = useFloatingNodeId();
  const tree = useFloatingTree();
  const elementsRef = useRef([]);
  const [openState, setOpenState] = useControlled({
    controlled: open,
    default: Boolean(defaultOpen),
    name: "ListControl",
    state: "open"
  });
  const setOpen = useCallback(
    (newOpen) => {
      setOpenState(newOpen);
      onOpenChange == null ? void 0 : onOpenChange(newOpen);
    },
    [onOpenChange]
  );
  const [activeIndex, setActiveIndex] = useState(null);
  const [focusInside, setFocusInside] = useState(false);
  const isNested = parentId != null;
  const { x, y, strategy, elements, refs, context } = useFloatingUI({
    nodeId,
    open: openState,
    onOpenChange: setOpen,
    strategy: !getVirtualElement ? "absolute" : "fixed",
    placement: placement ?? (isNested || getVirtualElement ? "right-start" : "bottom-start"),
    middleware: [
      // Align the nested menu by shifting it by var(--salt-size-border)
      offset(
        isNested ? { crossAxis: -1, mainAxis: 2 } : !getVirtualElement ? 1 : 0
      ),
      flip({}),
      shift({ limiter: limitShift() }),
      size({
        apply({ elements: elements2, availableHeight }) {
          Object.assign(elements2.floating.style, {
            maxHeight: `${availableHeight}px`
          });
        }
      })
    ]
  });
  useIsomorphicLayoutEffect(() => {
    if (getVirtualElement) {
      refs.setPositionReference(getVirtualElement());
    }
  }, [getVirtualElement, refs]);
  const { getReferenceProps, getFloatingProps, getItemProps } = useInteractions(
    [
      useHover(context, {
        enabled: isNested && !focusInside,
        handleClose: safePolygon({ blockPointerEvents: true })
      }),
      useClick(context, {
        event: "mousedown",
        toggle: !isNested,
        ignoreMouse: isNested
      }),
      useRole(context, { role: "menu" }),
      useDismiss(context, { bubbles: true }),
      useListNavigation(context, {
        listRef: elementsRef,
        activeIndex,
        nested: isNested,
        onNavigate: setActiveIndex
      })
    ]
  );
  const getPanelPosition = () => {
    var _a, _b;
    return {
      top: y ?? 0,
      left: x ?? 0,
      position: strategy,
      width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
      height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight
    };
  };
  useEffect(() => {
    if (!tree) return;
    function handleItemClick() {
      setOpen(false);
    }
    tree.events.on("click", handleItemClick);
    return () => {
      tree.events.off("click", handleItemClick);
    };
  }, [tree, setOpen]);
  return /* @__PURE__ */ jsx(FloatingNode, { id: nodeId, children: /* @__PURE__ */ jsx(
    MenuContext.Provider,
    {
      value: {
        openState,
        getReferenceProps,
        getFloatingProps,
        refs,
        getPanelPosition,
        getItemProps,
        activeIndex,
        context,
        elementsRef,
        focusInside,
        setFocusInside,
        isNested
      },
      children
    }
  ) });
}

export { MenuBase };
//# sourceMappingURL=MenuBase.js.map
