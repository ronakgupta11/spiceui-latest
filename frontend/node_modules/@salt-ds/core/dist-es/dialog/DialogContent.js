import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useState, useRef, useCallback } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { useResizeObserver } from '../utils/useResizeObserver.js';
import css_248z from './DialogContent.css.js';

const withBaseName = makePrefixer("saltDialogContent");
const DialogContent = forwardRef(
  function DialogContent2(props, ref) {
    const { children, className, ...rest } = props;
    const [scrolledTop, setScrolledTop] = useState(false);
    const [scrolledBottom, setScrolledBottom] = useState(true);
    const [isOverflowing, setIsOverflowing] = useState(false);
    const divRef = useRef(null);
    const containerRef = useForkRef(divRef, ref);
    const handleScroll = () => {
      targetWindow == null ? void 0 : targetWindow.requestAnimationFrame(() => {
        const container = divRef.current;
        if (!container) return;
        setScrolledTop(container.scrollTop > 0);
        setScrolledBottom(
          container.scrollHeight - container.scrollTop - container.clientHeight !== 0
        );
      });
    };
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-dialog-content",
      css: css_248z,
      window: targetWindow
    });
    const checkOverflow = useCallback(() => {
      if (!divRef.current) return;
      setIsOverflowing(
        divRef.current.scrollHeight > divRef.current.offsetHeight
      );
    }, []);
    useResizeObserver({ ref: divRef, onResize: checkOverflow });
    useIsomorphicLayoutEffect(() => {
      checkOverflow();
    }, [checkOverflow]);
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(
        "div",
        {
          className: clsx({
            [withBaseName("scroll")]: isOverflowing && scrolledTop
          })
        }
      ),
      /* @__PURE__ */ jsx(
        "div",
        {
          className: clsx(
            withBaseName(),
            {
              [withBaseName("overflow")]: isOverflowing
            },
            className
          ),
          onScrollCapture: handleScroll,
          ...rest,
          ref: containerRef,
          children
        }
      ),
      /* @__PURE__ */ jsx(
        "div",
        {
          className: clsx({
            [withBaseName("scroll")]: isOverflowing && scrolledBottom
          })
        }
      )
    ] });
  }
);

export { DialogContent };
//# sourceMappingURL=DialogContent.js.map
