{"version":3,"file":"GridLayout.js","sources":["../src/grid-layout/GridLayout.tsx"],"sourcesContent":["import { clsx } from \"clsx\";\nimport { type ElementType, type ReactElement, forwardRef } from \"react\";\n\nimport {\n  type PolymorphicComponentPropWithRef,\n  type PolymorphicRef,\n  type ResponsiveProp,\n  makePrefixer,\n  resolveResponsiveValue,\n} from \"../utils\";\n\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { useBreakpoint } from \"../breakpoints\";\nimport { parseSpacing } from \"../flex-layout/parseSpacing\";\nimport gridLayoutCss from \"./GridLayout.css\";\n\nexport type GridLayoutProps<T extends ElementType> =\n  PolymorphicComponentPropWithRef<\n    T,\n    {\n      /**\n       * Number of columns to be displayed. Defaults to 12\n       */\n      columns?: ResponsiveProp<number | string>;\n      /**\n       * Number of rows to be displayed. Defaults to 1\n       */\n      rows?: ResponsiveProp<number | string>;\n      /**\n       * Defines the size of the gutter between the columns and the rows by setting a density multiplier. Defaults to 3\n       */\n      gap?: ResponsiveProp<number | string>;\n      /**\n       * Defines the size of the gutter between the columns by setting a density multiplier. Defaults to 1\n       */\n      columnGap?: ResponsiveProp<number | string>;\n      /**\n       * Defines the size of the gutter between the rows by setting a density multiplier. Defaults to 1\n       */\n      rowGap?: ResponsiveProp<number | string>;\n      /**\n       * Defines the margin around the component. It can be specified as a number (which acts as a multiplier) or a string representing the margin value. Default is `0`.\n       */\n      margin?: ResponsiveProp<number | string>;\n      /**\n       * Defines the padding within the component. It can be specified as a number (which acts as a multiplier) or a string representing the padding value. Default is `0`.\n       */\n      padding?: ResponsiveProp<number | string>;\n    }\n  >;\n\ntype GridLayoutComponent = <T extends ElementType = \"div\">(\n  props: GridLayoutProps<T>,\n) => ReactElement | null;\n\nconst withBaseName = makePrefixer(\"saltGridLayout\");\n\nfunction parseGridValue(value: number | string | undefined) {\n  if (value === undefined || typeof value === \"string\") {\n    return value;\n  }\n\n  return `repeat(${value}, 1fr)`;\n}\n\nexport const GridLayout: GridLayoutComponent = forwardRef(\n  <T extends ElementType = \"div\">(\n    {\n      as,\n      children,\n      className,\n      columns = 12,\n      rows = 1,\n      gap = 3,\n      margin = 0,\n      padding = 0,\n      columnGap,\n      rowGap,\n      style,\n      ...rest\n    }: GridLayoutProps<T>,\n    ref?: PolymorphicRef<T>,\n  ) => {\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-grid-layout\",\n      css: gridLayoutCss,\n      window: targetWindow,\n    });\n    const Component = as || \"div\";\n\n    const { matchedBreakpoints } = useBreakpoint();\n\n    const gridColumns = resolveResponsiveValue(columns, matchedBreakpoints);\n\n    const gridRows = resolveResponsiveValue(rows, matchedBreakpoints);\n\n    const gridGap = resolveResponsiveValue(gap, matchedBreakpoints);\n\n    const gridColumnGap = resolveResponsiveValue(columnGap, matchedBreakpoints);\n\n    const gridRowGap = resolveResponsiveValue(rowGap, matchedBreakpoints);\n    const gridMargin = resolveResponsiveValue(margin, matchedBreakpoints);\n    const gridPadding = resolveResponsiveValue(padding, matchedBreakpoints);\n    const gridLayoutStyles = {\n      \"--gridLayout-margin\": parseSpacing(gridMargin),\n      \"--gridLayout-padding\": parseSpacing(gridPadding),\n      ...style,\n      \"--gridLayout-columns\": parseGridValue(gridColumns),\n      \"--gridLayout-rows\": parseGridValue(gridRows),\n      \"--gridLayout-columnGap\": parseSpacing(gridColumnGap ?? gridGap),\n      \"--gridLayout-rowGap\": parseSpacing(gridRowGap ?? gridGap),\n    };\n\n    return (\n      <Component\n        className={clsx(withBaseName(), className)}\n        style={gridLayoutStyles}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n"],"names":["gridLayoutCss"],"mappings":";;;;;;;;;;;;;AAwDA,MAAM,YAAA,GAAe,aAAa,gBAAgB,CAAA;AAElD,SAAS,eAAe,KAAoC,EAAA;AAC1D,EAAA,IAAI,KAAU,KAAA,MAAA,IAAa,OAAO,KAAA,KAAU,QAAU,EAAA;AACpD,IAAO,OAAA,KAAA;AAAA;AAGT,EAAA,OAAO,UAAU,KAAK,CAAA,MAAA,CAAA;AACxB;AAEO,MAAM,UAAkC,GAAA,UAAA;AAAA,EAC7C,CACE;AAAA,IACE,EAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAA;AAAA,IACA,OAAU,GAAA,EAAA;AAAA,IACV,IAAO,GAAA,CAAA;AAAA,IACP,GAAM,GAAA,CAAA;AAAA,IACN,MAAS,GAAA,CAAA;AAAA,IACT,OAAU,GAAA,CAAA;AAAA,IACV,SAAA;AAAA,IACA,MAAA;AAAA,IACA,KAAA;AAAA,IACA,GAAG;AAAA,KAEL,GACG,KAAA;AACH,IAAA,MAAM,eAAe,SAAU,EAAA;AAC/B,IAAyB,wBAAA,CAAA;AAAA,MACvB,MAAQ,EAAA,kBAAA;AAAA,MACR,GAAK,EAAAA,QAAA;AAAA,MACL,MAAQ,EAAA;AAAA,KACT,CAAA;AACD,IAAA,MAAM,YAAY,EAAM,IAAA,KAAA;AAExB,IAAM,MAAA,EAAE,kBAAmB,EAAA,GAAI,aAAc,EAAA;AAE7C,IAAM,MAAA,WAAA,GAAc,sBAAuB,CAAA,OAAA,EAAS,kBAAkB,CAAA;AAEtE,IAAM,MAAA,QAAA,GAAW,sBAAuB,CAAA,IAAA,EAAM,kBAAkB,CAAA;AAEhE,IAAM,MAAA,OAAA,GAAU,sBAAuB,CAAA,GAAA,EAAK,kBAAkB,CAAA;AAE9D,IAAM,MAAA,aAAA,GAAgB,sBAAuB,CAAA,SAAA,EAAW,kBAAkB,CAAA;AAE1E,IAAM,MAAA,UAAA,GAAa,sBAAuB,CAAA,MAAA,EAAQ,kBAAkB,CAAA;AACpE,IAAM,MAAA,UAAA,GAAa,sBAAuB,CAAA,MAAA,EAAQ,kBAAkB,CAAA;AACpE,IAAM,MAAA,WAAA,GAAc,sBAAuB,CAAA,OAAA,EAAS,kBAAkB,CAAA;AACtE,IAAA,MAAM,gBAAmB,GAAA;AAAA,MACvB,qBAAA,EAAuB,aAAa,UAAU,CAAA;AAAA,MAC9C,sBAAA,EAAwB,aAAa,WAAW,CAAA;AAAA,MAChD,GAAG,KAAA;AAAA,MACH,sBAAA,EAAwB,eAAe,WAAW,CAAA;AAAA,MAClD,mBAAA,EAAqB,eAAe,QAAQ,CAAA;AAAA,MAC5C,wBAAA,EAA0B,YAAa,CAAA,aAAA,IAAiB,OAAO,CAAA;AAAA,MAC/D,qBAAA,EAAuB,YAAa,CAAA,UAAA,IAAc,OAAO;AAAA,KAC3D;AAEA,IACE,uBAAA,GAAA;AAAA,MAAC,SAAA;AAAA,MAAA;AAAA,QACC,SAAW,EAAA,IAAA,CAAK,YAAa,EAAA,EAAG,SAAS,CAAA;AAAA,QACzC,KAAO,EAAA,gBAAA;AAAA,QACP,GAAA;AAAA,QACC,GAAG,IAAA;AAAA,QAEH;AAAA;AAAA,KACH;AAAA;AAGN;;;;"}