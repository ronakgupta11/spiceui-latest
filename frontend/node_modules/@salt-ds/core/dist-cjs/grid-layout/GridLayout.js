'use strict';

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
var useResponsiveProp = require('../utils/useResponsiveProp.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var BreakpointProvider = require('../breakpoints/BreakpointProvider.js');
var parseSpacing = require('../flex-layout/parseSpacing.js');
var GridLayout$1 = require('./GridLayout.css.js');

const withBaseName = makePrefixer.makePrefixer("saltGridLayout");
function parseGridValue(value) {
  if (value === void 0 || typeof value === "string") {
    return value;
  }
  return `repeat(${value}, 1fr)`;
}
const GridLayout = React.forwardRef(
  ({
    as,
    children,
    className,
    columns = 12,
    rows = 1,
    gap = 3,
    margin = 0,
    padding = 0,
    columnGap,
    rowGap,
    style,
    ...rest
  }, ref) => {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-grid-layout",
      css: GridLayout$1,
      window: targetWindow
    });
    const Component = as || "div";
    const { matchedBreakpoints } = BreakpointProvider.useBreakpoint();
    const gridColumns = useResponsiveProp.resolveResponsiveValue(columns, matchedBreakpoints);
    const gridRows = useResponsiveProp.resolveResponsiveValue(rows, matchedBreakpoints);
    const gridGap = useResponsiveProp.resolveResponsiveValue(gap, matchedBreakpoints);
    const gridColumnGap = useResponsiveProp.resolveResponsiveValue(columnGap, matchedBreakpoints);
    const gridRowGap = useResponsiveProp.resolveResponsiveValue(rowGap, matchedBreakpoints);
    const gridMargin = useResponsiveProp.resolveResponsiveValue(margin, matchedBreakpoints);
    const gridPadding = useResponsiveProp.resolveResponsiveValue(padding, matchedBreakpoints);
    const gridLayoutStyles = {
      "--gridLayout-margin": parseSpacing.parseSpacing(gridMargin),
      "--gridLayout-padding": parseSpacing.parseSpacing(gridPadding),
      ...style,
      "--gridLayout-columns": parseGridValue(gridColumns),
      "--gridLayout-rows": parseGridValue(gridRows),
      "--gridLayout-columnGap": parseSpacing.parseSpacing(gridColumnGap ?? gridGap),
      "--gridLayout-rowGap": parseSpacing.parseSpacing(gridRowGap ?? gridGap)
    };
    return /* @__PURE__ */ jsxRuntime.jsx(
      Component,
      {
        className: clsx.clsx(withBaseName(), className),
        style: gridLayoutStyles,
        ref,
        ...rest,
        children
      }
    );
  }
);

exports.GridLayout = GridLayout;
//# sourceMappingURL=GridLayout.js.map
