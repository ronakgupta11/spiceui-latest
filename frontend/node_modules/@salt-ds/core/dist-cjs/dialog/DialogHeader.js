'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var StatusIndicator = require('../status-indicator/StatusIndicator.js');
var Text = require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
var Headings = require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var DialogContext = require('./DialogContext.js');
var DialogHeader$1 = require('./DialogHeader.css.js');

const withBaseName = makePrefixer.makePrefixer("saltDialogHeader");
const DialogHeader = React.forwardRef(
  function DialogHeader2(props, ref) {
    const {
      className,
      description,
      disableAccent,
      actions,
      header,
      preheader,
      status: statusProp,
      ...rest
    } = props;
    const { status: statusContext, id } = DialogContext.useDialogContext();
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-dialog-header",
      css: DialogHeader$1,
      window: targetWindow
    });
    const status = statusProp ?? statusContext;
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        id,
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("withAccent")]: !disableAccent && !status,
            [withBaseName(status ?? "")]: !!status
          },
          className
        ),
        ref,
        ...rest,
        children: [
          status && /* @__PURE__ */ jsxRuntime.jsx(StatusIndicator.StatusIndicator, { status }),
          /* @__PURE__ */ jsxRuntime.jsxs("div", { className: withBaseName("container"), children: [
            /* @__PURE__ */ jsxRuntime.jsxs(Headings.H2, { className: withBaseName("header"), children: [
              preheader && /* @__PURE__ */ jsxRuntime.jsx(Text.Text, { color: "primary", children: preheader }),
              header
            ] }),
            description && /* @__PURE__ */ jsxRuntime.jsx(Text.Text, { color: "secondary", className: withBaseName("description"), children: description })
          ] }),
          actions && /* @__PURE__ */ jsxRuntime.jsx("div", { className: withBaseName("actionsContainer"), children: actions })
        ]
      }
    );
  }
);

exports.DialogHeader = DialogHeader;
//# sourceMappingURL=DialogHeader.js.map
