'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var Text = require('../../text/Text.js');
require('../../text/Code.js');
require('../../text/Display.js');
require('../../text/Headings.js');
require('../../text/Label.js');
require('../../text/TextAction.js');
require('../../text/TextNotation.js');
var makePrefixer = require('../../utils/makePrefixer.js');
require('../../utils/useFloatingUI/useFloatingUI.js');
require('../../utils/useId.js');
require('../../salt-provider/SaltProvider.js');
require('../../viewport/ViewportProvider.js');
var SliderTrack$1 = require('./SliderTrack.css.js');
var utils = require('./utils.js');

const withBaseName = makePrefixer.makePrefixer("saltSliderTrack");
const SliderTrack = React.forwardRef(
  function SliderTrack2({
    children,
    className,
    constrainLabelPosition = false,
    disabled,
    showTicks,
    format,
    handlePointerDown,
    isDragging,
    isRange = false,
    marks,
    max,
    maxLabel,
    min,
    minLabel,
    progressPercentage = 0,
    progressPercentageRange = [0, 0],
    sliderRef,
    ...rest
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-slider-track",
      css: SliderTrack$1,
      window: targetWindow
    });
    const checkIsMarkSelected = (value) => {
      const markPercentage = utils.calculatePercentage(value, max, min);
      if (isRange) {
        return markPercentage > progressPercentageRange[0] && markPercentage < progressPercentageRange[1];
      }
      return markPercentage < progressPercentage;
    };
    const checkIsMarkOverlapped = (value) => {
      const markPercentage = utils.calculatePercentage(value, max, min);
      if (isRange) {
        return markPercentage === progressPercentageRange[0] || markPercentage === progressPercentageRange[1];
      }
      return markPercentage === progressPercentage;
    };
    const hasMinTick = () => {
      return (marks == null ? void 0 : marks.some((mark) => mark.value === min)) || false;
    };
    const hasMaxTick = () => {
      return (marks == null ? void 0 : marks.some((mark) => mark.value === max)) || false;
    };
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        className: clsx.clsx(withBaseName(), className, {
          [withBaseName("disabled")]: disabled,
          [withBaseName("dragging")]: isDragging,
          [withBaseName("range")]: isRange,
          [withBaseName("withMarks")]: marks,
          [withBaseName("constrainLabelPosition")]: constrainLabelPosition,
          [withBaseName("withTicks")]: showTicks
        }),
        "data-testid": "sliderTrack",
        ref,
        ...rest,
        children: /* @__PURE__ */ jsxRuntime.jsxs("div", { className: clsx.clsx(withBaseName("container")), children: [
          minLabel && /* @__PURE__ */ jsxRuntime.jsx(
            Text.Text,
            {
              "aria-hidden": true,
              className: withBaseName("minLabel"),
              color: "secondary",
              disabled,
              styleAs: "label",
              children: minLabel || (format == null ? void 0 : format(min))
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsxs(
            "div",
            {
              onPointerDown: handlePointerDown,
              className: withBaseName("wrapper"),
              children: [
                /* @__PURE__ */ jsxRuntime.jsxs(
                  "div",
                  {
                    className: clsx.clsx(withBaseName("rail"), {
                      [withBaseName("hasMinTick")]: hasMinTick() && showTicks,
                      [withBaseName("hasMaxTick")]: hasMaxTick() && showTicks
                    }),
                    ref: sliderRef,
                    style: {
                      ...progressPercentage !== void 0 && {
                        "--slider-progressPercentage": `${progressPercentage}%`
                      },
                      ...(progressPercentageRange == null ? void 0 : progressPercentageRange[0]) !== void 0 && {
                        "--slider-progressPercentageStart": `${progressPercentageRange[0]}%`
                      },
                      ...(progressPercentageRange == null ? void 0 : progressPercentageRange[1]) !== void 0 && {
                        "--slider-progressPercentageEnd": `${progressPercentageRange[1]}%`
                      }
                    },
                    children: [
                      isRange && /* @__PURE__ */ jsxRuntime.jsx("div", { className: clsx.clsx(withBaseName("fill")) }),
                      children
                    ]
                  }
                ),
                marks && showTicks && /* @__PURE__ */ jsxRuntime.jsx("div", { className: withBaseName("ticks"), children: marks.map(({ value }) => /* @__PURE__ */ jsxRuntime.jsx(
                  "span",
                  {
                    style: {
                      left: `${utils.calculateMarkPosition(value, max, min)}%`
                    },
                    className: clsx.clsx(
                      withBaseName("tick"),
                      {
                        [withBaseName("tickSelected")]: checkIsMarkSelected(value)
                      },
                      {
                        [withBaseName("tickHidden")]: checkIsMarkOverlapped(value)
                      }
                    )
                  },
                  `${value}-tick`
                )) }),
                marks && /* @__PURE__ */ jsxRuntime.jsx("div", { className: withBaseName("marks"), children: marks.map(({ label, value }) => /* @__PURE__ */ jsxRuntime.jsx(
                  "span",
                  {
                    "data-testid": "mark",
                    className: withBaseName("markLabel"),
                    style: {
                      left: `${utils.calculateMarkPosition(value, max, min)}%`
                    },
                    children: label
                  },
                  `${value}-mark`
                )) })
              ]
            }
          ),
          maxLabel && /* @__PURE__ */ jsxRuntime.jsx(
            Text.Text,
            {
              "aria-hidden": true,
              className: withBaseName("maxLabel"),
              color: "secondary",
              disabled,
              styleAs: "label",
              children: maxLabel || (format == null ? void 0 : format(max))
            }
          )
        ] })
      }
    );
  }
);

exports.SliderTrack = SliderTrack;
//# sourceMappingURL=SliderTrack.js.map
