'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var BreakpointProvider = require('../breakpoints/BreakpointProvider.js');
var FlexLayout = require('../flex-layout/FlexLayout.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
var useResponsiveProp = require('../utils/useResponsiveProp.js');
var StackLayout$1 = require('./StackLayout.css.js');

const withBaseName = makePrefixer.makePrefixer("saltStackLayout");
function parseSpacing(value) {
  if (value === void 0 || typeof value === "string") {
    return value;
  }
  return `calc(var(--salt-spacing-100) * ${value})`;
}
const StackLayout = React.forwardRef(
  ({
    children,
    className,
    direction = "column",
    gap = 3,
    separators,
    style,
    ...rest
  }, ref) => {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-stack-layout",
      css: StackLayout$1,
      window: targetWindow
    });
    const { matchedBreakpoints } = BreakpointProvider.useBreakpoint();
    const flexGap = useResponsiveProp.resolveResponsiveValue(gap, matchedBreakpoints);
    const separatorAlignment = separators === true ? "center" : separators;
    const flexDirection = useResponsiveProp.resolveResponsiveValue(direction, matchedBreakpoints);
    const stackLayoutStyles = {
      ...style,
      "--stackLayout-gap": parseSpacing(flexGap)
    };
    return /* @__PURE__ */ jsxRuntime.jsx(
      FlexLayout.FlexLayout,
      {
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName(flexDirection ?? "")]: flexDirection,
            [withBaseName("separator")]: !!separatorAlignment,
            [separatorAlignment ? withBaseName(`separator-${separatorAlignment}`) : ""]: separatorAlignment
          },
          className
        ),
        ref,
        direction,
        style: stackLayoutStyles,
        wrap: false,
        gap: flexGap,
        ...rest,
        children
      }
    );
  }
);

exports.StackLayout = StackLayout;
//# sourceMappingURL=StackLayout.js.map
