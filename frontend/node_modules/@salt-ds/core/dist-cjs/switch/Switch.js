'use strict';

var jsxRuntime = require('react/jsx-runtime');
var icons = require('@salt-ds/icons');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
var SaltProvider = require('../salt-provider/SaltProvider.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../viewport/ViewportProvider.js');
var Switch$1 = require('./Switch.css.js');

const withBaseName = makePrefixer.makePrefixer("saltSwitch");
function CheckedIcon(props) {
  const density = SaltProvider.useDensity();
  return density === "high" ? /* @__PURE__ */ jsxRuntime.jsx(icons.SuccessSmallSolidIcon, { ...props }) : /* @__PURE__ */ jsxRuntime.jsx(icons.SuccessSolidIcon, { ...props });
}
const Switch = React.forwardRef(
  function Switch2(props, ref) {
    const {
      checked: checkedProp,
      className,
      defaultChecked,
      disabled: disabledProp,
      inputProps = {},
      label,
      name,
      onBlur,
      onChange,
      onFocus,
      value,
      ...rest
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-switch",
      css: Switch$1,
      window: targetWindow
    });
    const {
      "aria-describedby": inputDescribedBy,
      "aria-labelledby": inputLabelledBy,
      className: inputClassName,
      onChange: inputOnChange,
      ...restInputProps
    } = inputProps;
    const [checked, setChecked] = useControlled.useControlled({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "Switch",
      state: "checked"
    });
    const { a11yProps: formFieldA11yProps, disabled: formFieldDisabled } = useFormFieldProps.useFormFieldProps();
    const disabled = formFieldDisabled || disabledProp;
    const handleChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const value2 = event.target.checked;
      setChecked(value2);
      onChange == null ? void 0 : onChange(event);
      inputOnChange == null ? void 0 : inputOnChange(event);
    };
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "label",
      {
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("disabled")]: disabled,
            [withBaseName("checked")]: checked
          },
          className
        ),
        ref,
        ...rest,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            "input",
            {
              "aria-describedby": clsx.clsx(
                formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-describedby"],
                inputDescribedBy
              ),
              "aria-labelledby": clsx.clsx(
                formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-labelledby"],
                inputLabelledBy
              ),
              name,
              value,
              checked,
              className: clsx.clsx(withBaseName("input"), inputClassName),
              defaultChecked,
              disabled,
              onBlur,
              onChange: handleChange,
              onFocus,
              type: "checkbox",
              role: "switch",
              ...restInputProps
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx("span", { className: withBaseName("track"), children: /* @__PURE__ */ jsxRuntime.jsx("span", { className: withBaseName("thumb"), children: checked && /* @__PURE__ */ jsxRuntime.jsx(CheckedIcon, { "aria-hidden": true, className: withBaseName("icon") }) }) }),
          label && /* @__PURE__ */ jsxRuntime.jsx("span", { className: withBaseName("label"), children: label })
        ]
      }
    );
  }
);

exports.Switch = Switch;
//# sourceMappingURL=Switch.js.map
