import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef, isValidElement, cloneElement } from 'react';
import '../status-indicator/StatusIndicator.js';
import { VALIDATION_NAMED_STATUS } from '../status-indicator/ValidationStatus.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { mergeProps } from '../utils/mergeProps.js';
import { useFloatingComponent } from '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { getRefFromChildren } from '../utils/getRefFromChildren.js';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { TooltipBase } from './TooltipBase.js';
import { useTooltip } from './useTooltip.js';

const withBaseName = makePrefixer("saltTooltip");
const Tooltip = forwardRef(
  function Tooltip2(props, ref) {
    const {
      children,
      className,
      disabled: disabledProp = false,
      hideArrow = false,
      hideIcon = false,
      open: openProp,
      content,
      status: statusProp,
      placement = "right",
      enterDelay = 300,
      leaveDelay = 0,
      ...rest
    } = props;
    const {
      disabled: formFieldDisabled,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps();
    const disabled = disabledProp || formFieldDisabled;
    const status = statusProp ?? (formFieldValidationStatus !== void 0 && VALIDATION_NAMED_STATUS.includes(formFieldValidationStatus) ? formFieldValidationStatus : void 0);
    const { Component: FloatingComponent } = useFloatingComponent();
    const hookProps = {
      open: openProp,
      disabled,
      placement,
      enterDelay,
      leaveDelay,
      ...rest
    };
    const {
      arrowProps,
      open,
      floating,
      reference,
      getTriggerProps,
      getTooltipProps,
      getTooltipPosition
    } = useTooltip(hookProps);
    const triggerRef = useForkRef(getRefFromChildren(children), reference);
    const floatingRef = useForkRef(floating, ref);
    const hasContent = content !== void 0 && content !== "";
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      isValidElement(children) && cloneElement(children, {
        ...mergeProps(getTriggerProps(), children.props),
        ref: triggerRef
      }),
      /* @__PURE__ */ jsx(
        FloatingComponent,
        {
          className: clsx(
            withBaseName(),
            { [withBaseName(status ?? "")]: status },
            className
          ),
          open: open && !disabled && hasContent,
          ...getTooltipProps(),
          ref: floatingRef,
          ...getTooltipPosition(),
          children: /* @__PURE__ */ jsx(
            TooltipBase,
            {
              hideIcon,
              status,
              content,
              hideArrow,
              arrowProps
            }
          )
        }
      )
    ] });
  }
);

export { Tooltip };
//# sourceMappingURL=Tooltip.js.map
