import { jsx } from 'react/jsx-runtime';
import { createContext, useContext, useState } from 'react';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';

const ViewportContext = createContext(null);
const ViewportProvider = ({ children }) => {
  const existingViewport = useContext(ViewportContext);
  const [viewport, setViewport] = useState(existingViewport);
  const noExistingViewport = existingViewport === null;
  const viewportValue = existingViewport || viewport || 0;
  useIsomorphicLayoutEffect(() => {
    let observer = null;
    if (noExistingViewport) {
      observer = new ResizeObserver(
        (observerEntries) => {
          setViewport(observerEntries[0].contentRect.width);
        }
      );
      observer.observe(document.body);
      setViewport(document.body.getBoundingClientRect().width);
    }
    return () => {
      if (observer) {
        observer.disconnect();
      }
    };
  }, [noExistingViewport]);
  return /* @__PURE__ */ jsx(ViewportContext.Provider, { value: viewportValue, children });
};
const useViewport = () => {
  const value = useContext(ViewportContext);
  return value === null ? 0 : value;
};

export { ViewportContext, ViewportProvider, useViewport };
//# sourceMappingURL=ViewportProvider.js.map
