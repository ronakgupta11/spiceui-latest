'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
var useIsomorphicLayoutEffect = require('../utils/useIsomorphicLayoutEffect.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var useResizeObserver = require('../utils/useResizeObserver.js');
var DialogContent$1 = require('./DialogContent.css.js');

const withBaseName = makePrefixer.makePrefixer("saltDialogContent");
const DialogContent = React.forwardRef(
  function DialogContent2(props, ref) {
    const { children, className, ...rest } = props;
    const [scrolledTop, setScrolledTop] = React.useState(false);
    const [scrolledBottom, setScrolledBottom] = React.useState(true);
    const [isOverflowing, setIsOverflowing] = React.useState(false);
    const divRef = React.useRef(null);
    const containerRef = useForkRef.useForkRef(divRef, ref);
    const handleScroll = () => {
      targetWindow == null ? void 0 : targetWindow.requestAnimationFrame(() => {
        const container = divRef.current;
        if (!container) return;
        setScrolledTop(container.scrollTop > 0);
        setScrolledBottom(
          container.scrollHeight - container.scrollTop - container.clientHeight !== 0
        );
      });
    };
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-dialog-content",
      css: DialogContent$1,
      window: targetWindow
    });
    const checkOverflow = React.useCallback(() => {
      if (!divRef.current) return;
      setIsOverflowing(
        divRef.current.scrollHeight > divRef.current.offsetHeight
      );
    }, []);
    useResizeObserver.useResizeObserver({ ref: divRef, onResize: checkOverflow });
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
      checkOverflow();
    }, [checkOverflow]);
    return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
      /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: clsx.clsx({
            [withBaseName("scroll")]: isOverflowing && scrolledTop
          })
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: clsx.clsx(
            withBaseName(),
            {
              [withBaseName("overflow")]: isOverflowing
            },
            className
          ),
          onScrollCapture: handleScroll,
          ...rest,
          ref: containerRef,
          children
        }
      ),
      /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: clsx.clsx({
            [withBaseName("scroll")]: isOverflowing && scrolledBottom
          })
        }
      )
    ] });
  }
);

exports.DialogContent = DialogContent;
//# sourceMappingURL=DialogContent.js.map
