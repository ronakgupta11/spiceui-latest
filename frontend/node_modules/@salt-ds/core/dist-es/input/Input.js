import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useState } from 'react';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { StatusAdornment } from '../status-adornment/StatusAdornment.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './Input.css.js';

const withBaseName = makePrefixer("saltInput");
const Input = forwardRef(function Input2({
  "aria-activedescendant": ariaActiveDescendant,
  "aria-expanded": ariaExpanded,
  "aria-owns": ariaOwns,
  className: classNameProp,
  disabled,
  emptyReadOnlyMarker = "\u2014",
  endAdornment,
  id,
  inputProps = {},
  inputRef,
  placeholder,
  readOnly: readOnlyProp,
  role,
  startAdornment,
  style,
  textAlign = "left",
  value: valueProp,
  defaultValue: defaultValueProp = valueProp === void 0 ? "" : void 0,
  validationStatus: validationStatusProp,
  variant = "primary",
  bordered = false,
  ...other
}, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-input",
    css: css_248z,
    window: targetWindow
  });
  const {
    a11yProps: {
      "aria-describedby": formFieldDescribedBy,
      "aria-labelledby": formFieldLabelledBy
    } = {},
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    necessity: formFieldRequired,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps();
  const restA11yProps = {
    "aria-activedescendant": ariaActiveDescendant,
    "aria-expanded": ariaExpanded,
    "aria-owns": ariaOwns
  };
  const isDisabled = disabled || formFieldDisabled;
  const isReadOnly = readOnlyProp || formFieldReadOnly;
  const validationStatus = formFieldValidationStatus ?? validationStatusProp;
  const [focused, setFocused] = useState(false);
  const isEmptyReadOnly = isReadOnly && !defaultValueProp && !valueProp;
  const defaultValue = isEmptyReadOnly ? emptyReadOnlyMarker : defaultValueProp;
  const {
    "aria-describedby": inputDescribedBy,
    "aria-labelledby": inputLabelledBy,
    onBlur,
    onChange,
    onFocus,
    required: inputPropsRequired,
    ...restInputProps
  } = inputProps;
  const isRequired = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : inputPropsRequired;
  const [value, setValue] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "Input",
    state: "value"
  });
  const handleChange = (event) => {
    const value2 = event.target.value;
    setValue(value2);
    onChange == null ? void 0 : onChange(event);
  };
  const handleBlur = (event) => {
    onBlur == null ? void 0 : onBlur(event);
    setFocused(false);
  };
  const handleFocus = (event) => {
    onFocus == null ? void 0 : onFocus(event);
    setFocused(true);
  };
  const inputStyle = {
    "--input-textAlign": textAlign,
    ...style
  };
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: clsx(
        withBaseName(),
        withBaseName(variant),
        {
          [withBaseName("focused")]: !isDisabled && focused,
          [withBaseName("disabled")]: isDisabled,
          [withBaseName("readOnly")]: isReadOnly,
          [withBaseName(validationStatus || "")]: validationStatus,
          [withBaseName("bordered")]: bordered
        },
        classNameProp
      ),
      ref,
      style: inputStyle,
      ...other,
      children: [
        startAdornment && /* @__PURE__ */ jsx("div", { className: withBaseName("startAdornmentContainer"), children: startAdornment }),
        /* @__PURE__ */ jsx(
          "input",
          {
            "aria-describedby": clsx(formFieldDescribedBy, inputDescribedBy),
            "aria-labelledby": clsx(formFieldLabelledBy, inputLabelledBy),
            className: clsx(withBaseName("input"), inputProps == null ? void 0 : inputProps.className),
            disabled: isDisabled,
            id,
            readOnly: isReadOnly,
            ref: inputRef,
            role,
            tabIndex: isDisabled ? -1 : 0,
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: !isDisabled ? handleFocus : void 0,
            placeholder,
            value,
            ...restA11yProps,
            ...restInputProps,
            required: isRequired
          }
        ),
        !isDisabled && validationStatus && /* @__PURE__ */ jsx(StatusAdornment, { status: validationStatus }),
        endAdornment && /* @__PURE__ */ jsx("div", { className: withBaseName("endAdornmentContainer"), children: endAdornment }),
        /* @__PURE__ */ jsx("div", { className: withBaseName("activationIndicator") })
      ]
    }
  );
});

export { Input };
//# sourceMappingURL=Input.js.map
