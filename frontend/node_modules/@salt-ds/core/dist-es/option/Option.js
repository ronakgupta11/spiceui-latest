import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useRef, useMemo, useEffect } from 'react';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import { CheckboxIcon } from '../checkbox/CheckboxIcon.js';
import { useListControlContext } from '../list-control/ListControlContext.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import { useId } from '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './Option.css.js';

const withBaseName = makePrefixer("saltOption");
const Option = forwardRef(
  function Option2(props, ref) {
    const {
      className,
      children,
      disabled: disabledProp,
      onClick,
      id: idProp,
      value,
      ...rest
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-option",
      css: css_248z,
      window: targetWindow
    });
    const optionRef = useRef(null);
    const id = useId(idProp);
    const {
      setActive,
      activeState,
      multiselect,
      select,
      register,
      selectedState,
      focusVisibleState,
      valueToString,
      disabled: listDisabled
    } = useListControlContext();
    const disabled = disabledProp || listDisabled;
    const selected = selectedState.includes(value);
    const active = (activeState == null ? void 0 : activeState.id) === id;
    const optionValue = useMemo(
      () => ({
        id: String(id),
        disabled: Boolean(disabled),
        value
      }),
      [id, disabled, value]
    );
    const handleClick = (event) => {
      if (disabled || id === void 0) {
        return;
      }
      setActive(optionValue);
      select(event, optionValue);
      onClick == null ? void 0 : onClick(event);
    };
    const handleMouseOver = () => {
      setActive(optionValue);
    };
    useEffect(() => {
      if (id && optionRef.current) {
        return register(optionValue, optionRef.current);
      }
    }, [optionValue, id, register]);
    const handleRef = useForkRef(optionRef, ref);
    return /* @__PURE__ */ jsxs(
      "div",
      {
        "aria-disabled": disabled ? "true" : void 0,
        "aria-selected": selected,
        className: clsx(
          withBaseName(),
          {
            [withBaseName("active")]: active,
            [withBaseName("focusVisible")]: focusVisibleState && active
          },
          className
        ),
        ref: handleRef,
        role: "option",
        id,
        onClick: handleClick,
        onMouseOver: handleMouseOver,
        ...rest,
        children: [
          multiselect && /* @__PURE__ */ jsx(CheckboxIcon, { checked: selected, disabled }),
          children ?? valueToString(value)
        ]
      }
    );
  }
);

export { Option };
//# sourceMappingURL=Option.js.map
