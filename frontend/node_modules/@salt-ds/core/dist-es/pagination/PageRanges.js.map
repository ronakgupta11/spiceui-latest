{"version":3,"file":"PageRanges.js","sources":["../src/pagination/PageRanges.tsx"],"sourcesContent":["import { type ReactElement, useCallback } from \"react\";\nimport { makePrefixer } from \"../utils\";\nimport { PageButton } from \"./PageButton\";\nimport { type PageRange, usePagination } from \"./usePagination\";\nimport { usePaginationContext } from \"./usePaginationContext\";\n\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\n\nimport pageRangesCss from \"./PageRanges.css\";\n\nconst withBaseName = makePrefixer(\"saltPageRanges\");\n\nexport interface PageRangesProps {\n  boundaryCount?: number;\n  siblingCount?: number;\n}\n\nconst Ellipsis = () => {\n  return <div className={withBaseName(\"ellipsis\")}>{\"\\u2026\"}</div>;\n};\n\nconst mapRange = (range: PageRange, fn: (i: number) => ReactElement) => {\n  const result: ReactElement[] = [];\n  for (let i = range[0]; i <= range[1]; ++i) {\n    result.push(fn(i));\n  }\n  return result;\n};\n\nexport function PageRanges({\n  siblingCount = 2,\n  boundaryCount = 1,\n}: PageRangesProps) {\n  const targetWindow = useWindow();\n  useComponentCssInjection({\n    testId: \"salt-page-ranges\",\n    css: pageRangesCss,\n    window: targetWindow,\n  });\n\n  const { count, page } = usePaginationContext();\n\n  const renderPages = useCallback(\n    (range: PageRange) =>\n      mapRange(range, (i) => (\n        <PageButton key={i} page={i} selected={page === i} />\n      )),\n    [page],\n  );\n\n  const [leftPages, middlePages, rightPages] = usePagination(\n    page,\n    count,\n    Math.max(1, boundaryCount),\n    siblingCount,\n  );\n\n  return (\n    <>\n      {leftPages && (\n        <>\n          {renderPages(leftPages)}\n          <Ellipsis />\n        </>\n      )}\n      {middlePages && renderPages(middlePages)}\n      {rightPages && (\n        <>\n          <Ellipsis />\n          {renderPages(rightPages)}\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["pageRangesCss"],"mappings":";;;;;;;;;;;;;;;AAWA,MAAM,YAAA,GAAe,aAAa,gBAAgB,CAAA;AAOlD,MAAM,WAAW,MAAM;AACrB,EAAA,2BAAQ,KAAI,EAAA,EAAA,SAAA,EAAW,YAAa,CAAA,UAAU,GAAI,QAAS,EAAA,QAAA,EAAA,CAAA;AAC7D,CAAA;AAEA,MAAM,QAAA,GAAW,CAAC,KAAA,EAAkB,EAAoC,KAAA;AACtE,EAAA,MAAM,SAAyB,EAAC;AAChC,EAAS,KAAA,IAAA,CAAA,GAAI,MAAM,CAAC,CAAA,EAAG,KAAK,KAAM,CAAA,CAAC,CAAG,EAAA,EAAE,CAAG,EAAA;AACzC,IAAO,MAAA,CAAA,IAAA,CAAK,EAAG,CAAA,CAAC,CAAC,CAAA;AAAA;AAEnB,EAAO,OAAA,MAAA;AACT,CAAA;AAEO,SAAS,UAAW,CAAA;AAAA,EACzB,YAAe,GAAA,CAAA;AAAA,EACf,aAAgB,GAAA;AAClB,CAAoB,EAAA;AAClB,EAAA,MAAM,eAAe,SAAU,EAAA;AAC/B,EAAyB,wBAAA,CAAA;AAAA,IACvB,MAAQ,EAAA,kBAAA;AAAA,IACR,GAAK,EAAAA,QAAA;AAAA,IACL,MAAQ,EAAA;AAAA,GACT,CAAA;AAED,EAAA,MAAM,EAAE,KAAA,EAAO,IAAK,EAAA,GAAI,oBAAqB,EAAA;AAE7C,EAAA,MAAM,WAAc,GAAA,WAAA;AAAA,IAClB,CAAC,KAAA,KACC,QAAS,CAAA,KAAA,EAAO,CAAC,CACf,qBAAA,GAAA,CAAC,UAAmB,EAAA,EAAA,IAAA,EAAM,CAAG,EAAA,QAAA,EAAU,IAAS,KAAA,CAAA,EAAA,EAA/B,CAAkC,CACpD,CAAA;AAAA,IACH,CAAC,IAAI;AAAA,GACP;AAEA,EAAA,MAAM,CAAC,SAAA,EAAW,WAAa,EAAA,UAAU,CAAI,GAAA,aAAA;AAAA,IAC3C,IAAA;AAAA,IACA,KAAA;AAAA,IACA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,aAAa,CAAA;AAAA,IACzB;AAAA,GACF;AAEA,EAAA,uBAEK,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,IAAA,SAAA,oBAEI,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,MAAA,WAAA,CAAY,SAAS,CAAA;AAAA,0BACrB,QAAS,EAAA,EAAA;AAAA,KACZ,EAAA,CAAA;AAAA,IAED,WAAA,IAAe,YAAY,WAAW,CAAA;AAAA,IACtC,8BAEG,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,sBAAA,GAAA,CAAC,QAAS,EAAA,EAAA,CAAA;AAAA,MACT,YAAY,UAAU;AAAA,KACzB,EAAA;AAAA,GAEJ,EAAA,CAAA;AAEJ;;;;"}