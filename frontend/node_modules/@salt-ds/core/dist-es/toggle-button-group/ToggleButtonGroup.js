import { jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useRef, useState, useCallback, useMemo } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './ToggleButtonGroup.css.js';
import { ToggleButtonGroupContext } from './ToggleButtonGroupContext.js';

const withBaseName = makePrefixer("saltToggleButtonGroup");
const ToggleButtonGroup = forwardRef(function ToggleButtonGroup2(props, ref) {
  const {
    appearance,
    children,
    className,
    value: valueProp,
    defaultValue,
    disabled,
    onChange,
    onKeyDown,
    orientation = "horizontal",
    readOnly,
    sentiment,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-toggle-button-group",
    css: css_248z,
    window: targetWindow
  });
  const groupRef = useRef(null);
  const handleRef = useForkRef(ref, groupRef);
  const [value, setValue] = useControlled({
    default: defaultValue,
    controlled: valueProp,
    name: "ToggleButtonGroup",
    state: "value"
  });
  const [focused, setFocused] = useState(value);
  const select = useCallback(
    (event) => {
      const newValue = event.currentTarget.value;
      setValue(newValue);
      if (value !== newValue) {
        onChange == null ? void 0 : onChange(event);
      }
    },
    [onChange, value]
  );
  const isSelected = useCallback(
    (id) => {
      return value === id;
    },
    [value]
  );
  const focus = useCallback((id) => {
    setFocused(id);
  }, []);
  const isFocused = useCallback(
    (id) => {
      return focused === id || !focused;
    },
    [focused]
  );
  const contextValue = useMemo(
    () => ({
      appearance,
      disabled,
      focus,
      isFocused,
      isSelected,
      orientation,
      readOnly,
      select,
      sentiment
    }),
    [
      appearance,
      disabled,
      focus,
      isFocused,
      isSelected,
      orientation,
      readOnly,
      select,
      sentiment
    ]
  );
  const handleKeyDown = (event) => {
    var _a, _b, _c;
    const elements = Array.from(
      ((_a = groupRef.current) == null ? void 0 : _a.querySelectorAll("button:not([disabled])")) ?? []
    );
    const currentIndex = elements.findIndex(
      (element) => element === document.activeElement
    );
    switch (event.key) {
      case "ArrowDown":
      case "ArrowRight":
        (_b = elements[(currentIndex + 1) % elements.length]) == null ? void 0 : _b.focus();
        break;
      case "ArrowUp":
      case "ArrowLeft":
        (_c = elements[(currentIndex - 1 + elements.length) % elements.length]) == null ? void 0 : _c.focus();
        break;
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  return /* @__PURE__ */ jsx(ToggleButtonGroupContext.Provider, { value: contextValue, children: /* @__PURE__ */ jsx(
    "div",
    {
      "aria-disabled": disabled,
      "aria-readonly": readOnly,
      className: clsx(
        withBaseName(),
        withBaseName(orientation),
        disabled && withBaseName("disabled"),
        readOnly && withBaseName("readOnly"),
        className
      ),
      role: "radiogroup",
      ref: handleRef,
      onKeyDown: handleKeyDown,
      ...rest,
      children
    }
  ) });
});

export { ToggleButtonGroup };
//# sourceMappingURL=ToggleButtonGroup.js.map
