import { jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef, useState, useRef } from 'react';
import { extractFiles, containsFiles } from './internal/utils.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './FileDropZone.css.js';

const withBaseName = makePrefixer("saltFileDropZone");
const FileDropZone = forwardRef(
  function FileDropZone2({
    status,
    className,
    children,
    disabled,
    onDragOver,
    onDragLeave,
    onDrop,
    ...restProps
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-file-drop-zone",
      css: css_248z,
      window: targetWindow
    });
    const [isActive, setActive] = useState(false);
    const regionRef = useRef(null);
    const handleRef = useForkRef(ref, regionRef);
    const handleDragOver = (event) => {
      event.preventDefault();
      event.stopPropagation();
      if (disabled) {
        if (event.dataTransfer) {
          event.dataTransfer.dropEffect = "none";
        }
        return;
      }
      if (event.dataTransfer) {
        event.dataTransfer.dropEffect = "copy";
      }
      if (!isActive && containsFiles(event)) {
        setActive(true);
      }
      onDragOver == null ? void 0 : onDragOver(event);
    };
    const handleDragLeave = (event) => {
      if (disabled) {
        return;
      }
      const region = regionRef == null ? void 0 : regionRef.current;
      const eventTarget = event.relatedTarget;
      if (eventTarget !== region && !(region == null ? void 0 : region.contains(eventTarget))) {
        setActive(false);
      }
      onDragLeave == null ? void 0 : onDragLeave(event);
    };
    const handleDrop = (event) => {
      if (disabled) {
        return;
      }
      event.preventDefault();
      const files = extractFiles(event);
      setActive(false);
      onDrop == null ? void 0 : onDrop(event, files);
    };
    return /* @__PURE__ */ jsx(
      "div",
      {
        className: clsx(
          withBaseName(),
          {
            [withBaseName(status)]: status,
            [withBaseName("active")]: isActive,
            [withBaseName("disabled")]: disabled
          },
          className
        ),
        "aria-disabled": disabled,
        onDragLeave: handleDragLeave,
        onDragOver: handleDragOver,
        onDrop: handleDrop,
        ref: handleRef,
        ...restProps,
        children
      }
    );
  }
);

export { FileDropZone };
//# sourceMappingURL=FileDropZone.js.map
