import { jsxs, jsx } from 'react/jsx-runtime';
import { useListItem, useFloatingTree } from '@floating-ui/react';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { useIcon } from '../semantic-icon-provider/SemanticIconProvider.js';
import css_248z from './MenuItem.css.js';
import { useMenuPanelContext } from './MenuPanelContext.js';
import { useIsMenuTrigger } from './MenuTriggerContext.js';

const withBaseName = makePrefixer("saltMenuItem");
const MenuItem = forwardRef(
  function MenuItem2(props, ref) {
    const {
      children,
      className,
      disabled,
      onClick,
      onFocus,
      onKeyDown,
      ...rest
    } = props;
    const { triggersSubmenu, blurActive } = useIsMenuTrigger();
    const { ExpandGroupIcon } = useIcon();
    const { activeIndex, getItemProps, setFocusInside } = useMenuPanelContext();
    const item = useListItem();
    const tree = useFloatingTree();
    const active = item.index === activeIndex;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-menu-item",
      css: css_248z,
      window: targetWindow
    });
    const handleRef = useForkRef(ref, item.ref);
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: clsx(
          withBaseName(),
          {
            [withBaseName("blurActive")]: blurActive
          },
          className
        ),
        role: "menuitem",
        "aria-disabled": disabled || void 0,
        ...getItemProps({
          tabIndex: disabled ? void 0 : active ? 0 : -1,
          onKeyDown(event) {
            const element = event.currentTarget;
            onKeyDown == null ? void 0 : onKeyDown(event);
            if ((event.key === " " || event.key === "Enter") && !triggersSubmenu && !disabled) {
              event.preventDefault();
              const { view, ...eventInit } = event;
              queueMicrotask(() => {
                element.dispatchEvent(
                  new window.MouseEvent("click", eventInit)
                );
              });
              tree == null ? void 0 : tree.events.emit("click");
            }
          },
          onClick(event) {
            if (!disabled) {
              onClick == null ? void 0 : onClick(event);
              if (!triggersSubmenu) {
                tree == null ? void 0 : tree.events.emit("click");
              }
            }
          },
          onFocus(event) {
            onFocus == null ? void 0 : onFocus(event);
            setFocusInside(true);
          },
          ...rest
        }),
        ref: handleRef,
        children: [
          children,
          triggersSubmenu && /* @__PURE__ */ jsx(ExpandGroupIcon, { className: withBaseName("expandIcon"), "aria-hidden": true })
        ]
      }
    );
  }
);

export { MenuItem };
//# sourceMappingURL=MenuItem.js.map
