import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useInteractions, useClick, useDismiss } from '@floating-ui/react';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useState, useEffect } from 'react';
import { Scrim } from '../scrim/Scrim.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useFloatingComponent, useFloatingUI } from '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './Drawer.css.js';

const ConditionalScrimWrapper = ({
  condition,
  children
}) => {
  return condition ? /* @__PURE__ */ jsxs(Scrim, { fixed: true, children: [
    " ",
    children,
    " "
  ] }) : /* @__PURE__ */ jsxs(Fragment, { children: [
    children,
    " "
  ] });
};
const withBaseName = makePrefixer("saltDrawer");
const Drawer = forwardRef(
  function Drawer2(props, ref) {
    var _a, _b;
    const {
      children,
      className,
      position = "left",
      open = false,
      onOpenChange,
      variant = "primary",
      disableDismiss,
      disableScrim,
      ...rest
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-drawer",
      css: css_248z,
      window: targetWindow
    });
    const [showComponent, setShowComponent] = useState(false);
    const { Component: FloatingComponent } = useFloatingComponent();
    const { context, floating, elements } = useFloatingUI({
      open: showComponent,
      onOpenChange
    });
    const { getFloatingProps } = useInteractions([
      useClick(context),
      useDismiss(context, { enabled: !disableDismiss })
    ]);
    const handleRef = useForkRef(floating, ref);
    useEffect(() => {
      if (open && !showComponent) {
        setShowComponent(true);
      }
      if (!open && showComponent) {
        const animate = setTimeout(() => {
          setShowComponent(false);
        }, 300);
        return () => clearTimeout(animate);
      }
    }, [open, showComponent]);
    return /* @__PURE__ */ jsx(ConditionalScrimWrapper, { condition: showComponent && !disableScrim, children: /* @__PURE__ */ jsx(
      FloatingComponent,
      {
        open: showComponent,
        ref: handleRef,
        role: "dialog",
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight,
        "aria-modal": "true",
        focusManagerProps: {
          context
        },
        className: clsx(
          withBaseName(),
          withBaseName(position),
          {
            [withBaseName("enterAnimation")]: open,
            [withBaseName("exitAnimation")]: !open,
            [withBaseName(variant)]: variant
          },
          className
        ),
        ...getFloatingProps(),
        ...rest,
        children
      }
    ) });
  }
);

export { Drawer };
//# sourceMappingURL=Drawer.js.map
