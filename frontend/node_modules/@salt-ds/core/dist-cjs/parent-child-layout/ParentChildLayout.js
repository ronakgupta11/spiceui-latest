'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var useIsViewportLargerThanBreakpoint = require('./useIsViewportLargerThanBreakpoint.js');
var ParentChildLayout$1 = require('./ParentChildLayout.css.js');

const withBaseName = makePrefixer.makePrefixer("saltParentChildLayout");
const ParentChildLayout = React.forwardRef(function ParentChildLayout2({
  collapseAtBreakpoint = "sm",
  visibleView = "child",
  parent,
  child,
  className,
  gap = 0,
  onCollapseChange,
  style,
  ...rest
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-parent-child-layout",
    css: ParentChildLayout$1,
    window: targetWindow
  });
  const isCollapsed = useIsViewportLargerThanBreakpoint.useIsViewportLargerThanBreakpoint(collapseAtBreakpoint);
  React.useEffect(() => {
    onCollapseChange == null ? void 0 : onCollapseChange(isCollapsed);
  }, [isCollapsed, onCollapseChange]);
  const parentChildLayoutStyles = {
    ...style,
    "--parentChildLayout-gap": `calc(var(--salt-spacing-100) * ${gap})`
  };
  return /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      ref,
      className: clsx.clsx(withBaseName(), className),
      style: parentChildLayoutStyles,
      ...rest,
      children: isCollapsed ? /* @__PURE__ */ jsxRuntime.jsx(
        "div",
        {
          className: clsx.clsx({
            [withBaseName("collapsed")]: isCollapsed,
            [withBaseName("childAnimation")]: visibleView === "child",
            [withBaseName("parentAnimation")]: visibleView === "parent"
          }),
          children: isCollapsed && visibleView === "child" ? child : parent
        },
        visibleView
      ) : /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
        /* @__PURE__ */ jsxRuntime.jsx("div", { className: withBaseName("parent"), children: parent }),
        /* @__PURE__ */ jsxRuntime.jsx("div", { className: withBaseName("child"), children: child })
      ] })
    }
  );
});

exports.ParentChildLayout = ParentChildLayout;
//# sourceMappingURL=ParentChildLayout.js.map
