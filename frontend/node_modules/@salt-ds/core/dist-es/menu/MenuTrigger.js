import { jsx, Fragment } from 'react/jsx-runtime';
import { isValidElement, cloneElement } from 'react';
import { mergeProps } from '../utils/mergeProps.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { getRefFromChildren } from '../utils/getRefFromChildren.js';
import { useMenuContext } from './MenuContext.js';
import { useMenuPanelContext } from './MenuPanelContext.js';
import { MenuTriggerContext } from './MenuTriggerContext.js';

function MenuTrigger(props) {
  const { children } = props;
  const { getReferenceProps, refs, setFocusInside, focusInside, openState } = useMenuContext();
  const { setFocusInside: setFocusInsideParent } = useMenuPanelContext();
  const handleRef = useForkRef(
    getRefFromChildren(children),
    refs == null ? void 0 : refs.setReference
  );
  if (!children || !isValidElement(children)) {
    return /* @__PURE__ */ jsx(Fragment, { children });
  }
  return /* @__PURE__ */ jsx(
    MenuTriggerContext.Provider,
    {
      value: { triggersSubmenu: true, blurActive: focusInside && openState },
      children: cloneElement(children, {
        ...mergeProps(
          getReferenceProps({
            onFocus() {
              setFocusInsideParent(true);
              setFocusInside(false);
            }
          }),
          children.props
        ),
        ref: handleRef
      })
    }
  );
}

export { MenuTrigger };
//# sourceMappingURL=MenuTrigger.js.map
