'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var useIsomorphicLayoutEffect = require('../utils/useIsomorphicLayoutEffect.js');

const ViewportContext = React.createContext(null);
const ViewportProvider = ({ children }) => {
  const existingViewport = React.useContext(ViewportContext);
  const [viewport, setViewport] = React.useState(existingViewport);
  const noExistingViewport = existingViewport === null;
  const viewportValue = existingViewport || viewport || 0;
  useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
    let observer = null;
    if (noExistingViewport) {
      observer = new ResizeObserver(
        (observerEntries) => {
          setViewport(observerEntries[0].contentRect.width);
        }
      );
      observer.observe(document.body);
      setViewport(document.body.getBoundingClientRect().width);
    }
    return () => {
      if (observer) {
        observer.disconnect();
      }
    };
  }, [noExistingViewport]);
  return /* @__PURE__ */ jsxRuntime.jsx(ViewportContext.Provider, { value: viewportValue, children });
};
const useViewport = () => {
  const value = React.useContext(ViewportContext);
  return value === null ? 0 : value;
};

exports.ViewportContext = ViewportContext;
exports.ViewportProvider = ViewportProvider;
exports.useViewport = useViewport;
//# sourceMappingURL=ViewportProvider.js.map
