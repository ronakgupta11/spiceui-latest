'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var Text = require('../../text/Text.js');
require('../../text/Code.js');
require('../../text/Display.js');
require('../../text/Headings.js');
require('../../text/Label.js');
require('../../text/TextAction.js');
require('../../text/TextNotation.js');
var makePrefixer = require('../../utils/makePrefixer.js');
require('../../utils/useFloatingUI/useFloatingUI.js');
require('../../utils/useId.js');
require('../../salt-provider/SaltProvider.js');
require('../../viewport/ViewportProvider.js');
var LinearProgress$1 = require('./LinearProgress.css.js');

const withBaseName = makePrefixer.makePrefixer("saltLinearProgress");
const LinearProgress = React.forwardRef(
  function LinearProgress2({
    className,
    hideLabel = false,
    max = 100,
    min = 0,
    value,
    bufferValue,
    ...rest
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-linear-progress",
      css: LinearProgress$1,
      window: targetWindow
    });
    const isIndeterminate = value === void 0 && bufferValue === void 0;
    const progress = value === void 0 ? 0 : (value - min) / (max - min) * 100;
    const buffer = bufferValue === void 0 ? 0 : (bufferValue - min) / (max - min) * 100;
    const barStyle = {
      width: isIndeterminate ? void 0 : `${progress}%`
    };
    const bufferStyle = {
      width: `${buffer}%`
    };
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "div",
      {
        className: clsx.clsx(withBaseName(), className),
        ref,
        role: "progressbar",
        "aria-valuemax": max,
        "aria-valuemin": min,
        "aria-valuenow": value === void 0 ? void 0 : Math.round(value),
        ...rest,
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs("div", { className: withBaseName("barContainer"), children: [
            /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                className: clsx.clsx(withBaseName("bar"), {
                  [withBaseName("indeterminate")]: isIndeterminate
                }),
                style: barStyle
              }
            ),
            bufferValue && bufferValue > 0 ? /* @__PURE__ */ jsxRuntime.jsx("div", { className: withBaseName("buffer"), style: bufferStyle }) : null,
            /* @__PURE__ */ jsxRuntime.jsx("div", { className: withBaseName("track") })
          ] }),
          !hideLabel && /* @__PURE__ */ jsxRuntime.jsx(Text.Text, { styleAs: "h2", className: withBaseName("progressLabel"), children: isIndeterminate ? "\u2014 %" : `${Math.round(progress)} %` })
        ]
      }
    );
  }
);

exports.LinearProgress = LinearProgress;
//# sourceMappingURL=LinearProgress.js.map
