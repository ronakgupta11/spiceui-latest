'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
require('../aria-announcer/AriaAnnouncerContext.js');
var AriaAnnouncerProvider = require('../aria-announcer/AriaAnnouncerProvider.js');
var Breakpoints = require('../breakpoints/Breakpoints.js');
var BreakpointProvider = require('../breakpoints/BreakpointProvider.js');
var useIsomorphicLayoutEffect = require('../utils/useIsomorphicLayoutEffect.js');
var ViewportProvider = require('../viewport/ViewportProvider.js');
var SaltProvider$1 = require('./SaltProvider.css.js');

const DEFAULT_DENSITY = "medium";
const DEFAULT_THEME_NAME = "salt-theme";
const DEFAULT_THEME_NAME_NEXT = "salt-theme-next";
const DEFAULT_MODE = "light";
const DEFAULT_CORNER = "sharp";
const DEFAULT_HEADING_FONT = "Open Sans";
const DEFAULT_ACCENT = "blue";
const DEFAULT_ACTION_FONT = "Open Sans";
const DensityContext = React.createContext(DEFAULT_DENSITY);
const ThemeContext = React.createContext({
  theme: "",
  mode: DEFAULT_MODE,
  themeNext: false,
  corner: DEFAULT_CORNER,
  UNSTABLE_corner: DEFAULT_CORNER,
  headingFont: DEFAULT_HEADING_FONT,
  UNSTABLE_headingFont: DEFAULT_HEADING_FONT,
  accent: DEFAULT_ACCENT,
  UNSTABLE_accent: DEFAULT_ACCENT,
  actionFont: DEFAULT_ACTION_FONT,
  UNSTABLE_actionFont: DEFAULT_ACTION_FONT
});
const BreakpointContext = React.createContext(Breakpoints.DEFAULT_BREAKPOINTS);
const getThemeNames = (themeName, themeNext) => {
  if (themeNext) {
    return themeName === DEFAULT_THEME_NAME ? clsx.clsx(DEFAULT_THEME_NAME, DEFAULT_THEME_NAME_NEXT) : clsx.clsx(DEFAULT_THEME_NAME, DEFAULT_THEME_NAME_NEXT, themeName);
  }
  return themeName === DEFAULT_THEME_NAME ? themeName : clsx.clsx(DEFAULT_THEME_NAME, themeName);
};
const createThemedChildren = ({
  children,
  themeName,
  density,
  mode,
  applyClassesTo,
  themeNext,
  corner,
  headingFont,
  accent,
  actionFont
}) => {
  var _a;
  const themeNamesString = getThemeNames(themeName, themeNext);
  const themeNextProps = {
    "data-corner": corner,
    "data-heading-font": headingFont,
    "data-accent": accent,
    "data-action-font": actionFont
  };
  if (applyClassesTo === "root") {
    return children;
  }
  if (applyClassesTo === "child") {
    if (React.isValidElement(children)) {
      return React.cloneElement(children, {
        className: clsx.clsx(
          (_a = children.props) == null ? void 0 : _a.className,
          themeNamesString,
          `salt-density-${density}`
        ),
        // @ts-ignore
        "data-mode": mode,
        ...themeNext ? themeNextProps : {}
      });
    }
    console.warn(
      `
SaltProvider can only apply CSS classes for theming to a single nested child element of the SaltProvider.
        Either wrap elements with a single container or consider removing the applyClassesToChild prop, in which case a
        div element will wrap your child elements`
    );
    return children;
  }
  return /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      className: clsx.clsx(
        "salt-provider",
        themeNamesString,
        `salt-density-${density}`
      ),
      "data-mode": mode,
      ...themeNext ? themeNextProps : {},
      children
    }
  );
};
function InternalSaltProvider({
  applyClassesTo: applyClassesToProp,
  children,
  density: densityProp,
  theme: themeProp,
  mode: modeProp,
  breakpoints: breakpointsProp,
  themeNext,
  corner: cornerProp,
  headingFont: headingFontProp,
  accent: accentProp,
  actionFont: actionFontProp
}) {
  const inheritedDensity = React.useContext(DensityContext);
  const {
    theme: inheritedTheme,
    mode: inheritedMode,
    window: inheritedWindow,
    corner: inheritedCorner,
    headingFont: inheritedHeadingFont,
    accent: inheritedAccent,
    actionFont: inheritedActionFont
  } = React.useContext(ThemeContext);
  const isRootProvider = inheritedTheme === void 0 || inheritedTheme === "";
  const density = densityProp ?? inheritedDensity ?? DEFAULT_DENSITY;
  const themeName = themeProp ?? (inheritedTheme === "" ? DEFAULT_THEME_NAME : inheritedTheme);
  const mode = modeProp ?? inheritedMode;
  const breakpoints = breakpointsProp ?? Breakpoints.DEFAULT_BREAKPOINTS;
  const corner = cornerProp ?? inheritedCorner ?? DEFAULT_CORNER;
  const headingFont = headingFontProp ?? inheritedHeadingFont ?? DEFAULT_HEADING_FONT;
  const accent = accentProp ?? inheritedAccent ?? DEFAULT_ACCENT;
  const actionFont = actionFontProp ?? inheritedActionFont ?? DEFAULT_ACTION_FONT;
  const applyClassesTo = applyClassesToProp ?? (isRootProvider ? "root" : "scope");
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-provider",
    css: SaltProvider$1,
    window: targetWindow
  });
  const themeContextValue = React.useMemo(
    () => ({
      theme: themeName,
      mode,
      window: targetWindow,
      themeNext: Boolean(themeNext),
      corner,
      headingFont,
      accent,
      actionFont,
      // Backward compatibility
      UNSTABLE_corner: corner,
      UNSTABLE_headingFont: headingFont,
      UNSTABLE_accent: accent,
      UNSTABLE_actionFont: actionFont
    }),
    [
      themeName,
      mode,
      targetWindow,
      themeNext,
      corner,
      headingFont,
      accent,
      actionFont
    ]
  );
  const themedChildren = createThemedChildren({
    children,
    themeName,
    density,
    mode,
    applyClassesTo,
    themeNext,
    corner,
    headingFont,
    accent,
    actionFont
  });
  useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
    const themeNamesString = getThemeNames(themeName, themeNext);
    const themeNames = themeNamesString.split(" ");
    if (applyClassesTo === "root" && targetWindow) {
      if (inheritedWindow !== targetWindow) {
        targetWindow.document.documentElement.classList.add(
          ...themeNames,
          `salt-density-${density}`
        );
        targetWindow.document.documentElement.dataset.mode = mode;
        if (themeNext) {
          targetWindow.document.documentElement.dataset.corner = corner;
          targetWindow.document.documentElement.dataset.headingFont = headingFont;
          targetWindow.document.documentElement.dataset.accent = accent;
          targetWindow.document.documentElement.dataset.actionFont = actionFont;
        }
      } else {
        console.warn(
          "SaltProvider can only apply CSS classes to the root if it is the root level SaltProvider."
        );
      }
    }
    return () => {
      if (applyClassesTo === "root" && targetWindow) {
        targetWindow.document.documentElement.classList.remove(
          ...themeNames,
          `salt-density-${density}`
        );
        targetWindow.document.documentElement.dataset.mode = void 0;
        if (themeNext) {
          delete targetWindow.document.documentElement.dataset.corner;
          delete targetWindow.document.documentElement.dataset.headingFont;
          delete targetWindow.document.documentElement.dataset.accent;
          delete targetWindow.document.documentElement.dataset.actionFont;
        }
      }
    };
  }, [
    applyClassesTo,
    density,
    mode,
    themeName,
    targetWindow,
    inheritedWindow,
    themeNext,
    corner,
    headingFont,
    accent,
    actionFont
  ]);
  const matchedBreakpoints = BreakpointProvider.useMatchedBreakpoints(breakpoints);
  const saltProvider = /* @__PURE__ */ jsxRuntime.jsx(DensityContext.Provider, { value: density, children: /* @__PURE__ */ jsxRuntime.jsx(ThemeContext.Provider, { value: themeContextValue, children: /* @__PURE__ */ jsxRuntime.jsx(BreakpointProvider.BreakpointProvider, { matchedBreakpoints, children: /* @__PURE__ */ jsxRuntime.jsx(BreakpointContext.Provider, { value: breakpoints, children: /* @__PURE__ */ jsxRuntime.jsx(ViewportProvider.ViewportProvider, { children: themedChildren }) }) }) }) });
  if (isRootProvider) {
    return /* @__PURE__ */ jsxRuntime.jsx(AriaAnnouncerProvider.AriaAnnouncerProvider, { children: saltProvider });
  }
  return saltProvider;
}
function SaltProvider({
  enableStyleInjection,
  ...restProps
}) {
  return /* @__PURE__ */ jsxRuntime.jsx(styles.StyleInjectionProvider, { value: enableStyleInjection, children: /* @__PURE__ */ jsxRuntime.jsx(InternalSaltProvider, { ...restProps }) });
}
function SaltProviderNext({
  enableStyleInjection,
  ...restProps
}) {
  return /* @__PURE__ */ jsxRuntime.jsx(styles.StyleInjectionProvider, { value: enableStyleInjection, children: /* @__PURE__ */ jsxRuntime.jsx(InternalSaltProvider, { ...restProps, themeNext: true }) });
}
const UNSTABLE_SaltProviderNext = SaltProviderNext;
const useTheme = () => {
  const { window, ...contextWithoutWindow } = React.useContext(ThemeContext);
  return contextWithoutWindow;
};
function useDensity(density) {
  const densityFromContext = React.useContext(DensityContext);
  return density ?? densityFromContext ?? DEFAULT_DENSITY;
}
const useBreakpoints = () => {
  return React.useContext(BreakpointContext);
};

exports.BreakpointContext = BreakpointContext;
exports.DEFAULT_DENSITY = DEFAULT_DENSITY;
exports.DensityContext = DensityContext;
exports.SaltProvider = SaltProvider;
exports.SaltProviderNext = SaltProviderNext;
exports.ThemeContext = ThemeContext;
exports.UNSTABLE_SaltProviderNext = UNSTABLE_SaltProviderNext;
exports.useBreakpoints = useBreakpoints;
exports.useDensity = useDensity;
exports.useTheme = useTheme;
//# sourceMappingURL=SaltProvider.js.map
