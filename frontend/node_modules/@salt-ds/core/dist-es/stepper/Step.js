import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import clsx from 'clsx';
import { forwardRef, useContext, useEffect } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useId } from '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './Step.css.js';
import { Stepper } from './Stepper.js';
import { StepConnector } from './internal/StepConnector.js';
import { StepExpandTrigger } from './internal/StepExpandTrigger.js';
import { StepIcon } from './internal/StepIcon.js';
import { StepScreenReaderOnly } from './internal/StepScreenReaderOnly.js';
import { StepText } from './internal/StepText.js';
import { StepDepthContext, StepperOrientationContext } from './internal/StepperProvider.js';

const withBaseName = makePrefixer("saltStep");
const Step = forwardRef(function Step2({
  id: idProp,
  label,
  description,
  status,
  stage = "pending",
  expanded: expandedProp,
  defaultExpanded,
  onToggle,
  className,
  style,
  children,
  ...rest
}, ref) {
  const id = useId(idProp);
  const targetWindow = useWindow();
  const depth = useContext(StepDepthContext);
  const orientation = useContext(StepperOrientationContext);
  const hasNestedSteps = !!children;
  const [expanded, setExpanded] = useControlled({
    name: "Step",
    state: "expanded",
    controlled: expandedProp,
    default: Boolean(defaultExpanded)
  });
  useComponentCssInjection({
    testId: "salt-step",
    css: css_248z,
    window: targetWindow
  });
  useEffect(() => {
    if (process.env.NODE_ENV !== "production") {
      if (depth === -1) {
        console.warn("<Step /> should be used within a <Stepper /> component!");
      }
      if (depth > 2) {
        console.warn("<Step /> should not be nested more than 2 levels deep!");
      }
      if (orientation === "horizontal" && hasNestedSteps) {
        console.warn(
          "<Stepper /> does not support nested steps in horizontal orientation!"
        );
      }
    }
  }, [depth, orientation]);
  const ariaCurrent = stage === "active" ? "step" : void 0;
  const iconSizeMultiplier = depth === 0 ? 1.5 : 1;
  const stageText = stage === "inprogress" ? "in progress" : stage;
  const state = status || stageText;
  const labelId = `${id}-label`;
  const descriptionId = `${id}-description`;
  const expandTriggerId = `${id}-expand-trigger`;
  const nestedStepperId = `${id}-nested-stepper`;
  const screenReaderOnly = {
    stateId: `${id}-sr-only-state`,
    stateText: state !== "active" ? state : "",
    substepsId: `${id}-sr-only-substeps`,
    substepsText: "substeps",
    toggleSubstepsId: `${id}-sr-only-toggle-substeps`,
    toggleSubstepsText: "toggle substeps"
  };
  return /* @__PURE__ */ jsxs(
    "li",
    {
      id,
      "aria-current": ariaCurrent,
      className: clsx(
        withBaseName(),
        withBaseName(`stage-${stage}`),
        withBaseName(`depth-${depth}`),
        status && withBaseName(`status-${status}`),
        !hasNestedSteps && withBaseName("terminal"),
        hasNestedSteps && expanded && withBaseName("expanded"),
        hasNestedSteps && !expanded && withBaseName("collapsed"),
        className
      ),
      style: {
        "--saltStep-depth": depth,
        ...style
      },
      ...rest,
      ref,
      children: [
        /* @__PURE__ */ jsx(StepScreenReaderOnly, { children: `${label} ${description !== void 0 ? description : ""} ${screenReaderOnly.stateText}` }),
        hasNestedSteps && /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx(
            StepScreenReaderOnly,
            {
              id: screenReaderOnly.toggleSubstepsId,
              "aria-hidden": true,
              children: screenReaderOnly.toggleSubstepsText
            }
          ),
          /* @__PURE__ */ jsx(StepScreenReaderOnly, { id: screenReaderOnly.substepsId, "aria-hidden": true, children: screenReaderOnly.substepsText }),
          /* @__PURE__ */ jsx(StepScreenReaderOnly, { id: screenReaderOnly.stateId, "aria-hidden": true, children: screenReaderOnly.stateText })
        ] }),
        /* @__PURE__ */ jsx(StepConnector, {}),
        /* @__PURE__ */ jsx(
          StepIcon,
          {
            stage,
            status,
            sizeMultiplier: iconSizeMultiplier,
            "aria-hidden": true
          }
        ),
        label && /* @__PURE__ */ jsx(StepText, { id: labelId, purpose: "label", "aria-hidden": true, children: label }),
        description && /* @__PURE__ */ jsx(StepText, { id: descriptionId, purpose: "description", "aria-hidden": true, children: description }),
        hasNestedSteps && orientation === "vertical" && /* @__PURE__ */ jsx(
          StepExpandTrigger,
          {
            id: expandTriggerId,
            "aria-expanded": expanded,
            "aria-controls": nestedStepperId,
            "aria-labelledby": [
              labelId,
              descriptionId,
              screenReaderOnly.stateId,
              screenReaderOnly.toggleSubstepsId
            ].join(" "),
            expanded,
            onClick: (event) => {
              onToggle == null ? void 0 : onToggle(event);
              setExpanded(!expanded);
            }
          }
        ),
        hasNestedSteps && orientation === "vertical" && /* @__PURE__ */ jsx(
          Stepper,
          {
            id: nestedStepperId,
            "aria-labelledby": [labelId, screenReaderOnly.substepsId].join(" "),
            "aria-hidden": !expanded,
            hidden: !expanded,
            children
          }
        )
      ]
    }
  );
});

export { Step };
//# sourceMappingURL=Step.js.map
