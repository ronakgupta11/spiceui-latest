'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var capitalize = require('../utils/capitalize.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var InteractableCard$1 = require('./InteractableCard.css.js');
var InteractableCardGroupContext = require('./InteractableCardGroupContext.js');
var useInteractableCard = require('./useInteractableCard.js');

const withBaseName = makePrefixer.makePrefixer("saltInteractableCard");
const InteractableCard = React.forwardRef(function InteractableCard2(props, ref) {
  const {
    accent,
    accentPlacement,
    children,
    className,
    disabled: disabledProp,
    variant = "primary",
    value,
    onBlur,
    onChange,
    onClick,
    onKeyUp,
    onKeyDown,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-interactable-card",
    css: InteractableCard$1,
    window: targetWindow
  });
  const interactableCardGroup = InteractableCardGroupContext.useInteractableCardGroup();
  const interactableCardGroupSelected = interactableCardGroup == null ? void 0 : interactableCardGroup.isSelected(value);
  const disabled = (interactableCardGroup == null ? void 0 : interactableCardGroup.disabled) || disabledProp;
  const [selected, setSelected] = useControlled.useControlled({
    controlled: interactableCardGroupSelected,
    default: Boolean(false),
    name: "InteractableCard",
    state: "selected"
  });
  const role = interactableCardGroup ? interactableCardGroup.multiSelect ? "checkbox" : "radio" : "button";
  const isMultiselect = interactableCardGroup == null ? void 0 : interactableCardGroup.multiSelect;
  const isFirstChild = interactableCardGroup == null ? void 0 : interactableCardGroup.isFirstChild(value);
  const ariaChecked = role === "radio" || role === "checkbox" ? selected : void 0;
  const accentValue = accent || accentPlacement;
  const handleClick = (event) => {
    if (interactableCardGroup && !disabled) {
      interactableCardGroup.select(event, value);
      setSelected(!selected);
    }
    onChange == null ? void 0 : onChange(event);
    onClick == null ? void 0 : onClick(event);
  };
  let tabIndex;
  if (interactableCardGroup) {
    if (disabled) {
      tabIndex = -1;
    } else if (isMultiselect) {
      tabIndex = 0;
    } else {
      tabIndex = selected ? 0 : -1;
      if (!interactableCardGroup.value && isFirstChild) {
        tabIndex = 0;
      }
    }
  } else {
    tabIndex = disabled ? -1 : 0;
  }
  const cardRef = React.useRef(null);
  const handleRef = useForkRef.useForkRef(ref, cardRef);
  const { active, cardProps } = useInteractableCard.useInteractableCard({
    disabled,
    onKeyUp,
    onKeyDown,
    onBlur,
    onClick
  });
  return /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      ...cardProps,
      role,
      "aria-checked": ariaChecked,
      "aria-disabled": disabled,
      "data-value": value,
      className: clsx.clsx(
        withBaseName(),
        withBaseName(variant),
        {
          [withBaseName("accent")]: accentValue,
          [withBaseName(`accent${capitalize.capitalize(accentValue ?? "")}`)]: accentValue,
          [withBaseName("active")]: role === "button" && active,
          [withBaseName("disabled")]: disabled,
          [withBaseName("selected")]: selected
        },
        className
      ),
      ...rest,
      onClick: handleClick,
      ref: handleRef,
      tabIndex,
      children
    }
  );
});

exports.InteractableCard = InteractableCard;
//# sourceMappingURL=InteractableCard.js.map
