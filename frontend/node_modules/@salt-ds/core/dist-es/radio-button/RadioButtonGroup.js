import { jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useId } from '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { RadioGroupContext } from './internal/RadioGroupContext.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import css_248z from './RadioButtonGroup.css.js';

const withBaseName = makePrefixer("saltRadioButtonGroup");
const RadioButtonGroup = forwardRef(function RadioButtonGroup2(props, ref) {
  const {
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    children,
    className,
    defaultValue,
    direction = "vertical",
    disabled: disabledProp,
    wrap = true,
    name: nameProp,
    onChange,
    readOnly: readOnlyProp,
    value: valueProp,
    validationStatus: validationStatusProp,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-radio-button-group",
    css: css_248z,
    window: targetWindow
  });
  const {
    a11yProps,
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps();
  const disabled = formFieldDisabled || disabledProp;
  const readOnly = formFieldReadOnly || readOnlyProp;
  const validationStatus = formFieldValidationStatus ?? validationStatusProp;
  const [value, setStateValue] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    state: "value",
    name: "RadioButtonGroup"
  });
  const handleChange = (event) => {
    setStateValue(event.target.value);
    onChange == null ? void 0 : onChange(event);
  };
  const name = useId(nameProp);
  return /* @__PURE__ */ jsx(
    "fieldset",
    {
      role: "radiogroup",
      "aria-readonly": readOnly,
      "aria-labelledby": clsx(a11yProps == null ? void 0 : a11yProps["aria-labelledby"], ariaLabelledBy) || void 0,
      "aria-describedby": clsx(a11yProps == null ? void 0 : a11yProps["aria-describedby"], ariaDescribedBy) || void 0,
      className: clsx(
        withBaseName(),
        withBaseName(direction),
        {
          [withBaseName("noWrap")]: !wrap
        },
        className
      ),
      "data-testid": "radio-button-group",
      ref,
      ...rest,
      children: /* @__PURE__ */ jsx(
        RadioGroupContext.Provider,
        {
          value: {
            disabled,
            name,
            onChange: handleChange,
            readOnly,
            validationStatus,
            value
          },
          children
        }
      )
    }
  );
});

export { RadioButtonGroup };
//# sourceMappingURL=RadioButtonGroup.js.map
