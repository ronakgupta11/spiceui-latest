'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var SemanticIconProvider = require('../semantic-icon-provider/SemanticIconProvider.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var Avatar$1 = require('./Avatar.css.js');
var useAvatarImage = require('./useAvatarImage.js');

const withBaseName = makePrefixer.makePrefixer("saltAvatar");
const DEFAULT_AVATAR_SIZE = 2;
const defaultNameToInitials = (name) => name == null ? void 0 : name.split(" ").slice(0, 2).map((n) => n[0]).join("").toUpperCase();
const Avatar = React.forwardRef(function Avatar2({
  className,
  children: childrenProp,
  color = "accent",
  name,
  nameToInitials = defaultNameToInitials,
  src,
  size = DEFAULT_AVATAR_SIZE,
  style: styleProp,
  fallbackIcon: fallbackIconProp,
  ...rest
}, ref) {
  const targetWindow = window.useWindow();
  const { UserIcon } = SemanticIconProvider.useIcon();
  const fallbackIcon = fallbackIconProp === void 0 ? /* @__PURE__ */ jsxRuntime.jsx(UserIcon, { "aria-hidden": true }) : fallbackIconProp;
  styles.useComponentCssInjection({
    testId: "salt-avatar",
    css: Avatar$1,
    window: targetWindow
  });
  let children;
  const style = {
    ...styleProp,
    "--saltAvatar-size-multiplier": `${size}`
  };
  const status = useAvatarImage.useAvatarImage({ src });
  const hasImgNotFailing = status === "loaded";
  if (hasImgNotFailing) {
    children = /* @__PURE__ */ jsxRuntime.jsx("img", { alt: "", src });
  } else if (childrenProp != null) {
    children = childrenProp;
  }
  const avatarInitials = nameToInitials(name);
  return /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      ref,
      style,
      className: clsx.clsx(
        withBaseName(),
        withBaseName(color),
        {
          [withBaseName("withImage")]: hasImgNotFailing
        },
        className
      ),
      role: name ? "img" : void 0,
      "aria-label": name,
      ...rest,
      children: children || avatarInitials || fallbackIcon
    }
  );
});

exports.Avatar = Avatar;
//# sourceMappingURL=Avatar.js.map
