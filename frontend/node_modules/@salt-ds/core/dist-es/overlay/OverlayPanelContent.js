import { jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import clsx from 'clsx';
import { forwardRef, useState, useRef, useCallback } from 'react';
import { debounce } from '../utils/debounce.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { useResizeObserver } from '../utils/useResizeObserver.js';
import css_248z from './OverlayPanelContent.css.js';

const withBaseName = makePrefixer("saltOverlayPanelContent");
const OverlayPanelContent = forwardRef(function OverlayPanelContent2(props, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-overlay-panel-content",
    css: css_248z,
    window: targetWindow
  });
  const { children, className, ...rest } = props;
  const [scrollBarTop, setScrollBarTop] = useState(false);
  const [scrollBarBottom, setScrollBarBottom] = useState(true);
  const [isOverflowing, setIsOverflowing] = useState(false);
  const divRef = useRef(null);
  const containerRef = useForkRef(divRef, ref);
  const handleScroll = debounce(() => {
    const container = divRef.current;
    if (!container) return;
    setScrollBarTop(container.scrollTop > 0);
    setScrollBarBottom(
      container.scrollHeight - container.scrollTop - container.clientHeight !== 0
    );
  });
  const checkOverflow = useCallback(() => {
    if (!divRef.current) return;
    setIsOverflowing(
      divRef.current.scrollHeight > divRef.current.offsetHeight + 1
      // var(--salt-size-border)
    );
  }, []);
  useResizeObserver({ ref: divRef, onResize: checkOverflow });
  useIsomorphicLayoutEffect(() => {
    checkOverflow();
  }, [checkOverflow]);
  return /* @__PURE__ */ jsx("div", { className: clsx(withBaseName(), className), children: /* @__PURE__ */ jsx(
    "div",
    {
      className: clsx(withBaseName("container"), {
        [withBaseName("overflow")]: isOverflowing,
        [withBaseName("scroll-top")]: isOverflowing && scrollBarTop,
        [withBaseName("scroll-bottom")]: isOverflowing && scrollBarBottom
      }),
      onScrollCapture: handleScroll,
      ...rest,
      ref: containerRef,
      children
    }
  ) });
});

export { OverlayPanelContent };
//# sourceMappingURL=OverlayPanelContent.js.map
