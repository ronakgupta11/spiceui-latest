'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('@floating-ui/react');
var React = require('react');
require('clsx');
var useControlled = require('../utils/useControlled.js');
var useFloatingUI = require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
var useIsomorphicLayoutEffect = require('../utils/useIsomorphicLayoutEffect.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var MenuContext = require('./MenuContext.js');

function MenuBase(props) {
  const {
    children,
    defaultOpen,
    open,
    onOpenChange,
    placement,
    getVirtualElement
  } = props;
  const parentId = react.useFloatingParentNodeId();
  const nodeId = react.useFloatingNodeId();
  const tree = react.useFloatingTree();
  const elementsRef = React.useRef([]);
  const [openState, setOpenState] = useControlled.useControlled({
    controlled: open,
    default: Boolean(defaultOpen),
    name: "ListControl",
    state: "open"
  });
  const setOpen = React.useCallback(
    (newOpen) => {
      setOpenState(newOpen);
      onOpenChange == null ? void 0 : onOpenChange(newOpen);
    },
    [onOpenChange]
  );
  const [activeIndex, setActiveIndex] = React.useState(null);
  const [focusInside, setFocusInside] = React.useState(false);
  const isNested = parentId != null;
  const { x, y, strategy, elements, refs, context } = useFloatingUI.useFloatingUI({
    nodeId,
    open: openState,
    onOpenChange: setOpen,
    strategy: !getVirtualElement ? "absolute" : "fixed",
    placement: placement ?? (isNested || getVirtualElement ? "right-start" : "bottom-start"),
    middleware: [
      // Align the nested menu by shifting it by var(--salt-size-border)
      react.offset(
        isNested ? { crossAxis: -1, mainAxis: 2 } : !getVirtualElement ? 1 : 0
      ),
      react.flip({}),
      react.shift({ limiter: react.limitShift() }),
      react.size({
        apply({ elements: elements2, availableHeight }) {
          Object.assign(elements2.floating.style, {
            maxHeight: `${availableHeight}px`
          });
        }
      })
    ]
  });
  useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
    if (getVirtualElement) {
      refs.setPositionReference(getVirtualElement());
    }
  }, [getVirtualElement, refs]);
  const { getReferenceProps, getFloatingProps, getItemProps } = react.useInteractions(
    [
      react.useHover(context, {
        enabled: isNested && !focusInside,
        handleClose: react.safePolygon({ blockPointerEvents: true })
      }),
      react.useClick(context, {
        event: "mousedown",
        toggle: !isNested,
        ignoreMouse: isNested
      }),
      react.useRole(context, { role: "menu" }),
      react.useDismiss(context, { bubbles: true }),
      react.useListNavigation(context, {
        listRef: elementsRef,
        activeIndex,
        nested: isNested,
        onNavigate: setActiveIndex
      })
    ]
  );
  const getPanelPosition = () => {
    var _a, _b;
    return {
      top: y ?? 0,
      left: x ?? 0,
      position: strategy,
      width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
      height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight
    };
  };
  React.useEffect(() => {
    if (!tree) return;
    function handleItemClick() {
      setOpen(false);
    }
    tree.events.on("click", handleItemClick);
    return () => {
      tree.events.off("click", handleItemClick);
    };
  }, [tree, setOpen]);
  return /* @__PURE__ */ jsxRuntime.jsx(react.FloatingNode, { id: nodeId, children: /* @__PURE__ */ jsxRuntime.jsx(
    MenuContext.MenuContext.Provider,
    {
      value: {
        openState,
        getReferenceProps,
        getFloatingProps,
        refs,
        getPanelPosition,
        getItemProps,
        activeIndex,
        context,
        elementsRef,
        focusInside,
        setFocusInside,
        isNested
      },
      children
    }
  ) });
}

exports.MenuBase = MenuBase;
//# sourceMappingURL=MenuBase.js.map
