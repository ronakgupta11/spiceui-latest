'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var debounce = require('../utils/debounce.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
var useIsomorphicLayoutEffect = require('../utils/useIsomorphicLayoutEffect.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var useResizeObserver = require('../utils/useResizeObserver.js');
var OverlayPanelContent$1 = require('./OverlayPanelContent.css.js');

const withBaseName = makePrefixer.makePrefixer("saltOverlayPanelContent");
const OverlayPanelContent = React.forwardRef(function OverlayPanelContent2(props, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-overlay-panel-content",
    css: OverlayPanelContent$1,
    window: targetWindow
  });
  const { children, className, ...rest } = props;
  const [scrollBarTop, setScrollBarTop] = React.useState(false);
  const [scrollBarBottom, setScrollBarBottom] = React.useState(true);
  const [isOverflowing, setIsOverflowing] = React.useState(false);
  const divRef = React.useRef(null);
  const containerRef = useForkRef.useForkRef(divRef, ref);
  const handleScroll = debounce.debounce(() => {
    const container = divRef.current;
    if (!container) return;
    setScrollBarTop(container.scrollTop > 0);
    setScrollBarBottom(
      container.scrollHeight - container.scrollTop - container.clientHeight !== 0
    );
  });
  const checkOverflow = React.useCallback(() => {
    if (!divRef.current) return;
    setIsOverflowing(
      divRef.current.scrollHeight > divRef.current.offsetHeight + 1
      // var(--salt-size-border)
    );
  }, []);
  useResizeObserver.useResizeObserver({ ref: divRef, onResize: checkOverflow });
  useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
    checkOverflow();
  }, [checkOverflow]);
  return /* @__PURE__ */ jsxRuntime.jsx("div", { className: clsx(withBaseName(), className), children: /* @__PURE__ */ jsxRuntime.jsx(
    "div",
    {
      className: clsx(withBaseName("container"), {
        [withBaseName("overflow")]: isOverflowing,
        [withBaseName("scroll-top")]: isOverflowing && scrollBarTop,
        [withBaseName("scroll-bottom")]: isOverflowing && scrollBarBottom
      }),
      onScrollCapture: handleScroll,
      ...rest,
      ref: containerRef,
      children
    }
  ) });
});

exports.OverlayPanelContent = OverlayPanelContent;
//# sourceMappingURL=OverlayPanelContent.js.map
