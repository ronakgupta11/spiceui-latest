'use strict';

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var ExpansionIcon = require('./ExpansionIcon.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var NavigationItem$1 = require('./NavigationItem.css.js');
var NavigationItemAction = require('./NavigationItemAction.js');

const withBaseName = makePrefixer.makePrefixer("saltNavigationItem");
const NavigationItem = React.forwardRef(
  function NavigationItem2(props, ref) {
    const {
      active,
      blurActive,
      render,
      children,
      className,
      expanded = false,
      href,
      orientation = "horizontal",
      parent,
      level = 0,
      onExpand,
      style: styleProp,
      ...rest
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-navigation-item",
      css: NavigationItem$1,
      window: targetWindow
    });
    const style = {
      ...styleProp,
      "--saltNavigationItem-level": `${level}`
    };
    const isLink = href !== void 0;
    const handleClick = (event) => {
      onExpand == null ? void 0 : onExpand(event);
    };
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        ref,
        className: clsx.clsx(withBaseName(), className),
        style,
        ...rest,
        children: /* @__PURE__ */ jsxRuntime.jsxs(
          NavigationItemAction.NavigationItemAction,
          {
            className: clsx.clsx(
              withBaseName("wrapper"),
              {
                [withBaseName("active")]: active || blurActive,
                [withBaseName("blurActive")]: blurActive,
                [withBaseName("rootItem")]: level === 0
              },
              withBaseName(orientation)
            ),
            render: render ?? (isLink ? void 0 : /* @__PURE__ */ jsxRuntime.jsx("button", { type: "button" })),
            "aria-expanded": isLink ? void 0 : expanded,
            onClick: handleClick,
            "aria-current": isLink && active ? "page" : void 0,
            href,
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("span", { className: withBaseName("label"), children }),
              parent ? /* @__PURE__ */ jsxRuntime.jsx(ExpansionIcon.ExpansionIcon, { expanded, orientation }) : null
            ]
          }
        )
      }
    );
  }
);

exports.NavigationItem = NavigationItem;
//# sourceMappingURL=NavigationItem.js.map
