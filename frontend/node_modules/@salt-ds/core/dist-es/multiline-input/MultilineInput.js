import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useRef, useState, useCallback, useLayoutEffect } from 'react';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { StatusAdornment } from '../status-adornment/StatusAdornment.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './MultilineInput.css.js';

const withBaseName = makePrefixer("saltMultilineInput");
const MultilineInput = forwardRef(
  function MultilineInput2({
    "aria-activedescendant": ariaActiveDescendant,
    "aria-expanded": ariaExpanded,
    "aria-owns": ariaOwns,
    bordered = false,
    className: classNameProp,
    disabled,
    endAdornment,
    id,
    placeholder,
    readOnly,
    role,
    rows = 3,
    startAdornment,
    style,
    textAreaProps = {},
    textAreaRef,
    value: valueProp,
    defaultValue: defaultValueProp = valueProp === void 0 ? "" : void 0,
    validationStatus: validationStatusProp,
    variant = "primary",
    ...other
  }, ref) {
    const inputRef = useRef(null);
    const handleRef = useForkRef(inputRef, textAreaRef);
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-multiline-input",
      css: css_248z,
      window: targetWindow
    });
    const restA11yProps = {
      "aria-activedescendant": ariaActiveDescendant,
      "aria-expanded": ariaExpanded,
      "aria-owns": ariaOwns
    };
    const [focused, setFocused] = useState(false);
    const {
      "aria-describedby": textAreaDescribedBy,
      "aria-labelledby": textAreaLabelledBy,
      onBlur,
      onChange,
      onFocus,
      required: textAreaRequired,
      ...restTextAreaProps
    } = textAreaProps;
    const {
      a11yProps: {
        "aria-describedby": formFieldDescribedBy,
        "aria-labelledby": formFieldLabelledBy
      } = {},
      disabled: formFieldDisabled,
      readOnly: formFieldReadOnly,
      necessity: formFieldRequired,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps();
    const isDisabled = disabled || formFieldDisabled;
    const isReadOnly = readOnly || formFieldReadOnly;
    const validationStatus = formFieldValidationStatus ?? validationStatusProp;
    const isRequired = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : textAreaRequired;
    const [value, setValue] = useControlled({
      controlled: valueProp,
      default: defaultValueProp,
      name: "MultilineInput",
      state: "value"
    });
    const previousHeight = useRef(void 0);
    const input = inputRef.current;
    const changeHeight = useCallback(() => {
      if (!input) return;
      const hasBeenManuallyResized = previousHeight.current !== void 0 && input.style.height !== previousHeight.current;
      if (!hasBeenManuallyResized) {
        const previousOverflow = input.style.overflow;
        input.style.overflow = "hidden";
        input.style.height = "auto";
        const newHeight = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;
        input.style.height = newHeight;
        previousHeight.current = newHeight;
        input.style.overflow = previousOverflow;
      }
    }, [input]);
    const handleChange = (event) => {
      const value2 = event.target.value;
      setValue(value2);
      onChange == null ? void 0 : onChange(event);
      changeHeight();
    };
    useLayoutEffect(() => {
      changeHeight();
    }, [value, changeHeight]);
    const handleBlur = (event) => {
      onBlur == null ? void 0 : onBlur(event);
      setFocused(false);
    };
    const handleFocus = (event) => {
      onFocus == null ? void 0 : onFocus(event);
      setFocused(true);
    };
    const multilineInputStyles = {
      "--saltMultilineInput-rows": rows,
      ...style
    };
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: clsx(
          withBaseName(),
          withBaseName(variant),
          {
            [withBaseName("withAdornmentRow")]: endAdornment,
            [withBaseName("bordered")]: bordered,
            [withBaseName("focused")]: !isDisabled && focused,
            [withBaseName("disabled")]: isDisabled,
            [withBaseName("readOnly")]: isReadOnly,
            [withBaseName(validationStatus ?? "")]: validationStatus
          },
          classNameProp
        ),
        ref,
        style: multilineInputStyles,
        ...other,
        children: [
          startAdornment && /* @__PURE__ */ jsx("div", { className: withBaseName("startAdornmentContainer"), children: startAdornment }),
          /* @__PURE__ */ jsx(
            "textarea",
            {
              "aria-describedby": clsx(formFieldDescribedBy, textAreaDescribedBy),
              "aria-labelledby": clsx(formFieldLabelledBy, textAreaLabelledBy),
              className: clsx(withBaseName("textarea"), textAreaProps == null ? void 0 : textAreaProps.className),
              disabled: isDisabled,
              id,
              readOnly: isReadOnly,
              ref: handleRef,
              required: isRequired,
              role,
              rows,
              tabIndex: isDisabled ? -1 : 0,
              onBlur: handleBlur,
              onChange: handleChange,
              onFocus: !isDisabled ? handleFocus : void 0,
              placeholder,
              value,
              ...restA11yProps,
              ...restTextAreaProps
            }
          ),
          /* @__PURE__ */ jsxs("div", { className: withBaseName("suffixAdornments"), children: [
            !isDisabled && validationStatus && /* @__PURE__ */ jsx("div", { className: withBaseName("statusAdornmentContainer"), children: /* @__PURE__ */ jsx(StatusAdornment, { status: validationStatus }) }),
            endAdornment && /* @__PURE__ */ jsx("div", { className: withBaseName("endAdornmentContainer"), children: endAdornment })
          ] }),
          /* @__PURE__ */ jsx("div", { className: withBaseName("activationIndicator") })
        ]
      }
    );
  }
);

export { MultilineInput };
//# sourceMappingURL=MultilineInput.js.map
