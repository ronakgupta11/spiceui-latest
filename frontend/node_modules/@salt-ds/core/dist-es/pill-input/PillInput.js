import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useState, useRef } from 'react';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { Pill } from '../pill/Pill.js';
import { useIcon } from '../semantic-icon-provider/SemanticIconProvider.js';
import { StatusAdornment } from '../status-adornment/StatusAdornment.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import { useId } from '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { useTruncatePills } from './useTruncatePills.js';
import css_248z from './PillInput.css.js';

const withBaseName = makePrefixer("saltPillInput");
const PillInput = forwardRef(function PillInput2({
  "aria-activedescendant": ariaActiveDescendant,
  "aria-expanded": ariaExpanded,
  "aria-owns": ariaOwns,
  className: classNameProp,
  disabled,
  emptyReadOnlyMarker = "\u2014",
  endAdornment,
  hidePillClose,
  id: idProp,
  inputProps = {},
  inputRef: inputRefProp,
  placeholder,
  pills = [],
  onPillRemove,
  readOnly: readOnlyProp,
  role,
  startAdornment,
  style,
  textAlign = "left",
  value: valueProp,
  defaultValue: defaultValueProp = valueProp === void 0 ? "" : void 0,
  validationStatus: validationStatusProp,
  variant = "primary",
  truncate,
  bordered = false,
  ...other
}, ref) {
  const targetWindow = useWindow();
  const { OverflowIcon, CloseIcon } = useIcon();
  useComponentCssInjection({
    testId: "salt-pill-input",
    css: css_248z,
    window: targetWindow
  });
  const {
    a11yProps: {
      "aria-describedby": formFieldDescribedBy,
      "aria-labelledby": formFieldLabelledBy
    } = {},
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    necessity: formFieldRequired,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps();
  const restA11yProps = {
    "aria-activedescendant": ariaActiveDescendant,
    "aria-expanded": ariaExpanded,
    "aria-owns": ariaOwns
  };
  const isDisabled = disabled || formFieldDisabled;
  const isReadOnly = readOnlyProp || formFieldReadOnly;
  const validationStatus = formFieldValidationStatus ?? validationStatusProp;
  const [focused, setFocused] = useState(false);
  const [focusedPillIndex, setFocusedPillIndex] = useState(-1);
  const isEmptyReadOnly = isReadOnly && !defaultValueProp && !valueProp;
  const defaultValue = isEmptyReadOnly ? emptyReadOnlyMarker : defaultValueProp;
  const {
    "aria-describedby": inputDescribedBy,
    "aria-labelledby": inputLabelledBy,
    onBlur,
    onFocus,
    onChange,
    required: inputPropsRequired,
    onKeyDown: inputOnKeyDown,
    ...restInputProps
  } = inputProps;
  const isRequired = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : inputPropsRequired;
  const [value, setValue] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "Input",
    state: "value"
  });
  const { visiblePills, pillListRef } = useTruncatePills({
    pills,
    enable: truncate && pills.length > 0
  });
  const id = useId(idProp);
  const pillListId = `${id}-optionsList`;
  const pillElementsRef = useRef([]);
  const inputRef = useRef(null);
  const handleInputRef = useForkRef(inputRef, inputRefProp);
  const handleChange = (event) => {
    const value2 = event.target.value;
    setValue(value2);
    onChange == null ? void 0 : onChange(event);
  };
  const handleKeyDown = (event) => {
    var _a;
    const target = event.currentTarget;
    if (target.selectionStart === 0 && target.selectionEnd === 0) {
      const lastPillIndex = pills.length - 1;
      const lastPill = pills[lastPillIndex];
      if (event.key === "Backspace" && lastPill) {
        event.preventDefault();
        onPillRemove == null ? void 0 : onPillRemove(event, lastPillIndex);
      } else if (event.key === "ArrowLeft") {
        event.preventDefault();
        (_a = pillElementsRef.current[lastPillIndex]) == null ? void 0 : _a.focus();
      }
    }
    inputOnKeyDown == null ? void 0 : inputOnKeyDown(event);
  };
  const handlePillKeyDown = (event) => {
    var _a, _b, _c, _d, _e, _f;
    const target = event.currentTarget;
    const index = Number(target.dataset.index);
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      (_a = pillElementsRef.current[index - 1]) == null ? void 0 : _a.focus();
    } else if (event.key === "ArrowRight") {
      event.preventDefault();
      if (index === pills.length - 1) {
        (_b = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _b.focus();
      } else {
        (_c = pillElementsRef.current[index + 1]) == null ? void 0 : _c.focus();
      }
    } else if (event.key === "Delete" || event.key === "Backspace") {
      event.preventDefault();
      onPillRemove == null ? void 0 : onPillRemove(event, index);
      if (pills.length === 1) {
        (_d = inputRef.current) == null ? void 0 : _d.focus();
      } else if (index === pills.length - 1) {
        (_e = pillElementsRef.current[pills.length - 2]) == null ? void 0 : _e.focus();
      } else {
        (_f = pillElementsRef.current[index]) == null ? void 0 : _f.focus();
      }
    }
  };
  const handlePillClick = (event) => {
    var _a;
    const target = event.currentTarget;
    const index = Number(target.dataset.index);
    onPillRemove == null ? void 0 : onPillRemove(event, index);
    (_a = inputRef.current) == null ? void 0 : _a.focus();
  };
  const handleBlur = (event) => {
    onBlur == null ? void 0 : onBlur(event);
    setFocused(false);
  };
  const handleFocus = (event) => {
    onFocus == null ? void 0 : onFocus(event);
    setFocused(true);
  };
  const inputStyle = {
    "--input-textAlign": textAlign,
    ...style
  };
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: clsx(
        withBaseName(),
        withBaseName(variant),
        {
          [withBaseName("focused")]: !isDisabled && focused,
          [withBaseName("disabled")]: isDisabled,
          [withBaseName("readOnly")]: isReadOnly,
          [withBaseName("truncate")]: truncate,
          [withBaseName(validationStatus ?? "")]: validationStatus,
          [withBaseName("bordered")]: bordered
        },
        classNameProp
      ),
      ref,
      style: inputStyle,
      ...other,
      children: [
        startAdornment && /* @__PURE__ */ jsx("div", { className: withBaseName("startAdornmentContainer"), children: startAdornment }),
        /* @__PURE__ */ jsxs("div", { className: withBaseName("inputWrapper"), ref: pillListRef, children: [
          /* @__PURE__ */ jsxs(
            "div",
            {
              role: "list",
              className: withBaseName("pillList"),
              "aria-labelledby": clsx(formFieldLabelledBy, pillListId),
              "aria-label": "Selected Options",
              id: pillListId,
              children: [
                visiblePills == null ? void 0 : visiblePills.map((pill, index) => /* @__PURE__ */ jsx("div", { role: "listitem", children: /* @__PURE__ */ jsxs(
                  Pill,
                  {
                    "data-index": index,
                    disabled,
                    ref: (element) => {
                      if (element) {
                        pillElementsRef.current[index] = element;
                      } else {
                        pillElementsRef.current = pillElementsRef.current.filter(
                          (pillEl) => pillEl !== element
                        );
                      }
                    },
                    onFocus: () => setFocusedPillIndex(index),
                    onKeyDown: handlePillKeyDown,
                    onClick: handlePillClick,
                    tabIndex: focusedPillIndex === -1 || focusedPillIndex === index ? 0 : -1,
                    children: [
                      pill,
                      !hidePillClose && /* @__PURE__ */ jsx(CloseIcon, { "aria-label": "click to close" })
                    ]
                  }
                ) }, pill)),
                visiblePills.length < pills.length && /* @__PURE__ */ jsx("div", { role: "listitem", children: /* @__PURE__ */ jsx(
                  "div",
                  {
                    "data-overflowindicator": true,
                    className: withBaseName("overflowIndicator"),
                    children: /* @__PURE__ */ jsx(OverflowIcon, { "aria-hidden": true })
                  }
                ) })
              ]
            }
          ),
          /* @__PURE__ */ jsx(
            "input",
            {
              "aria-describedby": clsx(formFieldDescribedBy, inputDescribedBy),
              "aria-labelledby": clsx(formFieldLabelledBy, inputLabelledBy),
              autoComplete: "off",
              className: clsx(withBaseName("input"), inputProps == null ? void 0 : inputProps.className),
              disabled: isDisabled,
              id,
              readOnly: isReadOnly,
              ref: handleInputRef,
              role,
              tabIndex: isDisabled ? -1 : 0,
              onBlur: handleBlur,
              onChange: handleChange,
              onFocus: !isDisabled ? handleFocus : void 0,
              onKeyDown: handleKeyDown,
              placeholder,
              value,
              ...restA11yProps,
              ...restInputProps,
              required: isRequired
            }
          )
        ] }),
        !isDisabled && validationStatus && /* @__PURE__ */ jsx("div", { className: withBaseName("statusAdornmentContainer"), children: /* @__PURE__ */ jsx(StatusAdornment, { status: validationStatus }) }),
        endAdornment && /* @__PURE__ */ jsx("div", { className: withBaseName("endAdornmentContainer"), children: endAdornment }),
        /* @__PURE__ */ jsx("div", { className: withBaseName("activationIndicator") })
      ]
    }
  );
});

export { PillInput };
//# sourceMappingURL=PillInput.js.map
