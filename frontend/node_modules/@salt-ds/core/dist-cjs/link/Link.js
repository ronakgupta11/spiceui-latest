'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var SemanticIconProvider = require('../semantic-icon-provider/SemanticIconProvider.js');
var Text = require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
var capitalize = require('../utils/capitalize.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var Link$1 = require('./Link.css.js');
var LinkAction = require('./LinkAction.js');

const withBaseName = makePrefixer.makePrefixer("saltLink");
const Link = React.forwardRef(function Link2({
  IconComponent,
  href,
  className,
  children,
  color: colorProp,
  variant,
  target = "_self",
  underline = "default",
  ...rest
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-link",
    css: Link$1,
    window: targetWindow
  });
  const { ExternalIcon } = SemanticIconProvider.useIcon();
  const color = variant ?? colorProp ?? "primary";
  const LinkIconComponent = IconComponent === void 0 ? ExternalIcon : IconComponent;
  return /* @__PURE__ */ jsxRuntime.jsxs(
    Text.Text,
    {
      as: LinkAction.LinkAction,
      className: clsx.clsx(
        withBaseName(),
        withBaseName(`underline${capitalize.capitalize(underline)}`),
        {
          [withBaseName(color)]: color !== "inherit"
        },
        className
      ),
      href,
      ref,
      target,
      color: "inherit",
      ...rest,
      children: [
        children,
        target === "_blank" && /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [
          LinkIconComponent && /* @__PURE__ */ jsxRuntime.jsx(LinkIconComponent, { className: withBaseName("icon"), "aria-hidden": true }),
          /* @__PURE__ */ jsxRuntime.jsx("span", { className: withBaseName("externalLinkADA"), children: "External" })
        ] })
      ]
    }
  );
});

exports.Link = Link;
//# sourceMappingURL=Link.js.map
