import { jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { useBreakpoint } from '../breakpoints/BreakpointProvider.js';
import { FlexLayout } from '../flex-layout/FlexLayout.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { resolveResponsiveValue } from '../utils/useResponsiveProp.js';
import css_248z from './StackLayout.css.js';

const withBaseName = makePrefixer("saltStackLayout");
function parseSpacing(value) {
  if (value === void 0 || typeof value === "string") {
    return value;
  }
  return `calc(var(--salt-spacing-100) * ${value})`;
}
const StackLayout = forwardRef(
  ({
    children,
    className,
    direction = "column",
    gap = 3,
    separators,
    style,
    ...rest
  }, ref) => {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-stack-layout",
      css: css_248z,
      window: targetWindow
    });
    const { matchedBreakpoints } = useBreakpoint();
    const flexGap = resolveResponsiveValue(gap, matchedBreakpoints);
    const separatorAlignment = separators === true ? "center" : separators;
    const flexDirection = resolveResponsiveValue(direction, matchedBreakpoints);
    const stackLayoutStyles = {
      ...style,
      "--stackLayout-gap": parseSpacing(flexGap)
    };
    return /* @__PURE__ */ jsx(
      FlexLayout,
      {
        className: clsx(
          withBaseName(),
          {
            [withBaseName(flexDirection ?? "")]: flexDirection,
            [withBaseName("separator")]: !!separatorAlignment,
            [separatorAlignment ? withBaseName(`separator-${separatorAlignment}`) : ""]: separatorAlignment
          },
          className
        ),
        ref,
        direction,
        style: stackLayoutStyles,
        wrap: false,
        gap: flexGap,
        ...rest,
        children
      }
    );
  }
);

export { StackLayout };
//# sourceMappingURL=StackLayout.js.map
