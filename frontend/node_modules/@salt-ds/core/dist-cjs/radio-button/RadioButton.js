'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var RadioButtonIcon = require('./RadioButtonIcon.js');
var useRadioGroup = require('./internal/useRadioGroup.js');
var RadioButton$1 = require('./RadioButton.css.js');

const withBaseName = makePrefixer.makePrefixer("saltRadioButton");
const RadioButton = React.forwardRef(
  function RadioButton2(props, ref) {
    const {
      checked: checkedProp,
      className,
      disabled: disabledProp,
      error,
      inputProps = {},
      inputRef,
      label,
      name: nameProp,
      onFocus,
      onBlur,
      onChange,
      readOnly: readOnlyProp,
      value,
      validationStatus: validationStatusProp,
      ...rest
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-radio-button",
      css: RadioButton$1,
      window: targetWindow
    });
    const {
      a11yProps: formFieldA11yProps,
      disabled: formFieldDisabled,
      readOnly: formFieldReadOnly,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps.useFormFieldProps();
    const radioGroup = useRadioGroup.useRadioGroup();
    const {
      "aria-describedby": inputDescribedBy,
      "aria-labelledby": inputLabelledBy,
      className: inputClassName,
      onChange: inputOnChange,
      ...restInputProps
    } = inputProps;
    const disabled = (radioGroup == null ? void 0 : radioGroup.disabled) || formFieldDisabled || disabledProp;
    const readOnly = (radioGroup == null ? void 0 : radioGroup.readOnly) || formFieldReadOnly || readOnlyProp;
    const validationStatus = !disabled ? (radioGroup == null ? void 0 : radioGroup.validationStatus) ?? formFieldValidationStatus ?? validationStatusProp : void 0;
    const radioGroupChecked = checkedProp ?? (radioGroup && value ? radioGroup.value === value : checkedProp);
    const name = nameProp ?? (radioGroup == null ? void 0 : radioGroup.name);
    const [checked, setCheckedState] = useControlled.useControlled({
      controlled: radioGroupChecked,
      default: Boolean(checkedProp),
      name: "RadioBase",
      state: "checked"
    });
    const handleChange = (event) => {
      var _a;
      if (readOnly) return;
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      onChange == null ? void 0 : onChange(event);
      inputOnChange == null ? void 0 : inputOnChange(event);
      (_a = radioGroup == null ? void 0 : radioGroup.onChange) == null ? void 0 : _a.call(radioGroup, event);
    };
    return /* @__PURE__ */ jsxRuntime.jsxs(
      "label",
      {
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("disabled")]: disabled,
            [withBaseName("readOnly")]: readOnly,
            [withBaseName("error")]: error,
            [withBaseName(validationStatus || "")]: validationStatus
          },
          className
        ),
        ref,
        ...rest,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(
            "input",
            {
              "aria-describedby": clsx.clsx(
                radioGroup === void 0 ? formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-describedby"] : void 0,
                inputDescribedBy
              ) || void 0,
              "aria-labelledby": clsx.clsx(
                radioGroup === void 0 ? formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-labelledby"] : void 0,
                inputLabelledBy
              ) || void 0,
              className: clsx.clsx(withBaseName("input"), inputClassName),
              checked,
              disabled,
              readOnly,
              name,
              value,
              onBlur,
              onChange: handleChange,
              onFocus,
              type: "radio",
              ref: inputRef,
              ...restInputProps
            }
          ),
          /* @__PURE__ */ jsxRuntime.jsx(
            RadioButtonIcon.RadioButtonIcon,
            {
              checked,
              disabled,
              readOnly,
              validationStatus,
              error
            }
          ),
          label
        ]
      }
    );
  }
);

exports.RadioButton = RadioButton;
//# sourceMappingURL=RadioButton.js.map
