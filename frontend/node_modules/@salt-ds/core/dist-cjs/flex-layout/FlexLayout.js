'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var BreakpointProvider = require('../breakpoints/BreakpointProvider.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
var useResponsiveProp = require('../utils/useResponsiveProp.js');
var FlexLayout$1 = require('./FlexLayout.css.js');
var parseSpacing = require('./parseSpacing.js');

const withBaseName = makePrefixer.makePrefixer("saltFlexLayout");
const FLEX_ALIGNMENT_BASE = ["start", "end", "center"];
const FLEX_CONTENT_ALIGNMENT_BASE = [
  ...FLEX_ALIGNMENT_BASE,
  "space-between",
  "space-around",
  "space-evenly"
];
function parseAlignment(style) {
  return style === "start" || style === "end" ? `flex-${style}` : style;
}
const FlexLayout = React.forwardRef(
  ({
    as,
    align,
    children,
    className,
    direction = "row",
    gap = 3,
    margin = 0,
    padding = 0,
    justify,
    separators,
    style,
    wrap = false,
    ...rest
  }, ref) => {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-flex-layout",
      css: FlexLayout$1,
      window: targetWindow
    });
    const Component = as || "div";
    const separatorAlignment = separators === true ? "center" : separators;
    const { matchedBreakpoints } = BreakpointProvider.useBreakpoint();
    const flexGap = useResponsiveProp.resolveResponsiveValue(gap, matchedBreakpoints);
    const flexMargin = useResponsiveProp.resolveResponsiveValue(margin, matchedBreakpoints);
    const flexPadding = useResponsiveProp.resolveResponsiveValue(padding, matchedBreakpoints);
    const flexDirection = useResponsiveProp.resolveResponsiveValue(direction, matchedBreakpoints);
    const flexWrap = useResponsiveProp.resolveResponsiveValue(wrap, matchedBreakpoints);
    const flexLayoutStyles = {
      ...style,
      "--flexLayout-align": parseAlignment(align),
      "--flexLayout-direction": flexDirection,
      "--flexLayout-gap": parseSpacing.parseSpacing(flexGap),
      "--flexLayout-margin": parseSpacing.parseSpacing(flexMargin),
      "--flexLayout-padding": parseSpacing.parseSpacing(flexPadding),
      "--flexLayout-justify": parseAlignment(justify),
      "--flexLayout-wrap": flexWrap ? "wrap" : "nowrap"
    };
    return /* @__PURE__ */ jsxRuntime.jsx(
      Component,
      {
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("separator")]: separatorAlignment && !wrap,
            [withBaseName(
              `separator-${flexDirection ?? "row"}-${separatorAlignment ?? "center"}`
            )]: separatorAlignment && !wrap,
            [withBaseName(`separator-${flexDirection ?? "row"}`)]: separatorAlignment && !wrap
          },
          className
        ),
        ref,
        style: flexLayoutStyles,
        ...rest,
        children
      }
    );
  }
);

exports.FLEX_ALIGNMENT_BASE = FLEX_ALIGNMENT_BASE;
exports.FLEX_CONTENT_ALIGNMENT_BASE = FLEX_CONTENT_ALIGNMENT_BASE;
exports.FlexLayout = FlexLayout;
//# sourceMappingURL=FlexLayout.js.map
