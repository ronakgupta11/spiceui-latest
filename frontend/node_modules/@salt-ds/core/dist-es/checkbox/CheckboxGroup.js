import { jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './CheckboxGroup.css.js';
import { CheckboxGroupContext } from './internal/CheckboxGroupContext.js';

const withBaseName = makePrefixer("saltCheckboxGroup");
const CheckboxGroup = forwardRef(function CheckboxGroup2({
  "aria-labelledby": ariaLabelledBy,
  "aria-describedby": ariaDescribedBy,
  checkedValues: checkedValuesProp,
  defaultCheckedValues = [],
  children,
  className,
  disabled: disabledProp,
  direction = "vertical",
  name,
  onChange,
  readOnly: readOnlyProp,
  wrap,
  validationStatus: validationStatusProp,
  ...other
}, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-checkbox-group",
    css: css_248z,
    window: targetWindow
  });
  const {
    a11yProps,
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps();
  const disabled = formFieldDisabled || disabledProp;
  const readOnly = formFieldReadOnly || readOnlyProp;
  const validationStatus = formFieldValidationStatus ?? validationStatusProp;
  const [checkedValues, setCheckedValues] = useControlled({
    controlled: checkedValuesProp,
    default: defaultCheckedValues,
    name: "CheckboxGroup",
    state: "checkedValues"
  });
  const handleChange = (event) => {
    const name2 = event.target.value;
    setCheckedValues((oldValues = []) => {
      const isSelected = oldValues.includes(name2);
      return isSelected ? oldValues.filter((value) => value !== name2) : oldValues.concat(name2);
    });
    onChange == null ? void 0 : onChange(event);
  };
  return /* @__PURE__ */ jsx(
    "fieldset",
    {
      "aria-labelledby": clsx(a11yProps == null ? void 0 : a11yProps["aria-labelledby"], ariaLabelledBy) || void 0,
      "aria-describedby": clsx(a11yProps == null ? void 0 : a11yProps["aria-describedby"], ariaDescribedBy) || void 0,
      className: clsx(
        withBaseName(),
        withBaseName(direction),
        {
          [withBaseName("noWrap")]: !wrap
        },
        className
      ),
      ref,
      ...other,
      children: /* @__PURE__ */ jsx(
        CheckboxGroupContext.Provider,
        {
          value: {
            disabled,
            name,
            onChange: handleChange,
            checkedValues,
            readOnly,
            validationStatus
          },
          children
        }
      )
    }
  );
});

export { CheckboxGroup };
//# sourceMappingURL=CheckboxGroup.js.map
