import { useRef, useEffect } from 'react';
import '../aria-announcer/AriaAnnouncerContext.js';
import 'react/jsx-runtime';
import { useAriaAnnouncer } from '../aria-announcer/useAriaAnnouncer.js';
import 'clsx';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';

function getDocument(floating) {
  return (floating == null ? void 0 : floating.ownerDocument) ?? document;
}
function getWindow(value) {
  return getDocument(value).defaultView ?? window;
}
function isElement(value) {
  return value ? value instanceof getWindow(value).Element : false;
}
function getDelay(value, prop, pointerType) {
  if (pointerType && pointerType !== "mouse") {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
const useAriaAnnounce = (context, { delay = 0 }) => {
  const { open, dataRef, refs } = context;
  const pointerTypeRef = useRef();
  const timeoutRef = useRef();
  const blockMouseMoveRef = useRef(true);
  const { announce } = useAriaAnnouncer();
  useIsomorphicLayoutEffect(() => {
    if (!open) {
      pointerTypeRef.current = void 0;
    }
  });
  useEffect(() => {
    const reference = refs.reference.current;
    function announceFloating() {
      var _a;
      const tooltipContent = (_a = refs.floating.current) == null ? void 0 : _a.innerText;
      if (tooltipContent) {
        announce(tooltipContent);
      }
    }
    function onMouseEnter(event) {
      clearTimeout(timeoutRef.current);
      if (open) {
        return;
      }
      blockMouseMoveRef.current = false;
      dataRef.current.openEvent = event;
      if (delay) {
        timeoutRef.current = window.setTimeout(
          () => {
            announceFloating();
          },
          getDelay(delay, "open", pointerTypeRef.current)
        );
      } else {
        announceFloating();
      }
    }
    if (isElement(reference)) {
      reference.addEventListener("mouseenter", onMouseEnter);
      return () => {
        reference.removeEventListener("mouseenter", onMouseEnter);
      };
    }
  }, [dataRef, delay, open, refs.reference, refs.floating, announce]);
  function setPointerRef(event) {
    pointerTypeRef.current = event.pointerType;
  }
  return {
    reference: {
      onPointerDown: setPointerRef,
      onPointerEnter: setPointerRef
    },
    floating: {
      onMouseEnter() {
        clearTimeout(timeoutRef.current);
      }
    }
  };
};

export { useAriaAnnounce };
//# sourceMappingURL=useAriaAnnounce.js.map
