'use strict';

var jsxRuntime = require('react/jsx-runtime');
var icons = require('@salt-ds/icons');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var SaltProvider = require('../salt-provider/SaltProvider.js');
require('react');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../viewport/ViewportProvider.js');
var CheckboxIcon$1 = require('./CheckboxIcon.css.js');

const withBaseName = makePrefixer.makePrefixer("saltCheckboxIcon");
function CheckedIcon(props) {
  const density = SaltProvider.useDensity();
  return density === "high" ? /* @__PURE__ */ jsxRuntime.jsx(icons.SuccessSmallSolidIcon, { ...props }) : /* @__PURE__ */ jsxRuntime.jsx(icons.SuccessSolidIcon, { ...props });
}
function CheckedReadOnlyIcon(props) {
  const density = SaltProvider.useDensity();
  return density === "high" ? /* @__PURE__ */ jsxRuntime.jsx(icons.SuccessSmallIcon, { ...props }) : /* @__PURE__ */ jsxRuntime.jsx(icons.SuccessIcon, { ...props });
}
const CheckboxIcon = ({
  checked = false,
  className,
  disabled,
  error,
  indeterminate,
  validationStatus,
  readOnly
}) => {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-checkbox-icon",
    css: CheckboxIcon$1,
    window: targetWindow
  });
  return /* @__PURE__ */ jsxRuntime.jsxs(
    "div",
    {
      "aria-hidden": "true",
      className: clsx.clsx(
        withBaseName(),
        {
          [withBaseName("checked")]: checked,
          [withBaseName("disabled")]: disabled,
          [withBaseName("error")]: error,
          [withBaseName(validationStatus || "")]: validationStatus,
          [withBaseName("indeterminate")]: indeterminate,
          [withBaseName("readOnly")]: readOnly
        },
        className
      ),
      children: [
        checked && !indeterminate && !readOnly && /* @__PURE__ */ jsxRuntime.jsx(CheckedIcon, { className: withBaseName("icon") }),
        checked && !indeterminate && readOnly && /* @__PURE__ */ jsxRuntime.jsx(CheckedReadOnlyIcon, { className: withBaseName("icon") })
      ]
    }
  );
};

exports.CheckboxIcon = CheckboxIcon;
//# sourceMappingURL=CheckboxIcon.js.map
