import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { useIcon } from '../semantic-icon-provider/SemanticIconProvider.js';
import { Text } from '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import { capitalize } from '../utils/capitalize.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './Link.css.js';
import { LinkAction } from './LinkAction.js';

const withBaseName = makePrefixer("saltLink");
const Link = forwardRef(function Link2({
  IconComponent,
  href,
  className,
  children,
  color: colorProp,
  variant,
  target = "_self",
  underline = "default",
  ...rest
}, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-link",
    css: css_248z,
    window: targetWindow
  });
  const { ExternalIcon } = useIcon();
  const color = variant ?? colorProp ?? "primary";
  const LinkIconComponent = IconComponent === void 0 ? ExternalIcon : IconComponent;
  return /* @__PURE__ */ jsxs(
    Text,
    {
      as: LinkAction,
      className: clsx(
        withBaseName(),
        withBaseName(`underline${capitalize(underline)}`),
        {
          [withBaseName(color)]: color !== "inherit"
        },
        className
      ),
      href,
      ref,
      target,
      color: "inherit",
      ...rest,
      children: [
        children,
        target === "_blank" && /* @__PURE__ */ jsxs(Fragment, { children: [
          LinkIconComponent && /* @__PURE__ */ jsx(LinkIconComponent, { className: withBaseName("icon"), "aria-hidden": true }),
          /* @__PURE__ */ jsx("span", { className: withBaseName("externalLinkADA"), children: "External" })
        ] })
      ]
    }
  );
});

export { Link };
//# sourceMappingURL=Link.js.map
