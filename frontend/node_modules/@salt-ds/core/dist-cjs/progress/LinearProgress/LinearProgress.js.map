{"version":3,"file":"LinearProgress.js","sources":["../src/progress/LinearProgress/LinearProgress.tsx"],"sourcesContent":["import { useComponentCssInjection } from \"@salt-ds/styles\";\nimport { useWindow } from \"@salt-ds/window\";\nimport { clsx } from \"clsx\";\nimport { type ComponentPropsWithoutRef, forwardRef } from \"react\";\nimport { Text } from \"../../text\";\nimport { makePrefixer } from \"../../utils\";\n\nimport linearProgressCss from \"./LinearProgress.css\";\n\nconst withBaseName = makePrefixer(\"saltLinearProgress\");\n\nexport interface LinearProgressProps extends ComponentPropsWithoutRef<\"div\"> {\n  /**\n   * The value of the buffer indicator.\n   * Value between `min` and `max`.\n   * When no `value` and `bufferValue` is passed in, show as indeterminate state.\n   */\n  bufferValue?: number;\n  /**\n   * Whether to hide the text label within the progress. Defaults to `false`.\n   */\n  hideLabel?: boolean;\n  /**\n   * The value of the max progress indicator.\n   * Default value is 100.\n   */\n  max?: number;\n  /**\n   * The value of the min progress indicator.\n   * Default value is 0.\n   */\n  min?: number;\n  /**\n   * The value of the progress indicator.\n   * Value between `min` and `max`.\n   * When no `value` and `bufferValue` is passed in, show as indeterminate state.\n   */\n  value?: number;\n}\n\nexport const LinearProgress = forwardRef<HTMLDivElement, LinearProgressProps>(\n  function LinearProgress(\n    {\n      className,\n      hideLabel = false,\n      max = 100,\n      min = 0,\n      value,\n      bufferValue,\n      ...rest\n    },\n    ref,\n  ) {\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-linear-progress\",\n      css: linearProgressCss,\n      window: targetWindow,\n    });\n\n    const isIndeterminate = value === undefined && bufferValue === undefined;\n    const progress =\n      value === undefined ? 0 : ((value - min) / (max - min)) * 100;\n    const buffer =\n      bufferValue === undefined ? 0 : ((bufferValue - min) / (max - min)) * 100;\n    const barStyle = {\n      width: isIndeterminate ? undefined : `${progress}%`,\n    };\n    const bufferStyle = {\n      width: `${buffer}%`,\n    };\n\n    return (\n      <div\n        className={clsx(withBaseName(), className)}\n        ref={ref}\n        role=\"progressbar\"\n        aria-valuemax={max}\n        aria-valuemin={min}\n        aria-valuenow={value === undefined ? undefined : Math.round(value)}\n        {...rest}\n      >\n        <div className={withBaseName(\"barContainer\")}>\n          <div\n            className={clsx(withBaseName(\"bar\"), {\n              [withBaseName(\"indeterminate\")]: isIndeterminate,\n            })}\n            style={barStyle}\n          />\n          {bufferValue && bufferValue > 0 ? (\n            <div className={withBaseName(\"buffer\")} style={bufferStyle} />\n          ) : null}\n          <div className={withBaseName(\"track\")} />\n        </div>\n        {!hideLabel && (\n          <Text styleAs=\"h2\" className={withBaseName(\"progressLabel\")}>\n            {isIndeterminate ? \"â€” %\" : `${Math.round(progress)} %`}\n          </Text>\n        )}\n      </div>\n    );\n  },\n);\n"],"names":["makePrefixer","forwardRef","LinearProgress","useWindow","useComponentCssInjection","linearProgressCss","jsxs","clsx","jsx","Text"],"mappings":";;;;;;;;;;;;;;;;;;;;;AASA,MAAM,YAAA,GAAeA,0BAAa,oBAAoB,CAAA;AA+B/C,MAAM,cAAiB,GAAAC,gBAAA;AAAA,EAC5B,SAASC,eACP,CAAA;AAAA,IACE,SAAA;AAAA,IACA,SAAY,GAAA,KAAA;AAAA,IACZ,GAAM,GAAA,GAAA;AAAA,IACN,GAAM,GAAA,CAAA;AAAA,IACN,KAAA;AAAA,IACA,WAAA;AAAA,IACA,GAAG;AAAA,KAEL,GACA,EAAA;AACA,IAAA,MAAM,eAAeC,gBAAU,EAAA;AAC/B,IAAyBC,+BAAA,CAAA;AAAA,MACvB,MAAQ,EAAA,sBAAA;AAAA,MACR,GAAK,EAAAC,gBAAA;AAAA,MACL,MAAQ,EAAA;AAAA,KACT,CAAA;AAED,IAAM,MAAA,eAAA,GAAkB,KAAU,KAAA,MAAA,IAAa,WAAgB,KAAA,MAAA;AAC/D,IAAA,MAAM,WACJ,KAAU,KAAA,MAAA,GAAY,KAAM,KAAQ,GAAA,GAAA,KAAQ,MAAM,GAAQ,CAAA,GAAA,GAAA;AAC5D,IAAA,MAAM,SACJ,WAAgB,KAAA,MAAA,GAAY,KAAM,WAAc,GAAA,GAAA,KAAQ,MAAM,GAAQ,CAAA,GAAA,GAAA;AACxE,IAAA,MAAM,QAAW,GAAA;AAAA,MACf,KAAO,EAAA,eAAA,GAAkB,MAAY,GAAA,CAAA,EAAG,QAAQ,CAAA,CAAA;AAAA,KAClD;AACA,IAAA,MAAM,WAAc,GAAA;AAAA,MAClB,KAAA,EAAO,GAAG,MAAM,CAAA,CAAA;AAAA,KAClB;AAEA,IACE,uBAAAC,eAAA;AAAA,MAAC,KAAA;AAAA,MAAA;AAAA,QACC,SAAW,EAAAC,SAAA,CAAK,YAAa,EAAA,EAAG,SAAS,CAAA;AAAA,QACzC,GAAA;AAAA,QACA,IAAK,EAAA,aAAA;AAAA,QACL,eAAe,EAAA,GAAA;AAAA,QACf,eAAe,EAAA,GAAA;AAAA,QACf,iBAAe,KAAU,KAAA,MAAA,GAAY,MAAY,GAAA,IAAA,CAAK,MAAM,KAAK,CAAA;AAAA,QAChE,GAAG,IAAA;AAAA,QAEJ,QAAA,EAAA;AAAA,0BAAAD,eAAA,CAAC,KAAI,EAAA,EAAA,SAAA,EAAW,YAAa,CAAA,cAAc,CACzC,EAAA,QAAA,EAAA;AAAA,4BAAAE,cAAA;AAAA,cAAC,KAAA;AAAA,cAAA;AAAA,gBACC,SAAW,EAAAD,SAAA,CAAK,YAAa,CAAA,KAAK,CAAG,EAAA;AAAA,kBACnC,CAAC,YAAA,CAAa,eAAe,CAAC,GAAG;AAAA,iBAClC,CAAA;AAAA,gBACD,KAAO,EAAA;AAAA;AAAA,aACT;AAAA,YACC,WAAA,IAAe,WAAc,GAAA,CAAA,mBAC3BC,cAAA,CAAA,KAAA,EAAA,EAAI,SAAW,EAAA,YAAA,CAAa,QAAQ,CAAA,EAAG,KAAO,EAAA,WAAA,EAAa,CAC1D,GAAA,IAAA;AAAA,4BACHA,cAAA,CAAA,KAAA,EAAA,EAAI,SAAW,EAAA,YAAA,CAAa,OAAO,CAAG,EAAA;AAAA,WACzC,EAAA,CAAA;AAAA,UACC,CAAC,SACA,oBAAAA,cAAA,CAACC,SAAK,EAAA,EAAA,OAAA,EAAQ,MAAK,SAAW,EAAA,YAAA,CAAa,eAAe,CAAA,EACvD,4BAAkB,UAAQ,GAAA,CAAA,EAAG,KAAK,KAAM,CAAA,QAAQ,CAAC,CACpD,EAAA,CAAA,EAAA;AAAA;AAAA;AAAA,KAEJ;AAAA;AAGN;;;;"}