import { jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useRef } from 'react';
import '../toggle-button-group/ToggleButtonGroup.js';
import { useToggleButtonGroup } from '../toggle-button-group/ToggleButtonGroupContext.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import css_248z from './ToggleButton.css.js';

const withBaseName = makePrefixer("saltToggleButton");
const ToggleButton = forwardRef(
  function ToggleButton2(props, ref) {
    const {
      appearance: appearanceProp,
      children,
      className,
      disabled: disabledProp,
      value,
      onClick,
      onFocus,
      onChange,
      readOnly: readOnlyProp,
      selected: selectedProp,
      defaultSelected,
      sentiment: sentimenentProp,
      ...rest
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-toggle-button",
      css: css_248z,
      window: targetWindow
    });
    const buttonRef = useRef(null);
    const handleRef = useForkRef(ref, buttonRef);
    const toggleButtonGroup = useToggleButtonGroup();
    const toggleButtonGroupSelected = toggleButtonGroup ? toggleButtonGroup.isSelected(value) : selectedProp;
    const focusable = toggleButtonGroup ? toggleButtonGroup == null ? void 0 : toggleButtonGroup.isFocused(value) : true;
    const sentiment = sentimenentProp || (toggleButtonGroup == null ? void 0 : toggleButtonGroup.sentiment) || "neutral";
    const appearance = appearanceProp || (toggleButtonGroup == null ? void 0 : toggleButtonGroup.appearance) || "solid";
    const disabled = (toggleButtonGroup == null ? void 0 : toggleButtonGroup.disabled) || disabledProp;
    const readOnly = (toggleButtonGroup == null ? void 0 : toggleButtonGroup.readOnly) || readOnlyProp;
    const [selected, setSelected] = useControlled({
      controlled: toggleButtonGroupSelected,
      default: Boolean(defaultSelected),
      name: "ToggleButton",
      state: "selected"
    });
    const handleClick = (event) => {
      if (disabled || readOnly) {
        return;
      }
      toggleButtonGroup == null ? void 0 : toggleButtonGroup.select(event);
      setSelected(!selected);
      onChange == null ? void 0 : onChange(event);
      onClick == null ? void 0 : onClick(event);
    };
    const handleFocus = (event) => {
      toggleButtonGroup == null ? void 0 : toggleButtonGroup.focus(value);
      onFocus == null ? void 0 : onFocus(event);
    };
    const toggleButtonProps = {
      "aria-readonly": readOnlyProp,
      "aria-pressed": !toggleButtonGroup ? selected : void 0,
      "aria-checked": toggleButtonGroup ? selected : void 0,
      "aria-disabled": disabled,
      role: toggleButtonGroup ? "radio" : void 0,
      className: clsx(
        withBaseName(),
        withBaseName(sentiment),
        withBaseName(appearance),
        readOnly && withBaseName("readOnly"),
        className
      ),
      onClick: handleClick,
      onFocus: handleFocus,
      tabIndex: focusable ? 0 : -1,
      value,
      type: "button",
      disabled,
      readOnly: readOnlyProp,
      ...rest
    };
    return /* @__PURE__ */ jsx("button", { ref: handleRef, ...toggleButtonProps, children });
  }
);

export { ToggleButton };
//# sourceMappingURL=ToggleButton.js.map
