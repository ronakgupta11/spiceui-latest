import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef, useEffect } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { useIsViewportLargerThanBreakpoint } from './useIsViewportLargerThanBreakpoint.js';
import css_248z from './ParentChildLayout.css.js';

const withBaseName = makePrefixer("saltParentChildLayout");
const ParentChildLayout = forwardRef(function ParentChildLayout2({
  collapseAtBreakpoint = "sm",
  visibleView = "child",
  parent,
  child,
  className,
  gap = 0,
  onCollapseChange,
  style,
  ...rest
}, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-parent-child-layout",
    css: css_248z,
    window: targetWindow
  });
  const isCollapsed = useIsViewportLargerThanBreakpoint(collapseAtBreakpoint);
  useEffect(() => {
    onCollapseChange == null ? void 0 : onCollapseChange(isCollapsed);
  }, [isCollapsed, onCollapseChange]);
  const parentChildLayoutStyles = {
    ...style,
    "--parentChildLayout-gap": `calc(var(--salt-spacing-100) * ${gap})`
  };
  return /* @__PURE__ */ jsx(
    "div",
    {
      ref,
      className: clsx(withBaseName(), className),
      style: parentChildLayoutStyles,
      ...rest,
      children: isCollapsed ? /* @__PURE__ */ jsx(
        "div",
        {
          className: clsx({
            [withBaseName("collapsed")]: isCollapsed,
            [withBaseName("childAnimation")]: visibleView === "child",
            [withBaseName("parentAnimation")]: visibleView === "parent"
          }),
          children: isCollapsed && visibleView === "child" ? child : parent
        },
        visibleView
      ) : /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx("div", { className: withBaseName("parent"), children: parent }),
        /* @__PURE__ */ jsx("div", { className: withBaseName("child"), children: child })
      ] })
    }
  );
});

export { ParentChildLayout };
//# sourceMappingURL=ParentChildLayout.js.map
