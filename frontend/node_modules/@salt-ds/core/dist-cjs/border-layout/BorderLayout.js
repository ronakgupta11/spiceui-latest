'use strict';

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var GridLayout = require('../grid-layout/GridLayout.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');

const withBaseName = makePrefixer.makePrefixer("saltBorderLayout");
const numberOfColumns = 3;
const BorderLayout = React.forwardRef(
  ({ children, className, gap, style, ...rest }, ref) => {
    const borderAreas = React.Children.map(
      children,
      (child) => React.isValidElement(child) && child.props.position
    );
    const topSection = borderAreas.includes("north") ? "north ".repeat(numberOfColumns) : "none ".repeat(numberOfColumns);
    const leftSection = borderAreas.includes("west") ? "west" : "center";
    const rightSection = borderAreas.includes("east") ? "east" : "center";
    const midSection = `${leftSection} center ${rightSection}`;
    const bottomSection = borderAreas.includes("south") ? "south ".repeat(numberOfColumns) : "none ".repeat(numberOfColumns);
    const gridTemplateAreas = `"${topSection}" "${midSection}" "${bottomSection}"`;
    const hasMainSection = borderAreas.includes("center");
    React.useEffect(() => {
      if (process.env.NODE_ENV !== "production") {
        if (!hasMainSection) {
          console.warn(
            "No main section has been found. A main section should be provided."
          );
        }
      }
    }, [hasMainSection]);
    const borderLayoutStyles = {
      ...style,
      "--gridLayout-gridTemplate": gridTemplateAreas
    };
    return /* @__PURE__ */ jsxRuntime.jsx(
      GridLayout.GridLayout,
      {
        className: clsx.clsx(withBaseName(), className, "saltGridLayout-area"),
        columns: numberOfColumns,
        gap: gap || 0,
        style: borderLayoutStyles,
        ref,
        ...rest,
        children
      }
    );
  }
);

exports.BorderLayout = BorderLayout;
//# sourceMappingURL=BorderLayout.js.map
