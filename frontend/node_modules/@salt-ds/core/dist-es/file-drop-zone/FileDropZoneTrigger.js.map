{"version":3,"file":"FileDropZoneTrigger.js","sources":["../src/file-drop-zone/FileDropZoneTrigger.tsx"],"sourcesContent":["import {\n  type ChangeEvent,\n  type FocusEvent,\n  type HTMLAttributes,\n  type SyntheticEvent,\n  forwardRef,\n  useRef,\n} from \"react\";\nimport { Button } from \"../button\";\nimport { useForkRef } from \"../utils\";\n\nexport interface FileDropZoneTriggerProps\n  extends Omit<HTMLAttributes<HTMLButtonElement>, \"onChange\"> {\n  /**\n   * `accept` attribute for HTML <input>.\n   *\n   * A comma separated list of file types the user can pick from the file input dialog box.\n   */\n  accept?: string;\n  /**\n   * Disable all trigger elements.\n   */\n  disabled?: boolean;\n  /**\n   * Allows multiple files to be uploaded.\n   */\n  multiple?: boolean;\n  /**\n   * Callback for input change event\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>, files: File[]) => void;\n}\n\nexport const FileDropZoneTrigger = forwardRef<\n  HTMLButtonElement,\n  FileDropZoneTriggerProps\n>(function FileDropZoneTrigger(\n  { accept, children, disabled, multiple = false, onChange, ...rest },\n  ref,\n) {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const triggerRef = useForkRef(ref, buttonRef);\n\n  // As an ADA requirement when dialog is closed and the focus is returned to the input, we need to\n  // move focus back on the button element so that all labels can be announced correctly\n  const handleFocus = (event: FocusEvent<HTMLInputElement>) => {\n    event.stopPropagation();\n    buttonRef.current?.focus();\n  };\n\n  const handleClick = (event: SyntheticEvent<HTMLButtonElement>) => {\n    event.stopPropagation();\n    fileInputRef.current?.click();\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from((event.target as HTMLInputElement).files ?? []);\n    // Allow selecting the same file multiple times - #3591\n    // User would still be able to put back the value in onChange, if necessary\n    event.target.value = \"\";\n    onChange?.(event, files);\n  };\n  return (\n    <>\n      <Button\n        onClick={handleClick}\n        disabled={disabled}\n        ref={triggerRef}\n        {...rest}\n      >\n        {children ?? \"Browse files\"}\n      </Button>\n      <input\n        accept={accept}\n        className=\"input-hidden\"\n        disabled={disabled}\n        multiple={multiple}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        ref={fileInputRef}\n        type=\"file\"\n      />\n    </>\n  );\n});\n"],"names":["FileDropZoneTrigger"],"mappings":";;;;;;;;;;AAiCO,MAAM,mBAAsB,GAAA,UAAA,CAGjC,SAASA,oBAAAA,CACT,EAAE,MAAQ,EAAA,QAAA,EAAU,QAAU,EAAA,QAAA,GAAW,KAAO,EAAA,QAAA,EAAU,GAAG,IAAA,IAC7D,GACA,EAAA;AACA,EAAM,MAAA,SAAA,GAAY,OAA0B,IAAI,CAAA;AAChD,EAAM,MAAA,YAAA,GAAe,OAAyB,IAAI,CAAA;AAClD,EAAM,MAAA,UAAA,GAAa,UAAW,CAAA,GAAA,EAAK,SAAS,CAAA;AAI5C,EAAM,MAAA,WAAA,GAAc,CAAC,KAAwC,KAAA;AA9C/D,IAAA,IAAA,EAAA;AA+CI,IAAA,KAAA,CAAM,eAAgB,EAAA;AACtB,IAAA,CAAA,EAAA,GAAA,SAAA,CAAU,YAAV,IAAmB,GAAA,MAAA,GAAA,EAAA,CAAA,KAAA,EAAA;AAAA,GACrB;AAEA,EAAM,MAAA,WAAA,GAAc,CAAC,KAA6C,KAAA;AAnDpE,IAAA,IAAA,EAAA;AAoDI,IAAA,KAAA,CAAM,eAAgB,EAAA;AACtB,IAAA,CAAA,EAAA,GAAA,YAAA,CAAa,YAAb,IAAsB,GAAA,MAAA,GAAA,EAAA,CAAA,KAAA,EAAA;AAAA,GACxB;AAEA,EAAM,MAAA,YAAA,GAAe,CAAC,KAAyC,KAAA;AAC7D,IAAA,MAAM,QAAQ,KAAM,CAAA,IAAA,CAAM,MAAM,MAA4B,CAAA,KAAA,IAAS,EAAE,CAAA;AAGvE,IAAA,KAAA,CAAM,OAAO,KAAQ,GAAA,EAAA;AACrB,IAAA,QAAA,IAAA,IAAA,GAAA,MAAA,GAAA,QAAA,CAAW,KAAO,EAAA,KAAA,CAAA;AAAA,GACpB;AACA,EAAA,uBAEI,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAA,GAAA;AAAA,MAAC,MAAA;AAAA,MAAA;AAAA,QACC,OAAS,EAAA,WAAA;AAAA,QACT,QAAA;AAAA,QACA,GAAK,EAAA,UAAA;AAAA,QACJ,GAAG,IAAA;AAAA,QAEH,QAAY,EAAA,QAAA,IAAA;AAAA;AAAA,KACf;AAAA,oBACA,GAAA;AAAA,MAAC,OAAA;AAAA,MAAA;AAAA,QACC,MAAA;AAAA,QACA,SAAU,EAAA,cAAA;AAAA,QACV,QAAA;AAAA,QACA,QAAA;AAAA,QACA,QAAU,EAAA,YAAA;AAAA,QACV,OAAS,EAAA,WAAA;AAAA,QACT,GAAK,EAAA,YAAA;AAAA,QACL,IAAK,EAAA;AAAA;AAAA;AACP,GACF,EAAA,CAAA;AAEJ,CAAC;;;;"}