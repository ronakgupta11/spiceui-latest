'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('@floating-ui/react');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
var useFloatingUI = require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var OverlayContext = require('./OverlayContext.js');
var OverlayPanel$1 = require('./OverlayPanel.css.js');

const withBaseName = makePrefixer.makePrefixer("saltOverlayPanel");
const OverlayPanel = React.forwardRef(
  function OverlayPanel2(props, ref) {
    const {
      className,
      "aria-labelledby": ariaLabelledby,
      children,
      ...rest
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-overlay-panel",
      css: OverlayPanel$1,
      window: targetWindow
    });
    const { Component: FloatingComponent } = useFloatingUI.useFloatingComponent();
    const {
      openState,
      floatingStyles,
      context,
      getFloatingProps,
      floating,
      arrowProps
    } = OverlayContext.useOverlayContext();
    const handleRef = useForkRef.useForkRef(floating, ref);
    const { top, left, width, height, position } = floatingStyles;
    return /* @__PURE__ */ jsxRuntime.jsxs(
      FloatingComponent,
      {
        open: openState,
        className: clsx.clsx(withBaseName(), className),
        "aria-modal": "true",
        ...getFloatingProps(),
        ref: handleRef,
        width,
        height,
        top,
        left,
        position,
        focusManagerProps: {
          context
        },
        "aria-labelledby": ariaLabelledby,
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs("div", { ...rest, children: [
            " ",
            children,
            " "
          ] }),
          /* @__PURE__ */ jsxRuntime.jsx(
            react.FloatingArrow,
            {
              ...arrowProps,
              strokeWidth: 1,
              fill: "var(--overlay-background)",
              stroke: "var(--overlay-borderColor)",
              height: 5,
              width: 10
            }
          )
        ]
      }
    );
  }
);

exports.OverlayPanel = OverlayPanel;
//# sourceMappingURL=OverlayPanel.js.map
