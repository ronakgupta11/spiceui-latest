'use strict';

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
require('../aria-announcer/AriaAnnouncerContext.js');
var useAriaAnnouncer = require('../aria-announcer/useAriaAnnouncer.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useId = require('../utils/useId.js');
var SaltProvider = require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var SpinnerSVG = require('./svgSpinners/SpinnerSVG.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var Spinner$1 = require('./Spinner.css.js');

const SpinnerSizeValues = [
  "default",
  "large",
  "small",
  "medium"
];
const handleSize = (size) => size === "default" ? "medium" : size;
const withBaseName = makePrefixer.makePrefixer("saltSpinner");
const Spinner = React.forwardRef(
  function Spinner2({
    "aria-label": ariaLabel = "loading",
    announcerInterval = 5e3,
    announcerTimeout = 2e4,
    completionAnnouncement = `finished ${ariaLabel}`,
    disableAnnouncer,
    role = "img",
    className,
    size = "medium",
    id: idProp,
    ...rest
  }, ref) {
    const id = useId.useId(idProp);
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-spinner",
      css: Spinner$1,
      window: targetWindow
    });
    const { announce } = useAriaAnnouncer.useAriaAnnouncer();
    const density = SaltProvider.useDensity();
    size = handleSize(size);
    React.useEffect(() => {
      if (disableAnnouncer) return;
      announce(ariaLabel);
      const startTime = (/* @__PURE__ */ new Date()).getTime();
      const interval = announcerInterval > 0 && setInterval(() => {
        if ((/* @__PURE__ */ new Date()).getTime() - startTime > announcerTimeout) {
          announce(
            `${ariaLabel} is still in progress, but will no longer announce.`
          );
          interval && clearInterval(interval);
          return;
        }
        announce(ariaLabel);
      }, announcerInterval);
      return () => {
        if (disableAnnouncer) return;
        interval && clearInterval(interval);
        if (completionAnnouncement) {
          announce(completionAnnouncement);
        }
      };
    }, [
      announce,
      announcerInterval,
      announcerTimeout,
      ariaLabel,
      completionAnnouncement,
      disableAnnouncer
    ]);
    return /* @__PURE__ */ jsxRuntime.jsx(
      "div",
      {
        "aria-label": ariaLabel,
        className: clsx.clsx(withBaseName(), withBaseName(size), className),
        ref,
        role,
        ...rest,
        children: /* @__PURE__ */ jsxRuntime.jsx(SpinnerSVG.SpinnerSVG, { size, density, id })
      }
    );
  }
);

exports.Spinner = Spinner;
exports.SpinnerSizeValues = SpinnerSizeValues;
//# sourceMappingURL=Spinner.js.map
