import { jsxs, jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { Text } from '../../text/Text.js';
import '../../text/Code.js';
import '../../text/Display.js';
import '../../text/Headings.js';
import '../../text/Label.js';
import '../../text/TextAction.js';
import '../../text/TextNotation.js';
import { makePrefixer } from '../../utils/makePrefixer.js';
import '../../utils/useFloatingUI/useFloatingUI.js';
import '../../utils/useId.js';
import '../../salt-provider/SaltProvider.js';
import '../../viewport/ViewportProvider.js';
import css_248z from './LinearProgress.css.js';

const withBaseName = makePrefixer("saltLinearProgress");
const LinearProgress = forwardRef(
  function LinearProgress2({
    className,
    hideLabel = false,
    max = 100,
    min = 0,
    value,
    bufferValue,
    ...rest
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-linear-progress",
      css: css_248z,
      window: targetWindow
    });
    const isIndeterminate = value === void 0 && bufferValue === void 0;
    const progress = value === void 0 ? 0 : (value - min) / (max - min) * 100;
    const buffer = bufferValue === void 0 ? 0 : (bufferValue - min) / (max - min) * 100;
    const barStyle = {
      width: isIndeterminate ? void 0 : `${progress}%`
    };
    const bufferStyle = {
      width: `${buffer}%`
    };
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: clsx(withBaseName(), className),
        ref,
        role: "progressbar",
        "aria-valuemax": max,
        "aria-valuemin": min,
        "aria-valuenow": value === void 0 ? void 0 : Math.round(value),
        ...rest,
        children: [
          /* @__PURE__ */ jsxs("div", { className: withBaseName("barContainer"), children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: clsx(withBaseName("bar"), {
                  [withBaseName("indeterminate")]: isIndeterminate
                }),
                style: barStyle
              }
            ),
            bufferValue && bufferValue > 0 ? /* @__PURE__ */ jsx("div", { className: withBaseName("buffer"), style: bufferStyle }) : null,
            /* @__PURE__ */ jsx("div", { className: withBaseName("track") })
          ] }),
          !hideLabel && /* @__PURE__ */ jsx(Text, { styleAs: "h2", className: withBaseName("progressLabel"), children: isIndeterminate ? "\u2014 %" : `${Math.round(progress)} %` })
        ]
      }
    );
  }
);

export { LinearProgress };
//# sourceMappingURL=LinearProgress.js.map
