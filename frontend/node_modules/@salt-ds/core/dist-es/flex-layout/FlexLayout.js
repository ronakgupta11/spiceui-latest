import { jsx } from 'react/jsx-runtime';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { useBreakpoint } from '../breakpoints/BreakpointProvider.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { resolveResponsiveValue } from '../utils/useResponsiveProp.js';
import css_248z from './FlexLayout.css.js';
import { parseSpacing } from './parseSpacing.js';

const withBaseName = makePrefixer("saltFlexLayout");
const FLEX_ALIGNMENT_BASE = ["start", "end", "center"];
const FLEX_CONTENT_ALIGNMENT_BASE = [
  ...FLEX_ALIGNMENT_BASE,
  "space-between",
  "space-around",
  "space-evenly"
];
function parseAlignment(style) {
  return style === "start" || style === "end" ? `flex-${style}` : style;
}
const FlexLayout = forwardRef(
  ({
    as,
    align,
    children,
    className,
    direction = "row",
    gap = 3,
    margin = 0,
    padding = 0,
    justify,
    separators,
    style,
    wrap = false,
    ...rest
  }, ref) => {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-flex-layout",
      css: css_248z,
      window: targetWindow
    });
    const Component = as || "div";
    const separatorAlignment = separators === true ? "center" : separators;
    const { matchedBreakpoints } = useBreakpoint();
    const flexGap = resolveResponsiveValue(gap, matchedBreakpoints);
    const flexMargin = resolveResponsiveValue(margin, matchedBreakpoints);
    const flexPadding = resolveResponsiveValue(padding, matchedBreakpoints);
    const flexDirection = resolveResponsiveValue(direction, matchedBreakpoints);
    const flexWrap = resolveResponsiveValue(wrap, matchedBreakpoints);
    const flexLayoutStyles = {
      ...style,
      "--flexLayout-align": parseAlignment(align),
      "--flexLayout-direction": flexDirection,
      "--flexLayout-gap": parseSpacing(flexGap),
      "--flexLayout-margin": parseSpacing(flexMargin),
      "--flexLayout-padding": parseSpacing(flexPadding),
      "--flexLayout-justify": parseAlignment(justify),
      "--flexLayout-wrap": flexWrap ? "wrap" : "nowrap"
    };
    return /* @__PURE__ */ jsx(
      Component,
      {
        className: clsx(
          withBaseName(),
          {
            [withBaseName("separator")]: separatorAlignment && !wrap,
            [withBaseName(
              `separator-${flexDirection ?? "row"}-${separatorAlignment ?? "center"}`
            )]: separatorAlignment && !wrap,
            [withBaseName(`separator-${flexDirection ?? "row"}`)]: separatorAlignment && !wrap
          },
          className
        ),
        ref,
        style: flexLayoutStyles,
        ...rest,
        children
      }
    );
  }
);

export { FLEX_ALIGNMENT_BASE, FLEX_CONTENT_ALIGNMENT_BASE, FlexLayout };
//# sourceMappingURL=FlexLayout.js.map
