{
  "component_name": "Calendar",
  "metadata": {
    "component_name": "Calendar",
    "description": "`Calendar` enables users to quickly navigate to and select a single date or range of dates. Currently all date based controls, need to be wrapped in a [LocalizationProvider](/salt/components/localization-provider/examples)",
    "props": {
      "selectionVariant": {
        "type": "enum",
        "required": true,
        "description": "The selection variant, set to \"single\".\nThe selection variant, set to \"range\".\nThe selection variant, set to \"multiselect\".\nThe selection variant, set to \"offset\"."
      },
      "children": {
        "type": "ReactNode",
        "required": true,
        "description": "The content to be rendered inside the Calendar."
      },
      "hideOutOfRangeDates": {
        "type": "boolean",
        "required": false,
        "description": "If `true`, hides dates that are out of the selectable range."
      },
      "focusedDateRef": {
        "type": "MutableRefObject<HTMLElement>",
        "required": false,
        "description": "Ref to attach to the focused element,enabling focus to be controlled."
      },
      "numberOfVisibleMonths": {
        "type": "ResponsiveProp<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12>",
        "required": false,
        "description": "Number of visible months, maximum 12, defaults to 1"
      },
      "timezone": {
        "type": "string",
        "required": false,
        "description": "Specifies the timezone behavior:\n- If undefined, the timezone will be derived from the passed date, or from `defaultSelectedDate`/`selectedDate`.\n- If set to \"default\", the default timezone of the date library will be used.\n- If set to \"system\", the local system's timezone will be applied.\n- If set to \"UTC\", the time will be returned in UTC.\n- If set to a valid IANA timezone identifier, the time will be returned for that specific timezone."
      },
      "selectedDate": {
        "type": "any",
        "required": false,
        "description": "The currently selected date."
      },
      "defaultSelectedDate": {
        "type": "any",
        "required": false,
        "description": "The default selected date."
      },
      "onSelectionChange": {
        "type": "((event: SyntheticEvent<Element, Event>, selectedDate: any) => void) | ((event: SyntheticEvent<Element, Event>, selectedDate: DateRangeSelection<...>) => void) | ((event: SyntheticEvent<...>, selectedDate: MultipleDateSelection<...>) => void) | ((event: SyntheticEvent<...>, selectedDate: DateRangeSelection<...>) => ...",
        "required": false,
        "description": "Callback fired when the selected date changes.\n@param event - The synthetic event.\n@param selectedDate - The new selected date.\n@param event - The synthetic event.\n@param selectedDate - The new selected date.\n@param event - The synthetic event.\n@param selectedDate - The new selected date.\n@param event - The synthetic event.\n@param selectedDate - The new selected date."
      },
      "focusedDate": {
        "type": "any",
        "required": false,
        "description": "The currently focused date in the calendar, or null if no date is focused."
      },
      "hoveredDate": {
        "type": "any",
        "required": false,
        "description": "The currently hovered date."
      },
      "isOutsideAllowedDates": {
        "type": "(date: any) => boolean",
        "required": false,
        "description": "Determines if a date is outside the allowed date range.\n@param date - The date to check.\n@returns `true` if the date is outside the allowed range, otherwise `false`."
      },
      "isDaySelectable": {
        "type": "(date: any) => boolean",
        "required": false,
        "description": "Function to determine if a day is selectable.\n@param date - The date to check.\n@returns `true` if the day is selectable, otherwise `false`."
      },
      "isDayVisible": {
        "type": "(date: any) => boolean",
        "required": false,
        "description": "Function to determine if a day is visible.\n@param date - The date to check.\n@returns `true` if the day is visible, otherwise `false`."
      },
      "onFocusedDateChange": {
        "type": "(event: SyntheticEvent<Element, Event>, date: any) => void",
        "required": false,
        "description": "Callback fired when the focused date changes.\n@param event - The synthetic event, if user event triggered focus or null.\n@param date - The new focused date."
      },
      "onHoveredDateChange": {
        "type": "(event: SyntheticEvent<Element, Event>, hoveredDate: any) => void",
        "required": false,
        "description": "Callback fired when the hovered date changes.\n@param event - The synthetic event.\n@param hoveredDate - The new hovered date."
      },
      "visibleMonth": {
        "type": "any",
        "required": false,
        "description": "The currently visible month."
      },
      "defaultVisibleMonth": {
        "type": "any",
        "required": false,
        "description": "The default visible month."
      },
      "onVisibleMonthChange": {
        "type": "(event: SyntheticEvent<Element, Event>, visibleMonth: any) => void",
        "required": false,
        "description": "Callback fired when the visible month changes.\n@param event - The synthetic event or null if triggered by code.\n@param visibleMonth - The new visible month."
      },
      "isDayUnselectable": {
        "type": "(date: any) => string | false",
        "required": false,
        "description": "Function to determine if a day is unselectable.\n@param date - The date to check.\n@returns A string reason if the day is unselectable, otherwise `false` or `undefined`."
      },
      "isDayHighlighted": {
        "type": "(date: any) => string | false",
        "required": false,
        "description": "Function to determine if a day is highlighted.\n@param date - The date to check.\n@returns A string reason if the day is highlighted, otherwise `false` or `undefined`."
      },
      "isDayDisabled": {
        "type": "(date: any) => string | false",
        "required": false,
        "description": "Function to determine if a day is disabled.\n@param date - The date to check.\n@returns A string reason if the day is disabled, otherwise `false` or `undefined`."
      },
      "minDate": {
        "type": "any",
        "required": false,
        "description": "The minimum selectable date."
      },
      "maxDate": {
        "type": "any",
        "required": false,
        "description": "The maximum selectable date."
      },
      "startDateOffset": {
        "type": "(date: any) => any",
        "required": false,
        "description": "Function to calculate the start date offset.\n@param date - The date to offset.\n@returns The offset start date."
      },
      "endDateOffset": {
        "type": "(date: any) => any",
        "required": false,
        "description": "Function to calculate the end date offset.\n@param date - The date to offset.\n@returns The offset end date."
      }
    },
    "examples": [
      {
        "name": "Bordered",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const Bordered = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  return (\n    <Calendar\n      selectionVariant=\"single\"\n      defaultSelectedDate={dateAdapter.today()}\n    >\n      <CalendarNavigation\n        MonthDropdownProps={{ bordered: true }}\n        YearDropdownProps={{ bordered: true }}\n      />\n      <CalendarGrid />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "CustomDayRendering",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  type renderCalendarDayProps,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport { clsx } from \"clsx\";\nimport type { ReactElement } from \"react\";\nimport styles from \"./customDayRendering.module.css\";\n\nexport const CustomDayRendering = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n\n  function renderDayButton({\n    className,\n    date,\n    status,\n    ...rest\n  }: renderCalendarDayProps<DateFrameworkType>): ReactElement {\n    return (\n      <button\n        {...rest}\n        className={clsx([\n          { [styles.buttonWithDot]: !status.outOfRange },\n          className,\n        ])}\n      >\n        <span className={clsx({ [styles.dot]: !status.outOfRange })}>\n          {dateAdapter.format(date, \"D\")}\n        </span>\n        {status.today ? <span className={styles.today} /> : null}\n      </button>\n    );\n  }\n\n  return (\n    <Calendar selectionVariant={\"single\"} hideOutOfRangeDates>\n      <CalendarNavigation />\n      <CalendarGrid CalendarDayProps={{ render: renderDayButton }} />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "DisabledDates",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const DisabledDates = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  const isDayDisabled = (day: ReturnType<typeof dateAdapter.date>) => {\n    const dayOfWeek = dateAdapter.getDayOfWeek(day);\n    const isWeekend =\n      (dateAdapter.lib === \"luxon\" && (dayOfWeek === 7 || dayOfWeek === 6)) ||\n      (dateAdapter.lib !== \"luxon\" && (dayOfWeek === 0 || dayOfWeek === 6));\n\n    return isWeekend ? \"Weekends are disabled\" : false;\n  };\n  return (\n    <Calendar selectionVariant=\"single\" isDayDisabled={isDayDisabled}>\n      <CalendarNavigation />\n      <CalendarGrid />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "HideOutOfRangeDates",
        "description": "",
        "code": "import { Calendar, CalendarGrid, CalendarNavigation } from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const HideOutOfRangeDates = (): ReactElement => (\n  <Calendar selectionVariant=\"single\" hideOutOfRangeDates>\n    <CalendarNavigation />\n    <CalendarGrid />\n  </Calendar>\n);\n"
      },
      {
        "name": "HideYearDropdown",
        "description": "",
        "code": "import { Calendar, CalendarGrid, CalendarNavigation } from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\nexport const HideYearDropdown = (): ReactElement => (\n  <Calendar selectionVariant=\"single\">\n    <CalendarNavigation hideYearDropdown />\n    <CalendarGrid />\n  </Calendar>\n);\n"
      },
      {
        "name": "HighlightedDates",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const HighlightedDates = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  const isDayHighlighted = (day: ReturnType<typeof dateAdapter.date>) => {\n    const startOfMonth = dateAdapter.startOf(day, \"month\");\n    return dateAdapter.isSame(startOfMonth, day, \"day\")\n      ? \"Start of month reminder\"\n      : false;\n  };\n  return (\n    <Calendar selectionVariant=\"single\" isDayHighlighted={isDayHighlighted}>\n      <CalendarNavigation />\n      <CalendarGrid />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "MinMaxDate",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const MinMaxDate = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  const defaultSelectedDate = dateAdapter.today();\n  const minDate = dateAdapter.startOf(defaultSelectedDate, \"month\");\n  const maxDate = dateAdapter.endOf(defaultSelectedDate, \"month\");\n\n  return (\n    <Calendar\n      selectionVariant={\"single\"}\n      defaultSelectedDate={defaultSelectedDate}\n      minDate={minDate}\n      maxDate={maxDate}\n    >\n      <CalendarNavigation />\n      <CalendarGrid />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "Multiselect",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const Multiselect = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  const defaultSelectedDate = [\n    \"02/01/2024\",\n    \"03/01/2024\",\n    \"04/01/2024\",\n    \"05/01/2024\",\n    \"06/01/2024\",\n    \"11/01/2024\",\n    \"18/01/2024\",\n    \"22/01/2024\",\n    \"25/01/2024\",\n    \"30/01/2024\",\n    \"31/01/2024\",\n    \"01/02/2024\",\n    \"02/02/2024\",\n    \"03/02/2024\",\n    \"08/02/2024\",\n    \"10/02/2024\",\n    \"15/02/2024\",\n    \"16/02/2024\",\n    \"17/02/2024\",\n    \"22/02/2024\",\n    \"29/02/2024\",\n    \"04/03/2024\",\n    \"05/03/2024\",\n    \"06/03/2024\",\n    \"07/03/2024\",\n    \"08/03/2024\",\n    \"11/03/2024\",\n    \"13/03/2024\",\n    \"15/03/2024\",\n    \"18/03/2024\",\n    \"20/03/2024\",\n    \"22/03/2024\",\n    \"25/03/2024\",\n    \"29/03/2024\",\n  ].map((date) => dateAdapter.parse(date, \"DD/MM/YYYY\").date);\n  const defaultVisibleMonth = dateAdapter.parse(\n    \"01/01/2024\",\n    \"DD/MM/YYYY\",\n  ).date;\n  return (\n    <Calendar\n      selectionVariant=\"multiselect\"\n      defaultVisibleMonth={defaultVisibleMonth}\n      defaultSelectedDate={defaultSelectedDate}\n      hideOutOfRangeDates\n    >\n      <CalendarNavigation />\n      <CalendarGrid />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "Offset",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const Offset = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  const endDateOffset = (date: ReturnType<typeof dateAdapter.date>) =>\n    dateAdapter.add(date, { days: 4 });\n  const startDate = dateAdapter.today();\n  const endDate = dateAdapter.add(startDate, { days: 4 });\n  return (\n    <Calendar\n      defaultSelectedDate={{ startDate, endDate }}\n      endDateOffset={endDateOffset}\n      selectionVariant=\"offset\"\n    >\n      <CalendarNavigation />\n      <CalendarGrid />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "Range",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const Range = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  const startDate = dateAdapter.today();\n  const endDate = dateAdapter.add(startDate, { days: 6 });\n\n  return (\n    <Calendar\n      defaultSelectedDate={{ startDate, endDate }}\n      selectionVariant=\"range\"\n    >\n      <CalendarNavigation />\n      <CalendarGrid />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "Single",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const Single = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  return (\n    <Calendar\n      selectionVariant={\"single\"}\n      defaultSelectedDate={dateAdapter.today()}\n    >\n      <CalendarNavigation />\n      <CalendarGrid />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "TodayButton",
        "description": "",
        "code": "import { Button, Divider, StackLayout } from \"@salt-ds/core\";\nimport type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  type UseCalendarSelectionSingleProps,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport { type ReactElement, useState } from \"react\";\n\nexport const TodayButton = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  const today = dateAdapter.today();\n  const [selectedDate, setSelectedDate] =\n    useState<\n      UseCalendarSelectionSingleProps<DateFrameworkType>[\"selectedDate\"]\n    >(null);\n  return (\n    <Calendar\n      selectionVariant=\"single\"\n      selectedDate={selectedDate}\n      defaultVisibleMonth={dateAdapter.startOf(today, \"month\")}\n      onSelectionChange={(_event, newSelectedDate) =>\n        setSelectedDate(newSelectedDate)\n      }\n    >\n      <StackLayout gap={0}>\n        <CalendarNavigation />\n        <CalendarGrid />\n        <Divider />\n        <Button\n          style={{ margin: \"var(--salt-spacing-50)\" }}\n          sentiment=\"accented\"\n          appearance=\"bordered\"\n          onClick={() => setSelectedDate(today)}\n        >\n          Today\n        </Button>\n      </StackLayout>\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "TwinCalendars",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  type CalendarProps,\n  type UseCalendarSelectionRangeProps,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport {\n  type ReactElement,\n  type SyntheticEvent,\n  useCallback,\n  useState,\n} from \"react\";\n\nexport const TwinCalendars = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  const today = dateAdapter.today();\n  const [hoveredDate, setHoveredDate] = useState<DateFrameworkType | null>(\n    null,\n  );\n  const handleHoveredDateChange: CalendarProps<DateFrameworkType>[\"onHoveredDateChange\"] =\n    (event, newHoveredDate) => {\n      setHoveredDate(newHoveredDate);\n    };\n  const [startVisibleMonth, setStartVisibleMonth] = useState<\n    CalendarProps<DateFrameworkType>[\"defaultVisibleMonth\"]\n  >(dateAdapter.startOf(today, \"month\"));\n  const [endVisibleMonth, setEndVisibleMonth] = useState<\n    CalendarProps<DateFrameworkType>[\"defaultVisibleMonth\"]\n  >(dateAdapter.add(startVisibleMonth ?? today, { months: 1 }));\n\n  const handleStartVisibleMonthChange = useCallback(\n    (\n      _event: SyntheticEvent | null,\n      newVisibleMonth: CalendarProps<DateFrameworkType>[\"defaultVisibleMonth\"],\n    ) => {\n      setStartVisibleMonth(newVisibleMonth);\n      if (\n        newVisibleMonth &&\n        endVisibleMonth &&\n        dateAdapter.compare(newVisibleMonth, endVisibleMonth) >= 0\n      ) {\n        setEndVisibleMonth(dateAdapter.add(newVisibleMonth, { months: 1 }));\n      }\n    },\n    [dateAdapter, endVisibleMonth],\n  );\n\n  const handleEndVisibleMonthChange = useCallback(\n    (\n      _event: SyntheticEvent | null,\n      newVisibleMonth: CalendarProps<DateFrameworkType>[\"defaultVisibleMonth\"],\n    ) => {\n      setEndVisibleMonth(newVisibleMonth);\n      if (\n        newVisibleMonth &&\n        startVisibleMonth &&\n        dateAdapter.compare(newVisibleMonth, startVisibleMonth) <= 0\n      ) {\n        setStartVisibleMonth(\n          dateAdapter.startOf(\n            dateAdapter.subtract(newVisibleMonth, { months: 1 }),\n            \"month\",\n          ),\n        );\n      }\n    },\n    [dateAdapter, startVisibleMonth],\n  );\n\n  const [selectedDate, setSelectedDate] = useState<\n    UseCalendarSelectionRangeProps<DateFrameworkType>[\"selectedDate\"]\n  >({ startDate: undefined, endDate: undefined });\n  const handleSelectionChange: UseCalendarSelectionRangeProps<DateFrameworkType>[\"onSelectionChange\"] =\n    (event, newSelectedDate) => {\n      setSelectedDate(newSelectedDate);\n    };\n\n  return (\n    <div style={{ display: \"flex\", gap: 16 }}>\n      <Calendar\n        selectionVariant=\"range\"\n        hideOutOfRangeDates\n        hoveredDate={hoveredDate}\n        visibleMonth={startVisibleMonth}\n        selectedDate={selectedDate}\n        onHoveredDateChange={handleHoveredDateChange}\n        onVisibleMonthChange={handleStartVisibleMonthChange}\n        onSelectionChange={handleSelectionChange}\n      >\n        <CalendarNavigation />\n        <CalendarGrid />\n      </Calendar>\n      <Calendar\n        selectionVariant=\"range\"\n        hideOutOfRangeDates\n        hoveredDate={hoveredDate}\n        selectedDate={selectedDate}\n        visibleMonth={endVisibleMonth}\n        onHoveredDateChange={handleHoveredDateChange}\n        onVisibleMonthChange={handleEndVisibleMonthChange}\n        onSelectionChange={handleSelectionChange}\n      >\n        <CalendarNavigation />\n        <CalendarGrid />\n      </Calendar>\n    </div>\n  );\n};\n"
      },
      {
        "name": "UnselectableDates",
        "description": "",
        "code": "import type { DateFrameworkType } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport type { ReactElement } from \"react\";\n\nexport const UnselectableDates = (): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n  const isDayUnselectable = (day: ReturnType<typeof dateAdapter.date>) => {\n    const dayOfWeek = dateAdapter.getDayOfWeek(day);\n    const isWeekend =\n      (dateAdapter.lib === \"luxon\" && (dayOfWeek === 7 || dayOfWeek === 6)) ||\n      (dateAdapter.lib !== \"luxon\" && (dayOfWeek === 0 || dayOfWeek === 6));\n\n    return isWeekend ? \"weekends are un-selectable\" : false;\n  };\n  return (\n    <Calendar selectionVariant=\"single\" isDayUnselectable={isDayUnselectable}>\n      <CalendarNavigation />\n      <CalendarGrid />\n    </Calendar>\n  );\n};\n"
      },
      {
        "name": "WithLocale",
        "description": "",
        "code": "import { FormField, FormFieldLabel } from \"@salt-ds/core\";\nimport { AdapterDateFns } from \"@salt-ds/date-adapters/date-fns\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  LocalizationProvider,\n} from \"@salt-ds/lab\";\nimport { es as dateFnsEs } from \"date-fns/locale\";\n\nimport type { ReactElement } from \"react\";\n\nexport const WithLocale = (): ReactElement => (\n  <LocalizationProvider DateAdapter={AdapterDateFns} locale={dateFnsEs}>\n    <FormField style={{ width: \"180px\" }}>\n      <FormFieldLabel>ES locale calendar</FormFieldLabel>\n      <Calendar selectionVariant=\"single\">\n        <CalendarNavigation />\n        <CalendarGrid />\n      </Calendar>\n    </FormField>\n  </LocalizationProvider>\n);\n"
      },
      {
        "name": "WithTimezone",
        "description": "",
        "code": "import {\n  Dropdown,\n  type DropdownProps,\n  FormField,\n  FormFieldLabel,\n  GridItem,\n  GridLayout,\n  Option,\n  StackLayout,\n} from \"@salt-ds/core\";\nimport type { DateFrameworkType, Timezone } from \"@salt-ds/date-adapters\";\nimport {\n  Calendar,\n  CalendarGrid,\n  CalendarNavigation,\n  LocalizationProvider,\n  type SingleDateSelection,\n  useLocalization,\n} from \"@salt-ds/lab\";\nimport {\n  type ReactElement,\n  type SyntheticEvent,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport { AdapterDateFns } from \"@salt-ds/date-adapters/date-fns\";\nimport { AdapterDayjs } from \"@salt-ds/date-adapters/dayjs\";\nimport { AdapterLuxon } from \"@salt-ds/date-adapters/luxon\";\nimport { AdapterMoment } from \"@salt-ds/date-adapters/moment\";\nimport type { DateTime } from \"luxon\";\nimport type { Moment } from \"moment\";\n\n// biome-ignore lint/suspicious/noExplicitAny: Date framework adapter\nconst dateAdapterMap: Record<string, any> = {\n  moment: AdapterMoment,\n  dayjs: AdapterDayjs,\n  \"date-fns\": AdapterDateFns,\n  luxon: AdapterLuxon,\n};\n\nconst Single = ({\n  selectedTimezone,\n}: {\n  selectedTimezone: Timezone;\n}): ReactElement => {\n  const { dateAdapter } = useLocalization<DateFrameworkType>();\n\n  const [currentTimezone, setCurrentTimezone] = useState<string>(\"\");\n  const [iso8601String, setIso8601String] = useState<string>(\"\");\n  const [localeDateString, setLocaleDateString] = useState<string>(\"\");\n  const [dateString, setDateString] = useState<string>(\"\");\n  const [error, setError] = useState<string | undefined>(undefined);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: reset related state when timezone changes\n  useEffect(() => {\n    setCurrentTimezone(\"\");\n    setIso8601String(\"\");\n    setLocaleDateString(\"\");\n    setDateString(\"\");\n    setError(undefined);\n  }, [selectedTimezone]);\n\n  const handleSelectionChange = (\n    _event: SyntheticEvent,\n    selection: SingleDateSelection<DateFrameworkType> | null,\n  ) => {\n    console.log(\n      `Selected date: ${dateAdapter.isValid(selection) ? dateAdapter.format(selection, \"DD MMM YYYY\") : selection}`,\n    );\n\n    const systemTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const ianaTimezone =\n      selectedTimezone !== \"system\" && selectedTimezone !== \"default\"\n        ? selectedTimezone\n        : undefined;\n\n    const formatDate = (date: DateFrameworkType) => {\n      const iso = date.toISOString();\n      const locale = new Intl.DateTimeFormat(undefined, {\n        timeZone: systemTimeZone,\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        hour12: true,\n      }).format(date);\n      const formatted = new Intl.DateTimeFormat(undefined, {\n        timeZone: ianaTimezone,\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        hour12: true,\n      }).format(date);\n      return { iso, locale, formatted };\n    };\n\n    const jsDate =\n      dateAdapter.lib === \"luxon\"\n        ? (selection as DateTime).toJSDate()\n        : dateAdapter.lib === \"moment\"\n          ? (selection as Moment).toDate()\n          : selection;\n    const formattedDate = formatDate(jsDate);\n\n    setCurrentTimezone(dateAdapter.getTimezone(selection));\n\n    setIso8601String(formattedDate.iso);\n    setLocaleDateString(formattedDate.locale);\n    setDateString(formattedDate.formatted);\n  };\n\n  return (\n    <GridLayout gap={1} columns={12} rows={5}>\n      <GridItem colSpan={6} rowSpan={4}>\n        <Calendar\n          selectionVariant={\"single\"}\n          timezone={selectedTimezone}\n          onSelectionChange={handleSelectionChange}\n        >\n          <CalendarNavigation />\n          <CalendarGrid />\n        </Calendar>\n      </GridItem>\n      <GridItem colSpan={6} style={{ paddingTop: \"var(--salt-spacing-200)\" }}>\n        <FormField>\n          <FormFieldLabel>Current timezone</FormFieldLabel>\n          <span data-testid={\"timezone\"}>\n            {currentTimezone?.length ? currentTimezone : \"-\"}\n          </span>\n        </FormField>\n      </GridItem>\n      <GridItem colSpan={6}>\n        <FormField>\n          <FormFieldLabel>ISO 8601 Format</FormFieldLabel>\n          <span data-testid={\"iso-date-label\"}>\n            {iso8601String?.length ? iso8601String : \"-\"}\n          </span>\n        </FormField>\n      </GridItem>\n      <GridItem colSpan={6}>\n        <FormField>\n          <FormFieldLabel>Date in current timezone</FormFieldLabel>\n          <span data-testid={\"timezone-date-label\"}>\n            {dateString?.length ? dateString : \"-\"}\n          </span>\n        </FormField>\n      </GridItem>\n      <GridItem colSpan={6}>\n        <FormField>\n          <FormFieldLabel>Date in current locale</FormFieldLabel>\n          <span data-testid={\"locale-date-label\"}>\n            {localeDateString?.length ? localeDateString : \"-\"}\n          </span>\n        </FormField>\n      </GridItem>\n    </GridLayout>\n  );\n};\n\nexport const WithTimezone = (): ReactElement => {\n  // biome-ignore lint/suspicious/noExplicitAny: Date framework adapter\n  const dateAdapterMap: Record<string, any> = {\n    moment: AdapterMoment,\n    dayjs: AdapterDayjs,\n    \"date-fns\": AdapterDateFns,\n    luxon: AdapterLuxon,\n  };\n  const validAdapters = Object.keys(dateAdapterMap);\n  const [dateAdapterName, setDateAdapterName] = useState<string>(\"luxon\");\n\n  const timezoneOptions =\n    dateAdapterName !== \"date-fns\"\n      ? [\n          \"default\",\n          \"system\",\n          \"UTC\",\n          \"America/New_York\",\n          \"Europe/London\",\n          \"Asia/Shanghai\",\n          \"Asia/Kolkata\",\n        ]\n      : [\"default\"];\n\n  const [selectedTimezone, setSelectedTimezone] = useState<string>(\n    timezoneOptions[0],\n  );\n\n  const handleAdapterChange: DropdownProps[\"onSelectionChange\"] = (\n    event,\n    newSelected,\n  ) => {\n    setDateAdapterName(newSelected[0] ?? \"date-fns\");\n  };\n\n  const handleTimezoneChange = (_e: SyntheticEvent, selection: string[]) => {\n    setSelectedTimezone(selection[0]);\n  };\n\n  return (\n    <StackLayout direction={\"column\"}>\n      <StackLayout direction={\"row\"}>\n        <FormField style={{ width: \"120px\" }}>\n          <FormFieldLabel>Select Date adapter</FormFieldLabel>\n          <Dropdown\n            selected={[dateAdapterName]}\n            onSelectionChange={handleAdapterChange}\n          >\n            {validAdapters.map((adapter) => (\n              <Option value={adapter} key={adapter} />\n            ))}\n          </Dropdown>\n        </FormField>\n        <FormField style={{ width: \"120px\" }}>\n          <FormFieldLabel>Select a Timezone</FormFieldLabel>\n          <Dropdown\n            aria-label=\"timezone dropdown\"\n            selected={[selectedTimezone]}\n            onSelectionChange={handleTimezoneChange}\n            style={{ minWidth: \"120px\", width: \"min-content\" }}\n          >\n            {timezoneOptions.map((tz) => (\n              <Option key={tz} value={tz}>\n                {tz}\n              </Option>\n            ))}\n          </Dropdown>\n        </FormField>\n      </StackLayout>\n      <LocalizationProvider DateAdapter={dateAdapterMap[dateAdapterName]}>\n        <Single key={dateAdapterName} selectedTimezone={selectedTimezone} />\n      </LocalizationProvider>\n    </StackLayout>\n  );\n};\n"
      }
    ],
    "category": "@salt-ds/lab",
    "tags": [],
    "when_to_use": [],
    "when_not_to_use": [
      "For tasks other than selecting a date, such as picking a time or displaying event information.",
      "If the date or range is pre-determined and cannot be specified by the user. In such cases, consider showing date options in a dropdown instead."
    ],
    "import_statement": "import { Calendar } from \"@salt-ds/lab\";",
    "source_code_url": "https://github.com/jpmorganchase/salt-ds/blob/main/packages/lab/src/calendar",
    "related_components": []
  }
}