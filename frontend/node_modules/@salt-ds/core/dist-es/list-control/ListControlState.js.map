{"version":3,"file":"ListControlState.js","sources":["../src/list-control/ListControlState.ts"],"sourcesContent":["import {\n  type SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useControlled } from \"../utils\";\nimport type { OptionValue } from \"./ListControlContext\";\n\nexport type OpenChangeReason = \"input\" | \"manual\";\n\nexport type ListControlProps<Item> = {\n  /**\n   * If true, the control will be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the control will be read-only.\n   */\n  readOnly?: boolean;\n  /**\n   * If true, the list will be open by default.\n   */\n  defaultOpen?: boolean;\n  /**\n   * If true, the list will be open. Useful for controlling the component.\n   */\n  open?: boolean;\n  /**\n   * Callback fired when the open state changes.\n   */\n  onOpenChange?: (newOpen: boolean, reason?: OpenChangeReason) => void;\n  /**\n   * The default selected options. If this is provided `defaultValue` should be provided as well.\n   */\n  defaultSelected?: Item[];\n  /**\n   * The selected options. The component will be controlled if this prop is provided.\n   */\n  selected?: Item[];\n  /**\n   * Callback fired when the selected options change.\n   */\n  onSelectionChange?: (event: SyntheticEvent, newSelected: Item[]) => void;\n  /**\n   * If true, multiple options can be selected.\n   */\n  multiselect?: boolean;\n  /**\n   * Callback used to convert an option's `value` to a string. This is needed when the value is different to the display value or the value is not a string.\n   */\n  valueToString?: (item: Item) => string;\n};\n\nfunction findElementPosition(\n  elements: { element: HTMLElement }[],\n  element: HTMLElement,\n) {\n  if (elements.length === 0) {\n    return [0, false] as const;\n  }\n\n  if (\n    element.compareDocumentPosition(elements[elements.length - 1].element) &\n    Node.DOCUMENT_POSITION_PRECEDING\n  ) {\n    return [-1, false] as const;\n  }\n\n  if (\n    element.compareDocumentPosition(elements[0].element) &\n    Node.DOCUMENT_POSITION_FOLLOWING\n  ) {\n    return [0, false] as const;\n  }\n\n  let left = 0;\n  let right = elements.length;\n  let leftLast = 0;\n  let rightLast = right;\n\n  let exists = false;\n\n  while (left < right) {\n    const inPos = Math.floor((right + left) / 2);\n    const compared = element.compareDocumentPosition(elements[inPos].element);\n    if (compared & Node.DOCUMENT_POSITION_PRECEDING) {\n      left = inPos;\n    } else if (compared & Node.DOCUMENT_POSITION_FOLLOWING) {\n      right = inPos;\n    } else {\n      right = inPos;\n      left = inPos;\n      exists = true;\n    }\n    // nothing has changed, must have found limits. insert between.\n    if (leftLast === left && rightLast === right) {\n      break;\n    }\n    leftLast = left;\n    rightLast = right;\n  }\n\n  return [right, exists] as const;\n}\n\nexport function defaultValueToString<Item>(item: Item): string {\n  return String(item);\n}\n\nexport function useListControl<Item>(props: ListControlProps<Item>) {\n  const {\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    multiselect,\n    defaultSelected,\n    selected: selectedProp,\n    onSelectionChange,\n    disabled,\n    readOnly,\n    valueToString = defaultValueToString,\n  } = props;\n\n  const [focusedState, setFocusedState] = useState(false);\n  const [focusVisibleState, setFocusVisibleState] = useState(false);\n\n  useEffect(() => {\n    // remove focus when controlling disabled\n    if (disabled && focusedState) {\n      setFocusedState(false);\n      setFocusVisibleState(false);\n    }\n  }, [disabled, focusedState]);\n\n  const [activeState, setActiveState] = useState<OptionValue<Item> | undefined>(\n    undefined,\n  );\n\n  const setActive = (option?: OptionValue<Item>) => {\n    if (option) {\n      setActiveState(option);\n    } else {\n      setActiveState(undefined);\n    }\n  };\n\n  const [openState, setOpenState] = useControlled({\n    controlled: openProp,\n    default: Boolean(defaultOpen),\n    name: \"ListControl\",\n    state: \"open\",\n  });\n\n  const openKey = useRef<string | undefined>(undefined);\n\n  const setOpen = (\n    newOpen: boolean,\n    reason?: OpenChangeReason,\n    key?: string,\n  ) => {\n    if (disabled || readOnly) {\n      return;\n    }\n\n    setOpenState(newOpen);\n    openKey.current = key;\n\n    if (newOpen !== openState) {\n      onOpenChange?.(newOpen, reason);\n    }\n  };\n\n  const [selectedState, setSelectedState] = useControlled({\n    controlled: selectedProp,\n    default: defaultSelected ?? [],\n    name: \"ListControl\",\n    state: \"selected\",\n  });\n\n  const select = (event: SyntheticEvent, option: OptionValue<Item>) => {\n    if (option.disabled || readOnly || disabled) {\n      return;\n    }\n\n    let newSelected = [option.value];\n\n    if (multiselect) {\n      if (selectedState.includes(option.value)) {\n        newSelected = selectedState.filter((item) => item !== option.value);\n      } else {\n        newSelected = selectedState.concat([option.value]);\n      }\n    }\n\n    setSelectedState(newSelected);\n    onSelectionChange?.(event, newSelected);\n\n    if (!multiselect) {\n      setOpen(false);\n    }\n  };\n\n  const clear = (event: SyntheticEvent) => {\n    setSelectedState([]);\n    if (selectedState.length !== 0) {\n      onSelectionChange?.(event, []);\n    }\n  };\n\n  const optionsRef = useRef<\n    { data: OptionValue<Item>; element: HTMLElement }[]\n  >([]);\n\n  const register = useCallback(\n    (optionValue: OptionValue<Item>, element: HTMLElement) => {\n      const { id } = optionValue;\n      const [index, exists] = findElementPosition(optionsRef.current, element);\n\n      if (!exists) {\n        if (index === -1) {\n          optionsRef.current.push({ data: optionValue, element });\n        } else {\n          optionsRef.current.splice(index, 0, { data: optionValue, element });\n        }\n      }\n\n      return () => {\n        optionsRef.current = optionsRef.current.filter(\n          (item) => item.data.id !== id,\n        );\n      };\n    },\n    [],\n  );\n\n  const getOptionAtIndex = (\n    index: number,\n  ): { data: OptionValue<Item>; element: HTMLElement } | undefined => {\n    return optionsRef.current[index];\n  };\n\n  const getIndexOfOption = (option: OptionValue<Item>) => {\n    return optionsRef.current.findIndex((item) => item.data.id === option.id);\n  };\n\n  const getOptionsMatching = (\n    predicate: (option: OptionValue<Item>) => boolean,\n  ) => {\n    return optionsRef.current.filter((item) => predicate(item.data));\n  };\n\n  const getOptionFromSearch = (\n    search: string,\n    startFrom?: OptionValue<Item>,\n  ) => {\n    const collator = new Intl.Collator(\"en\", {\n      usage: \"search\",\n      sensitivity: \"base\",\n    });\n\n    const startIndex = startFrom ? getIndexOfOption(startFrom) + 1 : 0;\n    const searchList = optionsRef.current.map((item) => item.data);\n\n    let matches = searchList.filter(\n      (option) =>\n        collator.compare(\n          valueToString(option.value).substring(0, search.length),\n          search,\n        ) === 0,\n    );\n\n    if (matches.length === 0) {\n      const letters = search.split(\"\");\n      const allSameLetter =\n        letters.length > 0 &&\n        letters.every((letter) => collator.compare(letter, letters[0]) === 0);\n      if (allSameLetter) {\n        matches = searchList.filter(\n          (option) =>\n            collator.compare(\n              valueToString(option.value)[0].toLowerCase(),\n              letters[0],\n            ) === 0,\n        );\n      }\n    }\n\n    return matches.find((option) => getIndexOfOption(option) >= startIndex);\n  };\n\n  const getFirstOption = () => {\n    return getOptionAtIndex(0);\n  };\n\n  const getLastOption = () => {\n    return getOptionAtIndex(optionsRef.current.length - 1);\n  };\n\n  const getOptionBefore = (option: OptionValue<Item>) => {\n    const index = getIndexOfOption(option);\n    return getOptionAtIndex(index - 1);\n  };\n\n  const getOptionAfter = (option: OptionValue<Item>) => {\n    const index = getIndexOfOption(option);\n    return getOptionAtIndex(index + 1);\n  };\n\n  const listRef = useRef<HTMLDivElement>(null);\n\n  const getOptionPageAbove = (start: OptionValue<Item>) => {\n    const list = listRef.current;\n    let option = optionsRef.current.find((option) => option.data === start);\n\n    if (!list || !option) {\n      return undefined;\n    }\n\n    const containerRect = list.getBoundingClientRect();\n    let optionRect: DOMRect | undefined =\n      option.element.getBoundingClientRect();\n\n    const listY = containerRect.y - list.scrollTop;\n    const pageY = Math.max(\n      0,\n      optionRect.y - listY + optionRect.height - containerRect.height,\n    );\n\n    while (option && optionRect && optionRect.y - listY > pageY) {\n      option = getOptionBefore(option.data);\n      optionRect = option?.element?.getBoundingClientRect();\n    }\n\n    return option ?? getFirstOption();\n  };\n\n  const getOptionPageBelow = (start: OptionValue<Item>) => {\n    const list = listRef.current;\n    let option = optionsRef.current.find((option) => option.data === start);\n\n    if (!list || !option) {\n      return undefined;\n    }\n\n    const containerRect = list.getBoundingClientRect();\n    let optionRect: DOMRect | undefined =\n      option.element.getBoundingClientRect();\n\n    const listY = containerRect.y - list.scrollTop;\n    const pageY = Math.min(\n      list.scrollHeight,\n      optionRect.y - listY - optionRect.height + containerRect.height,\n    );\n\n    while (option && optionRect && optionRect.y - listY < pageY) {\n      option = getOptionAfter(option.data);\n      optionRect = option?.element.getBoundingClientRect();\n    }\n\n    return option ?? getLastOption();\n  };\n\n  useEffect(() => {\n    if (listRef.current) {\n      const activeElement = optionsRef.current.find(\n        (option) => option.data === activeState,\n      )?.element;\n\n      if (!activeElement) {\n        return;\n      }\n\n      activeElement.scrollIntoView({\n        block: \"nearest\",\n        inline: \"nearest\",\n      });\n    }\n  }, [activeState]);\n\n  return {\n    multiselect: Boolean(multiselect),\n    openState,\n    setOpen,\n    openKey,\n    activeState,\n    setActive,\n    selectedState,\n    setSelectedState,\n    select,\n    clear,\n    focusVisibleState,\n    setFocusVisibleState,\n    focusedState,\n    setFocusedState,\n    listRef,\n    options: optionsRef.current.map((option) => option.element),\n    register,\n    getOptionAtIndex,\n    getIndexOfOption,\n    getOptionsMatching,\n    getOptionFromSearch,\n    getOptionAfter,\n    getOptionBefore,\n    getOptionPageAbove,\n    getOptionPageBelow,\n    getFirstOption,\n    getLastOption,\n    valueToString,\n    disabled,\n  };\n}\n"],"names":["option"],"mappings":"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"}