import { jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef, useCallback, useMemo, useRef, useEffect } from 'react';
import '../aria-announcer/AriaAnnouncerContext.js';
import { useAriaAnnouncer } from '../aria-announcer/useAriaAnnouncer.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { paginationContext } from './PaginationContext.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import css_248z from './Pagination.css.js';

const withBaseName = makePrefixer("saltPagination");
const { Provider } = paginationContext;
const Pagination = forwardRef(
  function Pagination2({
    className,
    count,
    children,
    defaultPage = 1,
    page: pageProp,
    onPageChange: onPageChangeProp,
    ...restProps
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-pagination",
      css: css_248z,
      window: targetWindow
    });
    const [pageState, setPageState] = useControlled({
      controlled: pageProp,
      default: defaultPage,
      name: "Pagination",
      state: "page"
    });
    const onPageChange = useCallback(
      (event, page) => {
        setPageState(page);
        onPageChangeProp == null ? void 0 : onPageChangeProp(event, page);
      },
      [onPageChangeProp]
    );
    const contextValue = useMemo(
      () => ({
        page: pageState,
        count,
        onPageChange
      }),
      [pageState, count, onPageChange]
    );
    const { announce } = useAriaAnnouncer();
    const mounted = useRef(false);
    useEffect(() => {
      if (mounted.current) {
        announce(`Page ${pageState}`);
      } else {
        mounted.current = true;
      }
    }, [announce, pageState]);
    if (count < 2) {
      return null;
    }
    return /* @__PURE__ */ jsx(Provider, { value: contextValue, children: /* @__PURE__ */ jsx(
      "nav",
      {
        className: clsx(withBaseName(), className),
        ref,
        ...restProps,
        children
      }
    ) });
  }
);

export { Pagination };
//# sourceMappingURL=Pagination.js.map
