'use strict';

var jsxRuntime = require('react/jsx-runtime');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useId = require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var Accordion$1 = require('./Accordion.css.js');
var AccordionContext = require('./AccordionContext.js');

const withBaseName = makePrefixer.makePrefixer("saltAccordion");
const Accordion = React.forwardRef(
  function Accordion2(props, ref) {
    const {
      className,
      defaultExpanded,
      expanded: expandedProp,
      disabled,
      indicatorSide = "left",
      id: idProp,
      onToggle,
      status,
      value,
      ...rest
    } = props;
    const id = useId.useId(idProp);
    const [headerId, setHeaderId] = React.useState(`${id}-header`);
    const [panelId, setPanelId] = React.useState(`${id}-panel`);
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-accordion",
      css: Accordion$1,
      window: targetWindow
    });
    const [expanded, setExpanded] = useControlled.useControlled({
      controlled: expandedProp,
      default: Boolean(defaultExpanded),
      name: "Accordion",
      state: "expanded"
    });
    const toggle = (event) => {
      setExpanded((prev) => !prev);
      onToggle == null ? void 0 : onToggle(event);
    };
    return /* @__PURE__ */ jsxRuntime.jsx(
      AccordionContext.AccordionContext.Provider,
      {
        value: {
          value,
          toggle,
          expanded,
          indicatorSide,
          disabled: Boolean(disabled),
          headerId,
          setHeaderId,
          panelId,
          setPanelId,
          status
        },
        children: /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            ref,
            className: clsx.clsx(
              withBaseName(),
              {
                [withBaseName(status ?? "")]: status,
                [withBaseName("disabled")]: disabled
              },
              className
            ),
            ...rest
          }
        )
      }
    );
  }
);

exports.Accordion = Accordion;
//# sourceMappingURL=Accordion.js.map
